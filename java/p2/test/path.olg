program path;

import java.lang.String;
import java.lang.Integer;

define(link, keys(0,1), {String, String});
define(path, keys(0,1,2), {String, String, Integer});
define(shortestPath, keys(0,1), {String, String, Integer});

/* 1 -> 2 -> 3 -> 4 */
link("1", "2");
link("2", "3");
link("3", "4");
link("2", "4");

/* 5 -> 6 -> 7 -> 8 -> 9 */
link("5", "6");
link("6", "7");
link("7", "8");
link("8", "9");

watch(link, d);
watch(path, id);
watch(shortestPath, di);

/* Initialize all paths with link */
path(Source, Destination, 1) :- link(Source, Destination);

/* Transitive closure over path, link. */
path(Source, Destination, Hops+1) :- 
	path(Source, Intermediate, Hops), link(Intermediate, Destination);

/* Compute shortest paths. */
shortestPath(Source, Destination, min<Hops>) :- 
	path(Source, Destination, Hops);

delete link("2", "4") :- periodic(Id, 1L, 1L, 5L);