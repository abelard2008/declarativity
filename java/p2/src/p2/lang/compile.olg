program compile;

import p2.lang.plan.Program;
import java.lang.Integer;

/*******************************************************************/
/*** Table definitions ***/
define(dependency, infinity, infinity, keys(0,1,2), {String, TableName, TableName});
define(priorityUpdate, {String, TableName, Integer});
define(config, {String, Program});
define(checkStrata, {String, Integer});

/*******************************************************************/
/*** Facts that initialize priority with this programs predicates ***/

runtime::priority("compile", new TableName("global", "compiler"),  0);
runtime::priority("compile", new TableName("global", "predicate"), 0);
runtime::priority("compile", new TableName("global", "rule"),      0);

runtime::priority("compile", new TableName("compile", "config"),         0);
runtime::priority("compile", new TableName("compile", "dependency"),     1);
runtime::priority("compile", new TableName("compile", "priorityUpdate"), 2);
runtime::priority("compile", new TableName("runtime", "priority"),       3);
runtime::priority("compile", new TableName("compile", "checkStrata"),    4);


/*******************************************************************/
/*** Compile rules: Initialize program priority/strata **/

checkStratification
checkStrata(Program, count<*>) :-
	runtime::priority(Program, TableName, Priority);

/* Determine R/G graph dependencies. */
dependency(ProgramName, Head.name(), Body.name()) :-
	config(ProgramName, Object),
	rule(ProgramName, Rule, _),
	predicate(ProgramName, Rule, 0, Event, Head), /* Position == 0 */
	predicate(ProgramName, Rule, Pos, Event, Body), 
	Head.name() != Body.name(), Pos > 0,
	ProgramName != "compile";
	
/* Transitive closure over the dependency graph. */
dependency(ProgramName, Ancestor, Child) :-
	dependency(ProgramName, Ancestor, Descendant),
	dependency(ProgramName, Descendant, Child),
	Ancestor != Child;
	
/* Initialize all predicates to stratum 0. */
runtime::priority(ProgramName, Pred.name(), 0) :-
	config(ProgramName, Object),
	rule(ProgramName, Rule, _),
	predicate(ProgramName, Rule, Pos, Event, Pred),
	ProgramName != "compile";

/* Bubble up predicates in the stratum chain. */
priorityUpdate(ProgramName, Head, max<Priority>) :-
	runtime::priority(ProgramName, Head, HPriority),
	runtime::priority(ProgramName, Body, BPriority),
	dependency(ProgramName, Head, Body),
	notin dependency(ProgramName, Body, Head),
	HPriority <= BPriority,
	Priority := BPriority + 1;
		
runtime::priority(ProgramName, Pred, Priority) :-
	priorityUpdate(ProgramName, Pred, Priority);
	
	