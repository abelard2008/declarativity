import java.lang.String;
import java.lang.Integer;
import java.lang.Long;
import p2.types.basic.TupleSet;

/* Define runtime events. */
define(runnable, {String, String, TupleSet, TupleSet});
define(strata, {String, Long, Integer});

next schedule(Time, Program, TupleName, Insertions, Deletions) :-
	evaluate(runnable(Program, TupleName, Insertions, Deletions)),
	clock(Location, Time);

/* Delete what has been evaluated in the curent clock. */
cleanup delete schedule(Time, Program, TupleName, Insertions, Deletions) :-
					runnable(Program, TupleName, Insertions, Deletions),
					clock(Location, Time);

/* Identify the runnable tuples. */
runnable runnable(Program, TupleName, Insertions, Deletions) :-
	strata(Program, Time, Priority),
	priority(Program, TupleName, Priority),
	schedule(Time, Program, TupleName, Insertions, Deletions);

/* Determine the current strata in the current time for all 
   programs that have something scheduled. */
strata strata(Program, Time, min<Priority>) :-
	clock(Location, Time),
	schedule(Time, Program, TupleName, Insertions, Deletions),
	priority(Program, TupleName, Priority);

/*******************************************************************/
/*** Periodic scheduler                                           **/


/*******************************************************************/
/*** Compiler configuration                                      **/
/*** TODO: Add general stage installation table */

define(priority, infinity, infinity, keys(0,1), {String, String, Integer});
define(dependency, infinity, infinity, keys(0,1,2), {String, String, String});
define(planned, {String});
define(compile, {String, String, String});

planned("runtime");

/* Compile the program. */
compiler(Program, Owner, File, null) :-
	compile(Program, Owner, File);

/* Plan the program. */
planned(Program) :-
	compiler(Program, Owner, File, Object),
	Object.plan();

/* Rule part tables have been filled in by compiler. */
/* Determine R/G graph dependencies. */
dependency(Program, Head.name(), Body.name()) :-
	planned(Program),
	rule(Program, Rule, _),
	predicate(Program, Rule, 0, Event, Head), /* Position == 0 */
	predicate(Program, Rule, Pos, Event, Body), 
	Head != Body, Pos > 0;
	
/* Initialize all predicates to stratum 0. */
init priority(Program, Pred.name(), 0) :-
		planned(Program),
		rule(Program, Rule, _),
		predicate(Program, Rule, Pos, Event, Pred),
		notin priority(Program, Pred.name(), _);

/* Bubble up predicates in the stratum chain. */
bubble priority(Program, Head, Priority) :-
		priority(Program, Head, HPriority),
		priority(Program, Body, BPriority),
		dependency(Program, Head, Body),
		notin dependency(Program, Body, Head),
		HPriority <= BPriority,
		Priority := BPriority + 1;




