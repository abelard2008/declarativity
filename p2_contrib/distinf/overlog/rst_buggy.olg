/*
 Spanning Tree formation using a simplified version of the algorithm in 
 http://ai.stanford.edu/~paskin/pubs/PaskinGuestrinMcFadden2005.pdf
 
 Running the script:
 /Users/kuangc/workspace/p2/distinf-release/bin/runStagedOverlog -o rst.olg -DLINKS_START_DELAY=2 -DLINKS_FILE=\"../tests/data/local4_links_subset.csv\" -DROUTING_ITERATIONS=1000 -DROUTING_EPOCH=3 -DROUTING_START_DELAY=3 -DMAX_LINK_AGE=5 -DMYID=\"localhost:10000\"

 Forms a spanning tree, without any optimization. Detects dead links and 
 switches the edges of the spanning tree as necessary.
 
 Arguments:
 ----------
 ROUTING_ITERATIONS
   The total number of epochs executed by the spanning tree algorithm.

 ROUTING_EPOCH
   The duration of each epoch in seconds.

 ROUTING_START_DELAY
   The delay (in seconds) before we start running the algorithm.

 MAX_LINK_AGE
   The number of seconds before we drop the link to a silent node.

 MYID
        Unique ID for this node
*/

/* Inserts the link information between this node and its neighbors. */
load_links link(@Node, To, ProbSend, ProbReceive, 0) :- 
        linkInput(@Node, From, To, ProbSend, ProbReceive),
        Node == From.

/* Communication links among nodes: Node, Neighbor, Cost, LastUpdateTime */
materialize(link,infinity,100000,keys(1,2)).

/* Links on which communication was recently heard. */
materialize(linkActive, infinity, infinity, keys(1,2)).

/* The identifier of each node: Node, NodeId */
materialize(identifier, infinity, infinity, keys(1)).

/* The best rootID known by the node: Node, RootId */
materialize(root, infinity, infinity, keys(1)).

/* The node's parent: Node, Parent. */
materialize(parent, infinity, infinity, keys(1)).

/* The latest pulse for each root a node has seen: Node, Root, Pulse. */
materialize(pulse, infinity, infinity, keys(1,2)).

/* A candidate parent.
   Node, Nbr, NbrRootId, NbrPulse, Cost */
materialize(possibleParent, infinity, 10000000, keys(1,2)).

/* Spanning tree edges: Node, Neighbor 
    This is the interface to any program on top of this spanning tree */
materialize(possibleEdge, infinity, infinity, keys(1,2)).
materialize(edge, infinity, infinity, keys(1,2)).


/* Initialize the node's identifier. */
init_identifier
identifier(@Node, MyId, Time) :-
        periodic(@Node, E, 0, 1), MyId := MYID, Time := f_timerElapsed().

watchmod(identifier, "a").

/* Initialize each node to be its own parent and its own root. */
parent(@Node, Node) :- started(@Node).
root(@Node, MYID) :- started(@Node).


/********************************************************************/
/* Maintain the spanning tree by periodically sending configuration */
/* messages.                                                        */

/* Update each node's own root pulse time. */
pulse_gen
pulse(@Node, Id, Time) :-
        periodic(@Node, E, ROUTING_EPOCH),
	started(@Node),
        Id := MYID, Time := f_timerElapsed().

/* Send a configuration message describing Node's state to all neighbors. */
config(@Nbr, Node, Parent, RootId, Pulse) :-
        periodic(@Node, E, ROUTING_EPOCH),
	started(@Node),
        linkEnabled(@Node, Nbr),
#ifdef LOSSY_LINKS
        link(@Node, Nbr, SendProb),
        f_coinFlip(SendProb) == 1,  /* simulate lossy links */
#endif
        parent(@Node, Parent),
        root(@Node, RootId),
        pulse(@Node, RootId, Pulse).

/* Update the pulse and the root using the parent's configuration message. */
pulse_update
pulse(@Node, RootId, Pulse) :-
        config(@Node, Nbr, _, RootId, Pulse), 
        parent(@Node, Nbr).

/* msg from parent about a new root */
update_root
root(@Node, NbrRootId) :- 
        config(@Node, Nbr, _, NbrRootId, _),
        parent(@Node, Nbr),
        NbrRootId < MYID.

root(@Node, MYID) :-
        config(@Node, Nbr, _, NbrRootId, _),
        parent(@Node, Nbr),
        NbrRootId > MYID.

parent(@Node, Node) :-
        config(@Node, Nbr, _, NbrRootId, _),
        parent(@Node, Nbr),
        NbrRootId > MYID.

/* Insert the default pulse for a root we've never heard of. */
pulse(@Node, RootId, Pulse) :- 
        config(@Node, _, _, RootId, Pulse),
        notin pulse(@Node, RootId, _).

/* The cost of switching to a new parent. */
possibleParent(@Node, Nbr, NbrRootId, NbrPulse, Cost) :-
        config(@Node, Nbr, NbrParent, NbrRootId, NbrPulse),
        root(@Node, RootId),
        pulse(@Node, NbrRootId, OldPulse),
        parent(@Node, OldParent),
        link(@Node, Nbr, _, ReceiveProb),
        NbrRootId <= RootId,   /* Neighbor has a better root */
        Nbr != OldParent,      /* Neighbor is not already my parent*/
        NbrPulse > OldPulse,   /* Neighbor is not my descendant. */
        NbrParent != Node,     /* Neighbor is not my child: avoid cycles */
        Cost := 1.0 / ReceiveProb + ROUTING_SWITCH_COST.

/* The cost of keeping the current parent. */
possibleParent(@Node, Nbr, NbrRootId, NbrPulse, Cost) :-
        config(@Node, Nbr, NbrParent, NbrRootId, NbrPulse),
        parent(@Node, Nbr),
        link(@Node, Nbr, _, ReceiveProb),
        NbrParent != Node,
        Cost := 1.0 / ReceiveProb.

/* Select the parent with the minimum cost. */
possibleParent_inserted(@Node) :- possibleParent(@Node).

bestParentCost(@Node, a_min<Cost>) :-
        possibleParent(@Node, _, _, _, Cost),
        possibleParent_inserted(@Node).

betterParent(@Node, Nbr, NbrRootId, NbrPulse, Cost) :-
        bestParentCost(@Node, Cost),
        possibleParent(@Node, Nbr, NbrRootId, NbrPulse, Cost),
        parent(@Node, Parent), /* What if the parent has just been replaced? */
        Nbr != Parent.

/* Update the parent, root, and the pulse for any potential switch.
   If there are two parents with bestParentCost, we may end up performing
   the updates below twice. */
parent(@Node, Nbr) :-
        betterParent(@Node, Nbr, _, _, _).

root(@Node, RootId) :-
        betterParent(@Node, _, RootId, _, _).

pulse(@Node, RootId, Pulse) :- 
        betterParent(@Node, _, RootId, Pulse, _).

/* Establish bidirectional edges. */
possibleEdge(@Node, Parent) :-
        parent(@Node, Parent),
        Node != Parent.

possibleEdge(@Parent, Node) :-
        parent(@Node, Parent),
        Node != Parent.

edge(@Node, Nbr) :-
        possibleEdge(@Node, Nbr), 
        linkActive(@Node, Nbr).

/* Do we need a similar deletion, or is it handled by the parent rule? */

/**********************************************************************/
/* Detect stale links to the parent by keeping track of the last time */
/* we received a message from the parent.                             */

/* When we receive a configuration message, update the link age. */
link(@Node, Nbr, SendProb, ReceiveProb, Time) :-
        config(@Node, Nbr, _, _, _),
        link(@Node, Nbr, SendProb, ReceiveProb),
        Time := f_timerElapsed().

/* Detect a blocked link */
blockedLink(@Node, Nbr) :-
        periodic(@Node, E, ROUTING_EPOCH),
	started(@Node),
        link(@Node, Nbr, _, _, LastTime),
        LinkAge := f_timerElapsed() - LastTime,
        LinkAge > MAX_LINK_AGE * ROUTING_EPOCH.

/* If blocked link was our parent, reset the parent and the root to ourself. */
reset_parent parent(@Node, Node) :- 
        blockedLink(@Node, Nbr),        
        parent(@Node, Nbr). 

reset_root root(@Node, MYID) :- 
        blockedLink(@Node, Nbr), 
        parent(@Node, Nbr).

delete possibleParent(@Node, Nbr, NbrRootId, NbrPulse, Cost) :-
        possibleParent(@Node, Nbr, NbrRootId, NbrPulse, Cost),
        blockedLink(@Node, Nbr).
        
/* Mark new links. */
linkActive(@Node, Nbr) :-
        config(@Node, Nbr),
        notin linkActive(@Node, Nbr).

delete linkActive(@Node, Nbr) :- 
        periodic(@Node, E, ROUTING_EPOCH),
        link(@Node, Nbr, _, _, Time),
        f_timerElapsed() - Time > MAX_LINK_AGE * ROUTING_EPOCH.

/* watchmod(linkOutput, "s"). */
watchmod(parent, "iz").
watchmod(root, "iz"). 
watchmod(pulse, "iz").
/* watchmod(config, "c"). */
watchmod(bestParentCost, "s").
watchmod(betterParent, "s").
/*
watchmod(possibleParent, "i").
watchmod(edge, "id"). */
/* watch(edge). */
watchmod(link, "iz").
watchmod(linkActive, "id").
/* watchmod(blockedLink, "s").*/

/* Rules for logging. */
materialize(edge_dummy, infinity, infinity, keys(1)).
edge_dummy(@Node) :- edge(@Node, Var).

edge_inserted(@Node, Nbr, Time) :-
        edge_DELTA_INSERT(@Node, Nbr), Time := f_timerElapsed().
edge_deleted(@Node, Nbr, Time) :-
        edge_DELTA_DELETE(@Node, Nbr), Time := f_timerElapsed().

watchmod(edge_inserted, "s").
watchmod(edge_deleted, "s").

parent_changed(@Node, Parent, Time) :- 
        parent(@Node, Parent), Time := f_timerElapsed().

watchmod(parent_changed,"s").

