function prob=generateSlatPHB(prob)
% problem=generateSlatPHB(basename, time)     or
% problem=generateSlatPHB(problem_obs)
% A six-camera experiment from the Panther Hollow Bridge room at 
% Intel Research Pittsburgh

if exist('prob', 'var');
  prob.nCams=6;
  prob.nSteps=size(prob.visible,2);
  simulation=0;
else
  simulation=1;
end

% Extrinsic parameters: x,y,z (inches), pan, tilt (radians)
ext = [-82 -272  112.5 0         -0.3932; ...
       -82 -176  112.5 0         -0.4110; ...
       -82 -80   112.5 -pi/2/6   -0.3744; ...
       -88 -17   97    -pi/2*2/3 -0.3127; ...
       -298 -140 105   pi        -0.4124; ...
       -296 -206 108.5 pi        -0.3470]';

ext(1:3,:)=ext(1:3,:)*0.0254;

% Intrinsic parameters
KK = {
 [766.4538         0  326.5687;...
         0  763.0651  242.6882;...
         0         0    1.0000]...
 ...
 [801.4495         0  327.0716;...
         0  800.1997  244.5504;...
         0         0    1.0000]...
 ...
 [752.7473         0  333.7860;...
         0  750.1915  233.3972;...
         0         0    1.0000]...
 ...
 [779.0634         0  312.8948;...
         0  776.3378  212.9147;...
         0         0    1.0000]...
 ...
 [799.7484         0  318.6755;...
         0  793.0094  240.1111;...
         0         0    1.0000]...
 ...
 [758.1854         0  356.8589;...
         0  757.3355  256.9191;...
         0         0    1.0000]};

for i=1:length(KK), 
  KK{i}(1:2,1:3)=KK{i}(1:2,1:3)/2; % To account for the fact that images are 320 x 240
end
    
calib=generate_calibration(KK, ext, [320 240]);

if simulation
  prob=capture_trajectory(calib, 'range'. [-14 2 -11 2]);
  prob.geometry = ...
      {[0 0; -12 0; -12 -9; 0 -9; 0 0]};
  prob.adjacency=[1 1 0 1 0 1; 1 1 1 1 1 1; 0 1 1 1 1 0; 1 1 1 1 1 1; 0 1 1 1 1 1; 1 1 0 1 1 1];
else
  % The first camera to see the person
  i = find(prob.visible(:,1));
  if length(i)==0
    error('The person is not visible from any cameras in the first time step.');
  else
    i=i(1);
  end

  prob.pos=invertProjection(prob.obs(:,1,i),calib(i),0,0,[0 0 1 -1.8]);
  prob.calib=calib;
  prob.range=[-14 2 -11 2];
  prob.sigma_u=3;
  prob.sigma_v=3;
  prob.time=0.1:1/10:prob.nSteps/10;
  prob.geometry = ...
        {[0 0; -12 0; -12 -9; 0 -9; 0 0]};
  prob.adjacency=[1 1 0 1 0 1; 1 1 1 1 1 1; 0 1 1 1 1 0; 1 1 1 1 1 1; 0 1 1 1 1 1; 1 1 0 1 1 1];
end
