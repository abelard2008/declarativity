namespace systemr {

  materialize(plan, infinity, infinity, keys(2)).
  materialize(bestPlan, infinity, infinity, keys(2)).
  materialize(totalRules, 10, infinity, keys(2)).
  
  watch(terminate).
  watch(totalRules).
  watch(planUpdate).
  watch(bestPlan).

  ruleCount totalRules(@A, Pid, a_count<Rid>) :-
              programEvent(@A, Pid, P_Name, P_Rewrite, P_Status, P_Text, P_Msg, P_P2DL),
              ::sys::rule(@A, Rid, Pid, Name, HeadFid, P2DL, Delete, Term_Count).


  end ::sys::program(@A, Pid, Name, Rewrite, "systemr", Text, Msg, P2DL) :-
               programComplete(@A, Pid),
               ::sys::program(@A, Pid, Name, Rewrite, Status, Text, Msg, P2DL).
  
  programCompletion programComplete(@A, Pid) :-
                      totalRules(@A, Pid, Count), Count == 0.
    
  /* Start the optimization process */
  
  /* Get the program event and seed the optimization with the event functor. */
  begin plan(@A, PlanID, SubPlanID, Rid, Type, ID, Plan, Schema, Card, Pos, AM) :-
            programEvent(@A, Pid, P_Name, P_Rewrite, P_Status, P_Text, P_Msg, P_P2DL),
            ::sys::rule(@A, Rid, Pid, Name, HeadFid, P2DL, Delete, Term_Count),
            ::sys::functor(@A, Fid, Rid, Notin, Name, TID, ECA, F_Schema, FPos, AM, New),
            FPos == 1,
            PlanID    := f_idgen(),
            SubPlanID := null,
            Type      := "Functor",
            ID        := Fid,
            Plan      := f_cons(Fid, null),
            Schema    := F_Schema,
            Card      := 1,
            Pos       := 1,
            AM        := "EVENT".

  /* Detect the completion of a rule optimization */
  ruleComplete terminate(@A, Pid, Rid, ID) :-
                 newBestPlan(@A, ID),
                 plan(@A, ID, SubPlanID, Rid, Type, ID, Plan, Schema, Card, Pos, AM),
                 ::sys::rule(@A, Rid, Pid, R_Name, R_HeadFid, R_P2DL, R_Delete, R_Terms),
                 f_size(Plan) == R_Terms.

  updateRuleCount totalRules(@A, Pid, Count) :-
                    terminate(@A, Pid, Rid, BestPlanID),
                    totalRules(@A, Pid, OldCount),
                    Count := OldCount - 1.
  
  updateTermPositions updateTerm(@A, Rid, BestPlanID) :-
                        terminate(@A, Pid, Rid, BestPlanID).


  /* Detect an update to the local plan table */
  o1 planUpdate(@A, PlanID, Rid, Plan, Card) :- 
        plan(@A, PlanID, SubPlanID, Rid, Type, ID, Plan, Schema, Card, Pos, AM).
  
  /* Pick the minimum cost over the plans with the max size. */
  o2 bestPlan(@A, PlanID, BestPlan, Card) :-
        planUpdate(@A, PlanID, Rid, Plan, Card),
        bestPlan(@A, BestPlanID, BestPlan, BestCard),
        f_size(BestPlan) == f_size(Plan),
        Card < BestCard. 

  o3 bestPlan(@A, PlanID, BestPlan, Card) :-
        planUpdate(@A, PlanID, Rid, Plan, Card),
        bestPlan(@A, BestPlanID, BestPlan, BestCard),
        f_size(BestPlan) < f_size(Plan). 
  
  /* Initialize best plan */
  o4 bestPlan(@A, PlanID, Plan, Card) :-
       plan(@A, PlanID, SubPlanID, Rid, Type, ID, Plan, Schema, Card, Pos, AM),
       AM == "EVENT".
  
  o5 newBestPlan(@A, PlanID) :- bestPlan(@A, PlanID, BestPlan, Card).
  
  /* Search for the an index join */
  o6 plan(@A, f_idgen(), BestPlanID, Rid, "Functor", Fid, Plan, Schema, Card, Pos, AM) :-
        newBestPlan(@A, BestPlanID),
        plan(@A, BestPlanID, Rid, OuterPlan, OuterSchema, OuterCard, OuterPos, OuterAM),
        ::sys::functor(@A, Fid, Rid, F_Notin, F_Name, F_TID, F_ECA, F_Schema, F_Pos, F_AM, F_New),
        ::sys::table(@A, T_ID, Tablename, T_TTL, T_Size, T_Key, T_Card),
        ::sys::index(@A, I_ID, Tablename, I_Key, I_Type, I_Selectivity),
        f_contains(Fid, OuterPlan) == false,
        f_indexMatch(OuterSchema, F_Schema, I_Key) == true,
        Plan      := f_cons(Fid, OuterPlan), 
        Schema    := f_merge(OuterSchema, F_Schema),
        Card      := I_Selectivity * OuterCard * T_Card,
        Pos       := OuterPos + 1, 
        AM        := f_cons("INDEX_JOIN", I_ID). 

  /* How much does a cross product cost? */
  o7 plan(@A, f_idgen(), BestPlanID, Rid, "Functor", Fid, Plan, Schema, Card, Pos, AM) :-
        newBestPlan(@A, BestPlanID),
        plan(@A, BestPlanID, Rid, OuterPlan, OuterSchema, OuterCard, OuterPos, OuterAM),
        ::sys::functor(@A, Fid, Rid, F_Notin, F_Name, F_TID, F_ECA, F_Schema, F_Pos, F_AM, F_New),
        ::sys::table(@A, T_ID, Tablename, T_TTL, T_Size, T_Key, T_Card),
        f_contains(Fid, OuterPlan) == false,
        Plan      := f_cons(Fid, OuterPlan), 
        Schema    := f_merge(OuterSchema, F_Schema),
        Card      := OuterCard * T_Card,
        Pos       := OuterPos + 1,
        AM        := f_cons("CROSSPRODUCT", null). 

  /* Perform next selection? */
  o8 plan(@A, f_idgen(), BestPlanID, Rid, "Select", Sid, Plan, Schema, Card, Pos, AM) :-
        newBestPlan(@A, BestPlanID),
        plan(@A, BestPlanID, OuterSubPlanID, Rid, OuterPlan, OuterSchema, OuterCard, OuterPos, OuterAM),
        ::sys::select(@A, Sid, Rid, S_Bool, S_Pos, S_AM),
        f_contains(Sid, OuterPlan) == false,
        f_filter(OuterSchema, S_Bool) == true,
        Plan      := f_cons(Sid, OuterPlan), 
        Schema    := OuterSchema,
        Card      := OuterCard / 3,
        Pos       := OuterPos + 1, 
        AM        := f_cons("FILTER", null). 
  
  /* Update the functor and selection tables with the new position and access method. */
  u0 updateTerm(@A, Rid, SubPlanID) :-
       updateTerm(@A, Rid, BestPlanID),
       plan(@A, BestPlanID, SubPlanID, Rid, P_Type, P_ID, P_Plan, P_Schema, P_Card, P_Pos, P_AM).
  
  /* Update the functor and selection tables with the new position and access method. */
  u1 ::sys::functor(@A, Fid, Rid, Notin, Name, TID, ECA, Schema, P_Pos, AM, New) :-
        updateTerm(@A, Rid, BestPlanID),
        plan(@A, BestPlanID, SubPlanID, Rid, P_Type, P_ID, P_Plan, P_Schema, P_Card, P_Pos, P_AM),
        ::sys::functor(@A, Fid, Rid, Notin, Name, TID, ECA, Schema, Pos, AM, New),
        P_Type == "Functor", P_ID == Fid.
  
  u2 ::sys::select(@A, Sid, Rid, Bool, P_Pos, AM) :-
        updateTerm(@A, Rid, BestPlanID),
        plan(@A, BestPlanID, SubPlanID, Rid, P_Type, P_ID, P_Plan, P_Schema, P_Card, P_Pos, P_AM),
        ::sys::select(@A, Sid, Rid, Bool, OldPos, AM),
        P_Type == "Select", P_ID == Sid.
  
}
