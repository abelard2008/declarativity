program bfs;

import java.util.ArrayList;

// fileid, filename,path, chunk
define(file,keys(0),{Integer,String,Integer,Integer});
// pathid, dirname, parent
define(path,keys(0),{Integer,String,Integer});
define(lookupPath,keys(0),{Integer,String,Integer});

define(request,{String,String,Integer});
define(loggedRequest,{Integer,String,String,Integer});
define(chopRequest,keys(0,1),{Integer,Integer,String,String});
//define(work,keys(0),{Integer,String,Integer});
define(work,{Integer,String,Integer});
define(ids,keys(0),{Integer});
define(pos,keys(0),{Integer,Integer});
define(localWork,keys(0,1,2),{Integer,Integer,Integer});
//define(localWork,{Integer,Integer,Integer});

define(sendLocation,{String,String,Integer,Integer,Integer});
define(sendChunk,{String,String,Integer,Integer,Integer,Integer,Integer});


watch(chopRequest,id);
//watch(request,id);
watch(work,id);
//watch(ids,id);
watch(loggedRequest,id);
watch(pos,id);


/* broadcast data */
define(sendLocation,{String,String,Integer,Integer,Integer});
// chunkid,fileid,chunkord,hwm,version
define(sendChunk,{String,String,Integer,Integer,Integer,Integer,Integer});

watch(sendLocation,id);
watch(sendChunk,id);

realDistance(@Master,Chunk1,Chunk2,Ddiff,Sudiff,Rdiff,Sdiff) :-
                  chunkserver(@Master,Location2,_),
                  location(@Master,Location1,DS1,SN1,R1,S1),
                  location(@Master,Location2,DS2,SN2,R2,S2),
                  Ddiff = f_abs(DS1 - DS2),
                  Sudiff = f_abs(SN1 - SN2),
                  Rdiff = f_abs(R1 - R2),
                  Sdiff = f_abs(S1 - S2);


distance(@Master,Client,ChunkServer,Distance) :- realDistance(@Master,Client,ChunkServer,Ddiff,Sudiff,Rdiff,Sdiff),
                  Ddiff != 0,
                  Distance := Ddiff;


distance(@Master,Client,ChunkServer,Distance) :- realDistance(@Master,Client,ChunkServer,Ddiff,Sudiff,Rdiff,Sdiff),
                  Ddiff == 0,
                  Sudiff != 0
                  Distance := Sudiff;


distance(@Master,Client,ChunkServer,Distance) :- realDistance(@Master,Client,ChunkServer,Ddiff,Sudiff,Rdiff,Sdiff),
                  Ddiff == 0,
                  Sudiff == 0
                  Rdiff != 0
                  Distance := Rdiff;





/* forget about fs for a minute.... */


ids(0);
pos(-1,-1);

path(0,"",-1);
path(1,"home",0);
path(2,"peter",1);

file(0,"foo.txt",2,64);


request("/home/peter/foo.txt","tcp:localhost:10001",0) :- periodic(Id,2L,1L);
loggedRequest(Id,File,Host,ChunkNo) :- request(File,Host,ChunkNo),
				 ids(Id);

ids(Id+1) :- loggedRequest(Id,_,_,_);
pos(Id,0) :- loggedRequest(Id,_,_,_);
//pos(Id,Pos+1) :- work(Id,_,Pos);
pos(Id,Pos+1) :- pos(Id,Pos), work(Id,_,_);

work(Id,Work,0) :- loggedRequest(Id,Work,_,_);

 
work(Id,Work,Pos) :- chopRequest(Id,PPos,Car,Work),
        pos(Id,Pos),
				Loc := Work.indexOf("/"),
				Loc > -1;

chopRequest(Id,Pos,Car,Cdr) :- work(Id,Whole,Pos),
					Str := new String(Whole),
					Car := Str.split("/")[0],
					Offset := new Integer(Str.indexOf("/")),
					NewOffset := Offset + 1,
					Cdr := Str.substring(NewOffset.intValue(),Str.length());
