program paxos_instance;
	
import java.lang.String;
import java.lang.Integer;
	
import java.lang.System;
import jol.core.Runtime;

//timer(periodic,logical,1,1,1);
	
watch(paxos::instance,ae);
watch(paxos::nextBal,ae);



define(sdCnt,keys(0),{String,Integer});
watch(sdCnt,ae);
public sdCnt(M,count<Id>) :- paxos::storedDecreeRequest(M,D,F,Id);

public
startinstance
paxos::instance(Me,0) :-
 // paxos::periodic(_,_,_),
  paxos_global::id(Me);

public
window
delete
paxos::storedDecreeRequest(Master,Decree,From,Id) :-
  paxos::storedDecreeRequest(Master,Decree,From,Id),
  // 2:
  multipaxos::success#insert(Master,I,Round,Decree,From);
  //multipaxos::success(Master,_,_,Decree,From);

public
del2
delete
multipaxos::sendAccept(Master,Instance,Round,Decree,Agent) :-
  multipaxos::sendAccept(Master,Instance,Round,Decree,Agent),
  multipaxos::success(Master,Instance,_,Decree);

public
del3
delete
multipaxos::acceptRequest(Master,Instance,Round,Decree,Kind) :-
  multipaxos::acceptRequest(Master,Instance,Round,Decree,Kind),
  multipaxos::success(Master,Instance,_,Decree);

public
bumpinstance
paxos::instance(Me,I+1) :-
  paxos::instance(Me,I),
  /////paxos::storedDecreeRequest(Me,Decree,From,Id),
  // test.
  multipaxos::success#insert(Me,I,Round,OldDecree,Client);

// jump to the current instance.
public
bi2 
paxos::instance(Me,I) :-
  paxos::instance(Me,OldI),
  // 3:
  multipaxos::sendBeginRound#insert(Me,I,Round,Decree,Agent),
  //sendBeginRound(Me,I,Round,Decree,Agent),
  Me != Agent,
  I > OldI;

/*
public
paxos_global::lastTried(Me,Round) :-
  paxos_global::lastTried(Me,Old),
  //multipaxos::sendBeginRound#insert(Me,I,Round,Decree,Agent),
  //multipaxos::sendBeginRound(Me,I,Round,Decree,Agent),
  multipaxos::accept(Me,I,Round,Decree,Master),
  Me != Master,
  Round > Old;
*/

define(wouldBL,{String,Integer});
watch(wouldBL,ae);
public
wouldBL(Me,Round) :-
  paxos_global::lastTried(Me,Old),
  multipaxos::notstasis_accept(Me,I,Round,Decree,Master),
  Round > Old,
  Me != Master;

// jump to the current instance.
public
bi3
paxos::instance(Me,I+1) :-
  paxos::instance(Me,OldI),
	paxos::sendPromise#insert(Me,I,Round,MaxB,OldDecree,Agent),
  Me != Agent,
  I > OldI;


