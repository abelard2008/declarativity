program paxos;
	
import java.lang.String;
import java.lang.Integer;
	
import java.lang.System;
import jol.core.Runtime;

define(storedDecreeRequest,keys(0,1,2,3),{String,String,String,Long});
define(lastTried,keys(0),{String,Integer});
define(prevVote,keys(0),{String,Integer,Integer,String});
define(nextBal,keys(0),{String,Integer});
define(node,keys(0),{String});
define(parliament,keys(0,1),{String, String, Integer});
define(prepare,keys(0,1),{String,Integer,String});
define(sendPrepare,keys(0,1,3),{String,Integer,String,String});
define(stasis_lastPromise,keys(0,1,2,5),{String,Integer,Integer,Integer,String,String});
define(sendPromise,keys(0,1,2,5),{String,Integer,Integer,Integer,String,String});
	
define(maxPrevRound,keys(0),{String,Integer,Integer});
define(priestCnt,keys(0),{String,Integer});
	
define(tick,keys(0,1),{String,String,Integer});

define(instance,keys(0),{String,Integer});

/*******************************************************************
nomenclature mappings between "parliamentary paxos" and "simple paxos"

part time parliament --> paxos made simple
-------------------------------------------
Agent         Agent
Ballot        Round
NextBallot    Prepare
LastVote      Promise
Vote          Accept


PAXOS global invariants:

  let B be a set of ballots with the following components:

    B.dec - A decree (the one being voted on).
    B.qrm - A nonempty set of priests (the ballotÕs quorum).
    B.vot - A set of priests (the ones who cast votes for the decree).
    B.bal - A ballot number.


  Consistency is guaranteed and progress is possible if:

  B1(B) - Each ballot in B has a unique ballot number.
  B2(B) - The quorums of any two ballots in B have at least one priest in common.
  B3(B) - For every ballot B in B, if any priest in BÕs quorum voted in an earlier
      ballot in B, then the decree of B equals the decree of the latest of those
      earlier ballots.
*/

public
parliament(A, B, C) :- 
  paxos_global::id(A),
  paxos_global::members(B, C);

watch(parliament, ae);
watch(prevVote,ae);

public
sendPrepare(Master,-1,"none",Master) :- paxos_global::id(Master);
public
prevVote(Master,0,-1,"none") :- paxos_global::id(Master);
public
nextBal(Master,-1) :- paxos_global::id(Master);
/**************************************************************************************
r1. Priest p chooses a new ballot number b greater than lastTried [p], sets lastTried[p]
to b, and sends a NextBallot (b) message to some set of priests.
***************************************************************************************/


// this works because all leaders are also acceptors.
lastTried(Agent, max<Round>) :-
  sendPrepare(Agent, Round, Decree, Master);

public
storedDecreeRequest(A, B, C, Id) :- 
  // 4:
  paxos_global::decreeRequest(A, B, C), 
  Id := Runtime.idgen();

define(topOfQueue, keys(0), {String, Long});
watch(topOfQueue, ae);

topOfQueue(A, min<Id>) :-
  storedDecreeRequest(A, B, C, Id);

public
r1_b
prepare(Agent, Round, Decree) :- 
	storedDecreeRequest(Agent, Decree, From, Id),
  // we need the insert here for another reason: to add capacitance to the flip-flop
  // created by r1_a above.  without this insert, which forces the rule to be evaluated
  // once only in the fixpoint, we'll keep adding because of the cycle through lastTried...
  topOfQueue#insert(Agent, Id),
	lastTried(Agent, Old),
	// if we don't already have a quorum 
  notin quorum(Agent, _),
  priestCnt(Agent, Cnt),
	Round := Old + Cnt;

/* 
public r1_b2
prepare(Agent,Round,Decree) :-
  // current instance
  lastTried(Agent,Old),
  // INSERT HERE TOO
  paxos_global::decreeRequestBuffer#insert(Master,Decree,Client),
  Round := Old + 1;
*/
	
r1_c
sendPrepare(@Peer,Round,Decree,Agent) :-
  prepare(@Agent,Round,Decree),
  Round >= 0,
	parliament(@Agent,Peer);

/**************************************************************************************
2. Upon receipt of a NextBallot (b) message from p with b > nextBal [q], priest q
sets nextBal [q] to b and sends a LastVote (b, v) message to p, where v equals
prevVote [q]. (A NextBallot (b) message is ignored if b ² nextBal [q].)
***************************************************************************************/


r2_a
nextBal(Agent,Round) :-
  nextBal(Agent,Old),
  // same reason as r1_a: I need to see the old version on the rhs.
	stasis_lastPromise#insert(Agent,Instance,Round,OldRound,Decree),
	Round > Old;

r2_b
stasis_lastPromise(Agent,Instance,Round,OldRound,OldDecree,Peer) :- 
  sendPrepare(Agent,Round,Decree,Peer),
    Round > -1,
	prevVote(Agent,OI,OldRound,OldDecree),
  maxPrevVoteInstance(Agent,OI),
  instance(Agent,Instance),
  Instance == OI,
	Round >= OldRound;

//NEW
define(maxPrevVoteInstance,keys(0),{String,Integer});
maxPrevVoteInstance(Master,max<Instance>) :-
  prevVote(Master,Instance,_,_);

r2_b2
stasis_lastPromise(Agent,Instance,Round,-1,"none",Peer) :- 
  sendPrepare(Agent,Round,Decree,Peer),
    Round > -1,
    maxPrevVoteInstance(Agent,OI),
  Instance > OI,
  instance(Agent,Instance);

r2_c	
sendPromise(@Master,Instance,Round,OldRound,Decree,Agent) :-
	stasis_lastPromise(@Agent,Instance,Round,OldRound,Decree,Master);	


/* for quorum handling, aggregates are difficult to avoid... */
priestCnt(Master, count<*>) :- 
    parliament(Master, Agent);

define(lastPromiseCnt, keys(0,1), {String, Integer, Integer});
public
lastPromiseCnt(Master, Round, count<Agent>) :- 
  sendPromise(Master,Instance,Round,Foo,Bar,Agent);

maxPrevRound(Master, Instance, max<OldRound>) :- 
  sendPromise(Master, Instance, Round, OldRound, Decree, Agent);
	
/**************************************************************************************
3.  After receiving a LastVote (b, v) message from every priest in some majority
set Q, where b = lastTried [p], priest p initiates a new ballot with number b,
quorum Q, and decree d, where d is chosen to satisfy B3. He then sends a
BeginBallot (b, d) message to every priest in Q.
***************************************************************************************/

define(quorum,keys(0,1),{String,Integer});
watch(quorum, a);
r3_a	
quorum(Master,Round) :- 
  priestCnt(Master,Pcnt),
  // if I don't do this, rows expire out of quorum and phase2 stuff fails...
	lastPromiseCnt#insert(Master,Round,Vcnt),
	Vcnt > ( Pcnt / 2 );

