program telemetry;	

import java.lang.System;
import bfs.telemetry.SystemStats;
import jol.types.basic.ValueList;


define(cpuInfo, keys(0), {String, String, Integer, Integer, Integer, Long, Long});
//watch(cpuInfo, ae);

define(identity, keys(0), {String, String});




timer(tick, physical, 6000, infinity, 0);

cpuInfo(Me, Sink, User, Sys, Total, Time, Interval) :-
	SysStat := new bfs.telemetry.SystemStats(),
	User := new Integer(SysStat.getInt(SystemStats.SystemStatEntry.USER)),
	Sys := new Integer(SysStat.getInt(SystemStats.SystemStatEntry.SYSTEM)),
	Total := SysStat.totalJiffies(),
	B :=  "bar",
	A := "foo",
	identity(Me, Sink),
	Time := System.currentTimeMillis(),
	tick#insert(Interval, _, _);

// sometimes our weird state-mod stuff makes life easier
define(top, keys(0), {String, String, Integer, Integer, Integer, Long, Long});
//watch(top, ae);
top(Me, Sink, Udiff, Sdiff, Tdiff, Time2, Interval) :-
	cpuInfo(Me, Sink, User, Sys, Total, Time, Interval),
	cpuInfo(Me, Sink, User2, Sys2, Total2, Time2, Interval),
	Time2 > Time,
	Udiff := User2 - User,
	Sdiff := Sys2 - Sys,
	Tdiff := Total2 - Total;




define(sendSink, keys(0,1), {String, String, Integer, Integer, Integer, Long, Long});
watch(sendSink,a);
sendSink(Me, @Sink, Udiff, Sdiff, Tdiff, Time, Interval) :-
	top(@Me, Sink, Udiff, Sdiff, Tdiff, Time, Interval);


// what if I am a "collector?" then sendSink should represent a local cache
// containing the current entry for every node below me in the tree.

define(doping, {String, String, Long});
doping(Me, Sink, Interval) :-
	identity(Me, Sink),
	tick#insert(Interval, _, _);

sendSink(Source, @Sink, Udiff, Sdiff, Tdiff, Time, Interval) :-
	sendSink(Source, @Me, Udiff, Sdiff, Tdiff, Time, Interval),
	doping(@Me, Sink, Interval);
	


// if I am a sink, I can define views over sendSink
define(loads, keys(0,1), {String, String, Float});
loads(Local, Remote, Load) :-
	sendSink(Remote, Local, U, S, T, _, _),
	 Load := (U.floatValue() + S.floatValue()) / T.floatValue();

define(lowestLoads, keys(0), {String, ValueList});
lowestLoads(Me, bottomk<Load, 5>) :-
	loads(Me, _, Load);
	

define(lowestLoadedFlat, keys(0,1), {String, Float});
lowestLoadedFlat(Me, FloatLoad) :-
	flatten(lowestLoads(Me, Load)),
	FloatLoad := (Float)Load;

define(lowestLoadedNodes, keys(0,1), {String, String, Float});
watch(lowestLoadedNodes, ae);
lowestLoadedNodes(Me, Node, Load) :-
	loads(Me, Node, Load),
	lowestLoadedFlat(Me, Load);


