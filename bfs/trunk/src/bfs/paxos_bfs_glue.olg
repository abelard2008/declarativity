program glue;

import java.util.ArrayList;
import java.util.Arrays;

watch(bfs::file,ae);
watch(bfs::fchunk,ae);

public
paxos_global::decreeRequest(Master, Decree, From) :-
    paxos_global::id(Master),
    // err
    From := Master,
    bfs::create_request_pending(Master, Id, ParentId, FName, IsDir, true),
    DirStr := (IsDir ? ",d" : ",f"),
    Decree := FName + DirStr + ",i," + Id.toString() + ",-1," + ParentId.toString();

public
paxos_global::decreeRequest(Master, Decree, From) :-
    paxos_global::id(Master),
    From := Master,
    bfs::rm_request_pending(Master, Id, FName, true),
    DirStr := ",f",
    Decree := FName + DirStr + ",d," + Id.toString() + ",-1,-1";

// or, if we are adding a chunk to a file's chunklist, we likewise need
// to pass it through paxos. (and indeed, should block the requestor, but
// this is not implemented yet XXX)
public
paxos_global::decreeRequest(Master, Decree, From) :-
    paxos_global::id(Master),
    From := Master,
    bfs_chunks::candidate_datanode#insert(Master, Id, _, FPath, I, _),
    Decree := FPath + ",f,u," + Id.toString() + "," + I.toString() + ",-1";

define(appView,keys(0,1,2,3),{String,String,Integer,String,Boolean,Integer,String,Integer,Integer});
watch(appView,ae);
public
appView(Master, From, Instance, Name, IsDir, ParentId, Op, Id, I) :-
    paxos_global::requestStatus#insert(Master, From, Decree, Instance, "passed"),
    NVL := Arrays.asList(Decree.split(",")),
    Name := (String) NVL.get(0),
    DirStr := (String) NVL.get(1),
    Op := (String) NVL.get(2),
    Id := Integer.valueOf((String) NVL.get(3)),
    I := Integer.valueOf((String) NVL.get(4)),
    ParentId := Integer.valueOf((String) NVL.get(5)),
    IsDir := (DirStr.equals("d") ? true : false);

// An insert op in the log induces a new metadata entry for a file.
// XXX: file IDs are assigned from a hash of the filename right now;
// this is obviously broken
public
bfs::file(Master, FileId, ParentId, FName, IsDir) :-
    appView#insert(Master, _, _, FName, IsDir, ParentId, Op, _, _),
    Op == "i",
    FileId := FName.hashCode();

// Add a new chunk to the file
public
bfs::fchunk(Master, ChunkId, FileId) :-
    bfs::fpath(Master, FPath, FileId),
    bfs::file(Master, FileId, _, _, false),
    appView#insert(Master, _, _, FPath, _, _, Op, _, ChunkId),
    Op == "u";

// Delete the file
// XXX: We should use FileId, not FName
public
delete
bfs::file(Master, FileId, FParent, FName, IsDir) :-
    canDelete(Master, _, FName),
    bfs::file(Master, FileId, FParent, FName, IsDir);

// Use the "file" relation to construct the "fpath" relation. Note
// that these rules do NOT belong here, but we need them to be in
// the same program that deletes from bfs::file to workaround a
// JOL bug.

// Base case: root directory
public
bfs::fpath(@Master, FName, FileId) :-
    bfs::file(@Master, FileId, null, FName, true),
    FName == "/";

public
bfs::fpath(@Master, Path, FileId) :-
    bfs::file(@Master, FileId, FParent, FName, _),
    bfs::fpath(@Master, ParentPath, FParent),
    PathSep := (ParentPath == "/" ? "" : "/"),
    Path := ParentPath + PathSep + FName;


watch(bfs::create_request_done,aeid);

define(canDelete,keys(),{String,Integer,String});
watch(canDelete,ae);

public
canDelete(Master, Id, FName) :-
    appView#insert(Master, _, _, FName, _, _, Op, Id),
    Op == "d";

public
green
bfs::create_request_done(Master, Id, Status) :-
    bfs::create_request_pending(Master, Id, _, FName, _, Status),
    appView(Master, _, _, FName, _, _, "i", Id);

public
red1
bfs::create_request_done(Master, Id, false) :-
    bfs::create_request_pending(Master, Id, _, FName, _, _),
    appView(Master, _, _, FName, _, _, "i", Id2),
    Id != Id2;


public
bfs::rm_request_done(Master, Id) :-
    canDelete(Master, Id, _);

public
red
bfs::create_request_done(Master, Id, Status) :-
    bfs::create_request_pending(Master, Id, _, _, _, Status),
    Status == false;
