program glue;

import java.util.ArrayList;
import java.util.Arrays;

watch(bfs_global::stasis_file, ae);
watch(bfs_global::stasis_fchunk, ae);
watch(bfs_global::fpath, ae);
watch(bfs_global::stasis_fsize, ae);

public
paxos_global::decreeRequest(Master, Decree, From) :-
    paxos_global::id(Master),
    From := Master,
    bfs::create_request_pending(Master, Id, _, ParentId, FName, IsDir),
    DirStr := (IsDir ? ",d" : ",f"),
    Decree := FName + DirStr + ",i," + Id.toString() + "," + ParentId.toString();

public
paxos_global::decreeRequest(Master, Decree, From) :-
    paxos_global::id(Master),
    From := Master,
    bfs::rm_request_pending(Master, Id, FPath, _),
    DirStr := ",f",
    Decree := FPath + DirStr + ",d," + Id.toString() + ",-1";

public
paxos_global::decreeRequest(Master, Decree, From) :-
    paxos_global::id(Master),
    From := Master,
    bfs::newchunk_request_pending(Master, Id, FPath, _),
    Decree := FPath + ",f,u," + Id.toString() + ",-1";

define(global_log, {String, Integer, String, Boolean, Integer, String, Integer});
watch(global_log, ae);
public
global_log(Master, Instance, Name, IsDir, ParentId, Op, Id) :-
    paxos_global::requestStatus#insert(Master, _, Decree, Instance, "passed"),
    NVL := Decree.split(","),
    Name := NVL[0],
    DirStr := NVL[1],
    Op := NVL[2],
    Id := Integer.valueOf(NVL[3]),
    ParentId := Integer.valueOf(NVL[4]),
    IsDir := (DirStr.equals("d") ? true : false);

// Apply the Paxos log records that we read to the local database. Note that
// we might not be the master node that originally received the request, so
// the log record MUST contain enough information to make a commit/abort
// decision on this operation (s.t. all masters reach the same conclusion,
// if they apply the same set of log records in the same order).

// Create a new file or directory. We use the Paxos instance # as the file
// ID, since that will be unique and consistent among all the masters.
public
bfs_global::stasis_file(Master, FileId, ParentId, FName, IsDir) :-
    global_log#insert(Master, Instance, FName, IsDir, ParentId, "i", _),
    FileId := Instance;

// Add a new chunk to the file. Use the Paxos instance # as the chunk ID.
public
bfs_global::stasis_fchunk(Master, ChunkId, FileId) :-
    bfs_global::fpath(Master, FPath, FileId),
    bfs_global::stasis_file(Master, FileId, _, _, false),
    global_log#insert(Master, Instance, FPath, _, _, "u", _),
    ChunkId := Instance;

// Delete the file
// XXX: We should use FileId, not FPath
public
delete
bfs_global::stasis_file(Master, FileId, FParent, FName, IsDir) :-
    global_log#insert(Master, _, FPath, _, _, "d", Id),
    bfs_global::fpath(Master, FPath, FileId),
    bfs_global::stasis_file(Master, FileId, FParent, FName, IsDir);

// If we're the master node that received the request we just processed,
// send a response back to the client
public
bfs::create_request_done(Master, Id, true) :-
    bfs::create_request_pending(Master, Id, _, ParentId, FName, _),
    global_log(Master, _, FName, _, ParentId, "i", Id);

public
bfs::create_request_done(Master, Id, false) :-
    bfs::create_request_pending(Master, Id, _, ParentId, FName, _),
    global_log(Master, _, FName, _, ParentId, "i", Id2),
    Id != Id2;

public
bfs::rm_request_done(Master, Id) :-
    bfs::rm_request_pending(Master, Id, FPath, _),
    global_log(Master, _, FPath, _, _, "d", Id);

public
bfs::newchunk_request_done(Master, Id, NewChunkId) :-
    bfs::newchunk_request_pending(Master, Id, FPath, _),
    global_log(Master, NewChunkId, FPath, _, _, "u", Id);


// Use the "bfs_global::stasis_file" relation to construct the "fpath" relation. Note
// that these rules do NOT belong here, but we need them to be in the
// same program that deletes from bfs_global::stasis_file to workaround a JOL bug.

// Base case: root directory
public
bfs_global::fpath(@Master, FName, FileId) :-
    bfs_global::stasis_file(@Master, FileId, null, FName, true),
    FName == "/";

public
bfs_global::fpath(@Master, Path, FileId) :-
    bfs_global::stasis_file(@Master, FileId, FParent, FName, _),
    bfs_global::fpath(@Master, ParentPath, FParent),
    PathSep := (ParentPath == "/" ? "" : "/"),
    Path := ParentPath + PathSep + FName;

// For convenience, directories are considered to have size 0
public
bfs_global::stasis_fsize(@Master, FileId, FSize) :-
    bfs_global::stasis_file(@Master, FileId, _, _, true),
    FSize := 0L;

// Files with no chunks have size 0
public
bfs_global::stasis_fsize(@Master, FileId, FSize) :-
    bfs_global::stasis_file(@Master, FileId, _, _, false),
    notin stasis_compute_file_size(@Master, FileId, _),
    FSize := 0L;

public
bfs_global::stasis_fsize(@Master, FileId, FSize) :-
    bfs_global::stasis_file(@Master, FileId, _, _, false),
    stasis_compute_file_size(@Master, FileId, FSizeF),
    FSize := FSizeF.longValue();

define(stasis_compute_file_size, keys(0, 1), {String, Integer, Float});
public
stasis_compute_file_size(@Master, FileId, sum<ChunkLen>) :-
    bfs_global::stasis_fchunk(@Master, ChunkId, FileId),
    bfs_heartbeat::chunks(@Master, _, ChunkId, ChunkLen, _);
