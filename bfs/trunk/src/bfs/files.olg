program bfs_heartbeat;

import bfs.Conf;
import java.io.File;
import java.lang.Object;
import java.lang.System;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import jol.core.Runtime;

timer(clock, physical, 3000, 3000, 0);
timer(periodic, logical, 1, 1, 1);

// Node address, data directory on host chunk system
define(datadir, keys(0), {String, String});
define(checksumdir, keys(0), {String, String});
watch(datadir, ae);

define(dir, keys(0,1,2), {String, File, List});
watch(dir, ae);
dir(Host, DirObj, DirList) :-
    datadir(Host, Dir),
    DirObj := new File(Dir + File.separator + "chunks"),
    DirList := DirObj.isDirectory() ? Arrays.asList(DirObj.listFiles()) : new ArrayList(),
    clock(_, _, _);

define(indx, keys(0), {String, Integer});
indx(Host, 0) :-
    dir#insert(Host, Dir, List);

indx(Host, Next) :-
    indx(Host, Old),
    chunkTmp(Host, _, _),
    Next := Old + 1;

define(chunkTmp, {String, String, Integer});
chunkTmp(Host, FName, FLength) :-
    dir(Host, Dir, List),
    indx(Host, I),
    I < List.size()
    { F := (File) List.get(I);
      FName := F.getName();
      FLength := Integer.valueOf(Long.valueOf(F.length()).toString()); };

// fix me!
checksumdir(H, D)  :-
    dir(H, FD),
    D := "testdata1/checksums";

define(chunk, keys(0,1), {String, String, Integer, String});
watch(chunk, ae);
chunk(Host, FName, FLength, Checksum) :-
    Checksum := "foo",
    chunkTmp#insert(Host, FName, FLength); /*,
    datadir(Host, Dir),
    CSO := new bfs.ChunkCheckSum();
    Checksum := CSO.checksum();
    */

/* cleanup rules disabled
delete
chunk(Host, FName, FLength, Checksum) :-
    chunk(Host, FName, FLength, Checksum),
    dir#insert(Host, Dir, List);
*/


define(heartBeat,keys(0,1,2),{String,String,Integer,Integer,Long,Long});
//watch(heartBeat,ae);
heartBeat(Host, Master, Chunk, Length, Tstamp, Id) :-
    chunk(Host, FName, Length, Checksum),
    Chunk := Integer.valueOf(FName),
    masters(Host, Master),
    clock(_, _, _),
    Tstamp := System.currentTimeMillis(),
    Id := Runtime.idgen();

// Periodically send an HB to notify the masters that this data node
// is still alive, even if its content hasn't changed
heartBeat(Host, Master, -1, -1, Tstamp, -1) :-
    masters(Host, Master),
    clock(_, _, _),
    Tstamp := System.currentTimeMillis(),
    Id := Runtime.idgen();


define(sendHeartBeat,keys(0,1,2),{String,String,Integer,Integer,Long,Long});
//watch(sendHeartBeat,ae);
sendHeartBeat(@Master, Host, ChunkId, Length, Tstamp, Id) :-
    heartBeat(@Host, Master, ChunkId, Length, Tstamp, Id),
    notin serverKnows(@Host, Master, ChunkId, _);

define(ackHeartBeat,keys(0,1,2),{String,String,Long});
//watch(ackHeartBeat,ae);

define(serverKnows,keys(0,1,2,3),{String,String,Integer,Long});
watch(serverKnows,ae);
serverKnows(Host, Master, ChunkId, Id) :-
    heartBeat(Host, Master, ChunkId, _, _, Id),
    ackHeartBeat#insert(Host, Master, Id);

define(masters,keys(0,1),{String,String});
define(mindx,keys(0),{String,Integer});
//watch(masters,ae);
//watch(mindx,ae);
//watch(periodic,ae);

mindx(Me, 0) :-
    dir(Me, _),
    periodic(_, _, _);

mindx(Host, I) :-
    mindx(Host, Old),
    masters#insert(Host, Master),
    Old < Conf.getNumMasters()-1,
    I := Old + 1;

masters(Host, Master) :-
    mindx#insert(Host, I),
    Master := Conf.getMasterAddress(I);

define(send_delete, keys(0), {String, Integer, String});
watch(send_delete, ae);

// this is already defined in bfs_global.olg, but I don't think we
// want to install that program at the datanodes... or do we?
// Client node, Request ID, Master node, Success, Result
define(response, keys(0, 1), {String, Integer, String, Boolean, Object});
watch(response, ae);
