program bfs;

import bfs.BFSChunkInfo;
import bfs.BFSFileInfo;
import bfs.BFSNewChunkInfo;
import bfs.Conf;
import bfs.Master;
import bfs.Shell;
import java.lang.Object;
import java.lang.System;
import java.util.HashSet;
import java.util.Set;
import jol.types.basic.ValueList;

watch(file, ae);
watch(fpath, ae);

// Node address, Request ID, Request type, Arg
define(start_request, keys(0, 1), {String, Integer, String, String});

request(@Master, ReqId, Source, ReqType, Args) :-
    self(@Source),
    master_for_node(@Source, Master),
    // XXX PA
    start_request(@Source, ReqId, ReqType, Args);

// Client node, Request ID, Master node, Success, Result (if any). The
// type of the result depends on the type of request.
define(response, keys(0, 1), {String, Integer, String, Boolean, Object});
watch(response, aes);

// NewChunk: append a new chunk to a file
public
response(@Source, Id, Master, true, Result) :-
    // this needs to be tied into a paxos decree to enforce the ordering.
    bfs_chunks::newListHolder(@Master, Source, Id, CandidateNodes, NewChunkId, FPath),
    Result := new BFSNewChunkInfo(NewChunkId, CandidateNodes);

delete
request(Master, Id, Source, "NewChunk", FPath) :-
    bfs_chunks::newListHolder(Master, Source, Id, _, _, FPath);

// "NewChunk" for nonexistent file => error
response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "NewChunk", FPath),
    notin fpath(@Master, FPath, _);

// "NewChunk" for directory => error
response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "NewChunk", FPath),
    fpath(@Master, FPath, FileId),
    file(@Master, FileId, _, _, true);


// If we get a "ChunkList" request for an extant file, send back its
// chunks. If the file has no chunks, send back an empty set. Note
// that because the chunk list is computed by an aggregate, we don't
// guarantee that it is returned in any particular order; for now,
// we have clients sort by chunk ID -- this assumes that chunk IDs
// increase monotonically, and agree with the order of chunks in a file.
response(@Source, Id, Master, true, Chunks) :-
    request(@Master, Id, Source, "ChunkList", FPath),
    fpath(@Master, FPath, FileId),
    file(@Master, FileId, _, _, false),
    compute_chunk_set(@Master, FileId, Chunks);

response(@Source, Id, Master, true, EmptyChunks) :-
    request(@Master, Id, Source, "ChunkList", FPath),
    fpath(@Master, FPath, FileId),
    file(@Master, FileId, _, _, false),
    notin fchunk(@Master, _, FileId),
    EmptyChunks := new HashSet();

// ChunkList for nonexistent file => error
response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "ChunkList", FPath),
    notin fpath(@Master, FPath, _);

// ChunkList for directory => error
response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "ChunkList", FPath),
    fpath(@Master, FPath, FileId),
    file(@Master, FileId, _, _, true);

define(compute_chunk_set, keys(0, 1), {String, Integer, Set});
public
compute_chunk_set(Master, FileId, set<ChunkInfo>) :-
    fchunk(Master, ChunkId, FileId),
    bfs_heartbeat::chunks(Master, _, ChunkId, Length, _),
    ChunkInfo := new BFSChunkInfo(ChunkId, Length);

// If we get a "ChunkLocations" request for a chunk that we have knowledge
// of, return the set of nodes that hold that chunk. Otherwise, return an
// error.
define(compute_chunk_locs, keys(0, 1, 2), {String, Integer, Set});
public
compute_chunk_locs(@Master, ChunkId, set<NodeAddr>) :-
    bfs_heartbeat::chunks(@Master, NodeAddr, ChunkId, _, _);

response(@Source, Id, Master, true, NodeSet) :-
    request(@Master, Id, Source, "ChunkLocations", ChunkStr),
    ChunkId := Integer.valueOf(ChunkStr),
    compute_chunk_locs(@Master, ChunkId, NodeSet);

response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "ChunkLocations", ChunkStr),
    ChunkId := Integer.valueOf(ChunkStr),
    notin bfs_heartbeat::chunks(@Master, _, ChunkId, _, _);

// Handle "Create" and "CreateDir" requests
define(create_request_init, keys(0, 1), {String, Integer, String, Boolean, Integer});
watch(create_request_init, ae);
create_request_init(@Master, Id, FullPath, IsDir, LastSlashIdx) :-
    request#insert(@Master, Id, _, "Create", FullPath),
    IsDir := false,
    LastSlashIdx := FullPath.lastIndexOf("/");

create_request_init(@Master, Id, FullPath, IsDir, LastSlashIdx) :-
    request#insert(@Master, Id, _, "CreateDir", FullPath),
    IsDir := true,
    LastSlashIdx := FullPath.lastIndexOf("/");

// If we didn't find a "/", return an error: malformed path
response(@Source, Id, Master, false, null) :-
    create_request_init(@Master, Id, _, _, LastSlashIdx),
    LastSlashIdx == -1,
    request(@Master, Id, Source, _, _);

// If a file with the same full path already exists => error
response(@Source, Id, Master, false, null) :-
    create_request_init#insert(@Master, Id, FullPath, _, _),
    fpath(@Master, FullPath, _),
    request(@Master, Id, Source, _, _);

// Parse the request filename into the parent path and the actual
// file name. We need to do some hackery to account for "/" as the
// parent path: for all other paths, we want to trim the trailing
// slash
define(create_request_parsed, keys(0, 1), {String, Integer, String, String, Boolean});
watch(create_request_parsed, ae);
create_request_parsed(@Master, Id, ParentPath, FName, IsDir) :-
    create_request_init(@Master, Id, FullPath, IsDir, LastSlashIdx),
    LastSlashIdx >= 0
    {  Prefix := FullPath.substring(0, LastSlashIdx);
       ParentPath := (Prefix.equals("") ? "/" : Prefix);
       FName := FullPath.substring(LastSlashIdx + 1); };

// If the parent doesn't exist => error
response(@Source, Id, Master, false, null) :-
    create_request_parsed(@Master, Id, ParentPath, _, _),
    notin fpath(@Master, ParentPath, _),
    request(@Master, Id, Source, _, _);

// If the parent is not a directory => error
response(@Source, Id, Master, false, null) :-
    create_request_parsed(@Master, Id, ParentPath, _, _),
    fpath(@Master, ParentPath, ParentId),
    file(@Master, ParentId, _, _, ParentIsDir),
    ParentIsDir == false,
    request(@Master, Id, Source, _, _);

define(create_request_pending, keys(0, 1), {String, Integer, Integer, String, Boolean, Boolean});
watch(create_request_pending, ae);

// Otherwise, pass the request through Paxos
create_request_pending(@Master, Id, ParentId, FName, IsDir, true) :-
    create_request_parsed(@Master, Id, ParentPath, FName, IsDir),
    fpath(@Master, ParentPath, ParentId),
    file(@Master, ParentId, _, _, true);

public
response(@Source, Id, Master, Success, null) :-
    create_request_done(@Master, Id, Success),
    request(@Master, Id, Source, _, _);

// If we get an "ls" request, send back the names of all the files in
// the file system. Note that we need to do the aggregation in a sub-rule.

// "ls" for nonexistent path => error
response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "Ls", Path),
    notin fpath(@Master, Path, _);

// "ls" for a non-directory path => error (?)
response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "Ls", Path),
    fpath(@Master, Path, FileId),
    file(@Master, FileId, _, _, false);

// "ls" for a directory path => return contents of directory
response(@Source, Id, Master, true, FileSet) :-
    request(@Master, Id, Source, "Ls", Path),
    fpath(@Master, Path, FileId),
    file(@Master, FileId, _, _, true),
    compute_ls(@Master, FileId, FileSet);

define(compute_ls, keys(0, 1), {String, Integer, Set});
public
compute_ls(@Master, ParentFileId, set<FInfo>) :-
    file(@Master, FileId, ParentFileId, FName, IsDir),
    fpath(@Master, FPath, FileId),
    FInfo := new BFSFileInfo(FileId, FPath, FName, IsDir);

// "ls" for an empty directory => return empty set of files
response(@Source, Id, Master, true, EmptySet) :-
    request(@Master, Id, Source, "Ls", Path),
    fpath(@Master, Path, FileId),
    // empty directory <=> no files with FileId as parent
    notin file(@Master, _, FileId, _, _),
    EmptySet := new HashSet();

// If we get a "FileInfo" request for an extant file, send back info
// describing the file. Otherwise, send back a nack.
response(@Source, Id, Master, true, FInfo) :-
    request(@Master, Id, Source, "FileInfo", FPath),
    fpath(@Master, FPath, FileId),
    file(@Master, FileId, _, FName, IsDir),
    FInfo := new BFSFileInfo(FileId, FPath, FName, IsDir);

response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "FileInfo", FPath),
    notin fpath(@Master, FPath, _);


// If we got an "rm" request and the file exists, remove it and send
// back a positive ack.
define(rm_request_pending, keys(0, 1), {String, Integer, String, Boolean});
public
rm_request_pending(@Master, Id, FName, true) :-
    request(@Master, Id, _, "Rm", FPath),
    fpath(@Master, FPath, FileId),
    file(@Master, FileId, _, FName, _);

public
response(@Source, Id, Master, true, null) :-
    rm_request_done(@Master, Id),
    request(@Master, Id, Source, _, _);

// If we got an "rm" request and the file doesn't exist, return a
// negative ack. NB: unlike in the "create" case, we don't need the
// "#insert" hack, since deletions are postponed the end of the
// fixpoint.
// XXX: we should probably synchronize with Paxos here
response(@Source, Id, Master, false, null) :-
    request#insert(@Master, Id, Source, "Rm", FPath),
    notin fpath(@Master, FPath, _);
