program bfs;

import bfs.BFSFileInfo;
import bfs.Conf;
import bfs.Master;
import bfs.Shell;
import java.lang.System;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import jol.types.basic.ValueList;

request(@Master, ReqId, Source, ReqType, Args) :-
    self(@Source),
    master_for_node(@Source, Master),
    // XXX PA
    start_request(@Source, ReqId, ReqType, Args);

public
response(@Source, Id, Master, true, Result) :-
    //request(@Master, Id, Source, "NewChunk", FName),
    // this needs to be tied into a paxos decree to enforce the ordering.
    bfs_chunks::newListHolder(@Master, Source, Id, Result, NewChunkId, FName),
    // Hack: add the new chunk id to the end of the result list
    Result.add(NewChunkId.toString());

delete
request(Master, Id, Source, "NewChunk", FName) :-
    bfs_chunks::newListHolder(Master, Source, Id, _, _, FName);

// a "NewChunk" request for a nonexistent file causes an error.
response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "NewChunk", FName),
    notin file(@Master, FName);


// If we get a "ChunkList" request for an extant file, send back its
// chunks. If the file has no chunks, send back an empty list. Note
// that because the chunk list is computed by an aggregate, we don't
// guarantee that it is returned in any particular order; for now,
// we have clients sort by chunk ID -- this assumes that chunk IDs
// increase monotonically, and agree with the order of chunks in a file.
response(@Source, Id, Master, true, Chunks) :-
    request(@Master, Id, Source, "ChunkList", FName),
    file(@Master, FName),
    compute_chunk_set(@Master, FName, Chunks);

response(@Source, Id, Master, true, EmptyChunks) :-
    request(@Master, Id, Source, "ChunkList", FName),
    file(@Master, FName),
    notin fchunk(@Master, _, FName),
    EmptyChunks := new HashSet();

response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "ChunkList", FName),
    notin file(@Master, FName);

define(compute_chunk_set, keys(0, 1), {String, String, Set});
public
compute_chunk_set(Master, FName, set<ChunkId>) :-
    fchunk(Master, ChunkId, FName);

// If we get a "ChunkLocations" request for a chunk that we have knowledge
// of, return a list of the nodes holding that chunk. Otherwise, return
// an error.
define(compute_chunk_locs, keys(0, 1, 2), {String, Integer, ArrayList});
public
compute_chunk_locs(@Master, ChunkId, generic<(new ArrayList()).add(NodeAddr)>) :-
    bfs_heartbeat::chunks(@Master, NodeAddr, ChunkId, _, _);

response(@Source, Id, Master, true, NodeList) :-
    request(@Master, Id, Source, "ChunkLocations", ChunkStr),
    ChunkId := Integer.valueOf(ChunkStr),
    compute_chunk_locs(@Master, ChunkId, NodeList);

response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "ChunkLocations", ChunkStr),
    ChunkId := Integer.valueOf(ChunkStr),
    notin bfs_heartbeat::chunks(@Master, _, ChunkId, _, _);

define(create_request_pending, keys(0, 1), {String, Integer, String, Boolean});
watch(create_request_pending, ae);

// If we got a "create" request for a file that didn't exist,
// we need to wait until we get consensus from Paxos; then we
// can send back a positive ack.
// XXX: the use of "#insert" here is a hack
create_request_pending(@Master, Id, Source, true) :-
    request#insert(@Master, Id, Source, "Create", FName),
    notin file(@Master, FName);

// If we get a "create" request for a file that exists, we
// need to wait until we get consensus from Paxos; then we
// can send back a negative ack
create_request_pending(@Master, Id, Source, false) :-
    request#insert(@Master, Id, Source, "Create", FName),
    file(@Master, FName);

public
response(@Source, Id, Master, Success, null) :-
    create_request_done(@Master, Id, Source, Success);

// If we get an "ls" request, send back the names of all the files in
// the file system. If the file system is empty, send back an empty
// list. Note that we need to do the aggregation in a sub-rule.
define(compute_ls, keys(0, 1), {String, Integer, String, ArrayList});
watch(compute_ls, ae);
compute_ls(@Master, Id, Source, generic<(new ArrayList()).add(FInfo)>) :-
    request(@Master, Id, Source, "Ls", _),
    file(@Master, FName),
    FInfo := new BFSFileInfo(FName, null);

response(@Source, Id, Master, true, FileList) :-
    request(@Master, Id, Source, "Ls", _),
    compute_ls(@Master, Id, Source, FileList);

response(@Source, Id, Master, true, FileList) :-
    request(@Master, Id, Source, "Ls", _),
    notin file(@Master, _),
    FileList := new ArrayList();

// If we get a "FileInfo" request for an extant file, send back info
// describing the file. Otherwise, send back a nack.
response(@Source, Id, Master, true, FInfo) :-
    request(@Master, Id, Source, "FileInfo", FName),
    file(@Master, FName),
    FInfo := new BFSFileInfo(FName, null);

response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "FileInfo", FName),
    notin file(@Master, FName);


// If we got an "rm" request and the file exists, remove it and send
// back a positive ack.
define(rm_request_pending, keys(0, 1), {String, Integer, String, Boolean});
public
rm_request_pending(@Master, Id, Source, true) :-
    request(@Master, Id, Source, "Rm", FName),
    file(@Master, FName);

public
response(@Source, Id, Master, Success, null) :-
    rm_request_done(@Master, Id, Source, Success);

// If we got an "rm" request and the file doesn't exist, return a
// negative ack. NB: unlike in the "create" case, we don't need the
// "#insert" hack, since deletions are postponed the end of the
// fixpoint.
// XXX: we should probably synchronize with Paxos here
response(@Source, Id, Master, false, null) :-
    request(@Master, Id, Source, "Rm", FName),
    notin file(@Master, FName);
