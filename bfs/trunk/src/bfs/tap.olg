program tap;

import java.lang.Object;
import java.lang.String;
import java.lang.Integer;
import jol.core.Runtime;

import java.util.ArrayList;

import jol.types.basic.ValueList;
import jol.lang.plan.Predicate;
import jol.lang.plan.Watch;
import jol.lang.plan.Rule;
import jol.lang.plan.Variable;
import jol.types.table.TableName;
import jol.types.table.Table;
import jol.types.operator.Watch;

timer(tick, physical, 3000, 3000, infinity);

watch(tap, ae);
define(tap,keys(0,1), {String, String});

define(query, {String, Rule});
public
query(Rule, Obj) :-
    global::rule(Program, Rule, Public, Async, Delete, Obj),
    tap(Rule, Sink);


define(rewriteRule, keys(0,1), {String, String, Rule});
//watch(rewriteRule, ae);
public
rewriteRule(Program, Rule, Obj) :- 
    global::rule(Program, Rule, Public, Async, Delete, Obj),
    tap(X, Program),
    //end#insert();
    per#insert();

timer(per, physical, 1000, 1000, infinity);
//timer(end, logical, 1, 1, 2000);

define(preds, keys(0,2,3,4), {String, Predicate, String, Integer,String});
//watch(preds,ae);
public
preds(Prog, Pred, Pname, Ord, Rule) :-
    global::predicate(Prog, Rule, Ord, _, Pred),
    future#insert(),
    Pname := Pred.name().name.toString();

define(nonheads, keys(0,2), {String, Predicate, String});
public
nonheads(Prog, Pred, Pname) :-
    //per#insert(),
    preds(Prog, Pred, Pname, Ord, _),
    Ord > 0;


timer(future, logical, 1, 1, 100);

define(db, keys(0,1), {String, Predicate, String, String});

/*
watch(db, a);
db(Prog, Pred, Pname, "E") :-
    nonheads(Prog, Pred, Pname),
    tap(_, Prog),
    future#insert(),
    notin preds(_, _, Pname, 0, _);

db(Prog, Pred, Pname, "I") :-
    tap(_, Prog),
    future#insert(),
    preds(Prog, Pred, Pname, 0, _);

//define(rulePred, keys(0,1,4), {String, String, Predicate, Rule, String, String});
define(rulePred, keys(0,1), {String, String, String, String, Integer, Predicate, Rule});

watch(rulePred, ae);
public
rulePred(Prog, Rule, Pname, Type, Ord, PredObj, RuleObj) :-
    global::predicate(Prog, Rule, Ord, Event, PredObj),
    global::rule(Prog, Rule, _, _, _, RuleObj),
    tap(_, Prog),
    Pname := "foo",
    Type := "bar";//,
    //Pname == PredObj.name().name.toString(),
    //db(Prog3, Pred2, Pname4, Type2);

*/
