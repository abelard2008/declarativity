program runtime;

/* Define runtime events. */
define(runnable, {Float, String, TableName, TupleSet, TupleSet});
define(strata, keys(0,1), {String, Float, Integer});
define(priority, keys(0,1), {String, TableName, Integer});
define(delta, {Float, String, TableName, TupleSet, TupleSet});

reschedule
global::schedule(Time, Program, Name, Insertions, Deletions) :-
	delta(Time, Program, Name, Insertions, Deletions);
	
schedulePublic 
global::schedule(Time, Program2, Name, Insertions, Deletions) :-
	delta(Time, Program1, Name, Insertions, Deletions),
	global::query(Program2, Rule, Public, Delete, Event, Input, Output, Object),
	/* next line changed to remove && expression, which doesn't parse right */
	Public == true, Input == Name, Program1 != Program2;

/* Illegal Overlog!  Need to special-case
evaluate 
delta(Time, Program, Name, Insertions, Deletions) :-
	evaluate(runnable(Time, Program, Name, Insertions, Deletions));
*/


/* Delete what has been evaluated in the current clock. */
cleanup 
delete global::schedule(Time, Program, Name, Insertions, Deletions) :-
	runnable(Time, Program, Name, Insertions, Deletions);

/* Identify the runnable tuples. */
runnable 
runnable(Time, Program, Name, Insertions, Deletions) :-
	strata#insert(Program, Time, Priority),
	global::schedule(Time, Program, Name, Insertions, Deletions),
	priority(Program, Name, Priority);
	
/* Determine the current strata in the current time for all 
   programs that have something scheduled. */
strata 
strata(Program, Time, min<Priority>) :-
	global::clock(Location, Time),
	global::schedule(Time, Program, Name, Insertions, Deletions),
	priority(Program, Name, Priority);

/* This case handles those programs that do not have a query
    (and hence no priority) for the tuple 'Name'. */
runnable(Time, Program, Name, Insertions, Deletions) :-
	global::clock(Location, Time),
	global::schedule(Time, Program, Name, Insertions, Deletions),
	notin priority(Program, Name, Priority);
	
	
/*******************************************************************/
/*** Periodic scheduler                                           **/

define(schedulePeriodic, {String, Float, Float, Float, Float, String});

/* Schedule next periodic. */
renewPeriodic
schedulePeriodic(Id, Period, TTL, Time+Period, Count+1, Program) :-
	global::clock#insert(Location, Time),
	global::periodic(Id, Period, TTL, Time, Count, Program),
	Count < TTL;
			
initPeriodic 
schedulePeriodic(Id, Period, TTL, Time+1+Offset, Count+1, Program) :-
	config(Time, Program, Object),
	global::periodic(Id, Period, TTL, Offset, Count, Program);
	
/* THIS NEXT WON'T PARSE YET DUE TO NESTED TUPLES */
/* Schedule the periodic and update its execution count. */
/* 
schedulePeriodic 
global::periodic(Id, Period, TTL, Time, Count, Program) :-
	periodicScheduler(schedulePeriodic(Id, Period, TTL, Time, Count, Program));
*/

/*******************************************************************/
/*** Fact scheduler */

define(facts, {String, TableName, TupleSet});

collectFacts 
facts(Program, Name, tupleset<Tuple>) :-
	config(Time, Program, Object),
	fact(Program, Name, Tuple);
	
installFacts1 
runnable(Time, Program, Name, Facts, null) :-
	facts(Program, Name, Facts), Program == "compile",
	global::clock(Location, Time);
	
installFacts2 
global::schedule(Time+1, Program, Name, Facts, null) :-
	facts(Program, Name, Facts), Program != "compile",
	global::clock(Location, Time);
	
/*******************************************************************/
/*** Schedule compile */

/* define(config, {Float, String, p2.lang.plan.Program}); */
define(config, {Float, String, Program});

configProgram 
/* config(Time, Program, Object) :- 
	compiler#insert(Program, Owner, File, Object), 
	global::clock(Location, Time),
	Object.plan(); */

	config(Time, Program, Object) :- 
		compiler#insert(Program, Owner, File, Object), 
		global::clock(Location, Time);
						
/*
compileConfig 
runnable(Time, "compile", Tuples.name(), Tuples, null) :-
	config(Time, Program, Object),
	Tuples := new TupleSet(new TableName("compile", "config"), Object.tuple());
*/
compileConfig 
runnable(String, "compile", Name, Tuples, nil) :-
	config(Time, Program, Object),
	Tuples := TupleSet.new(TableName.new("compile", "config"), Object.tuple()),
	Name = Tuples.name();

