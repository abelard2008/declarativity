program runtime;

/* global::schedules things from the global::schedule queue (attaches strata to each tuple). */
define(queue, {Float, Integer, String, TableName, TupleSet, TupleSet});

/* Insertion queue: (Time, Strata, ProgramName, TableName, Tuples) */
define(insertionQueue, keys(), {Float, Integer, String, TableName, TupleSet});

/* Deletion queue: (Time, ProgramName, TableName, Tuples) */
define(deletionQueue,  keys(), {Float, String, TableName, TupleSet});

/* Evaluator output: evaluation(Time, ProgramName, TableName, Insertions, Deletions) */
define(evaluation, {Float, String, TableName, TupleSet, TupleSet});

/* Evaluator input: execute(Time, ProgramName, TableName, Insertions, Deletions) */
define(execute,    {Float, String, TableName, TupleSet, TupleSet});

/* Committer output: delta(Time, ProgramName, TableName, Insertions, Deletions) */ 
define(delta, {Float, String, TableName, TupleSet, TupleSet});

/* Committer input: runnable(Time, ProgramName, TableName, Insertions, Deletions) */ 
define(runnable,   {Float, String, TableName, TupleSet, TupleSet});

/* Current strata: strata(Program, Time, Strata) */
define(strata,  keys(0,1), {String, Float, Integer});

/* Predicate/TableName priority/strata: priority(Program, TableName, Strata) */
define(priority, keys(0,1), {String, TableName, Integer});

/* watch(runnable, ida); */



/* Remove insertion post evaluation. */
delete
insertionQueue(Time, Strata, Program, Name, Insertions) :-
    runnable(Time, Program, Name, Insertions, _),
    insertionQueue(Time, Strata, Program, Name, Insertions);

/* Remove deletion post evaluation. */
delete
deletionQueue(Time, Program, Name, Deletions) :-
    runnable(Time, Program, Name, _, Deletions);

/* Reglobal::schedule delta. */
sched1
global::schedule(Time, Program, Name, Insertions, Deletions) :-
	evaluation(Time, Program, Name, Insertions, Deletions),
	Nilness := Insertions.nil?,
	Nilness != true,
	Size := Insertions.size,
	Size > 0;

sched2
global::schedule(Time, Program, Name, Insertions, Deletions) :-
  evaluation(Time, Program, Name, Insertions, Deletions),
	Nilness := Deletions.nil?,
	Nilness != true,
	Size := Deletions.size,
	Size > 0;
	
/* Evaluate the program with the given insertions OR deletions. */
evaluator
evaluation(JoeTime, Program, Name, Insertions, Deletions) :-
	evaluator(execute(JoeTime, Program, Name, Insertions, Deletions));
	
/* NOTE: We do not global::schedule public deletions!! */
publicEval
execute(Time, Program2, Name, Insertions, N) :-
	delta(Time, Program1, Name, Insertions, Deletions),
	bootstrap::query(Program2, Rule, Public, Delete, Event, Input, Output, Object),
	Public == true, Input == Name, Program1 != Program2, 
	N := nil;

/* Execute on the intended program. */
localEval
execute(Time, Program, Name, Insertions, Deletions) :-
	delta(Time, Program, Name, Insertions, Deletions);

/* Flusher the insertions OR deletions, pass deltas to evaluator. */
commit 
delta(Time, Program, Name, Insertions, Deletions) :-
	flusher(runnable(Time, Program, Name, Insertions, Deletions));

/* Identify the runnable tuples. */
insertion_runnable 
runnable(Time, Program, Name, Insertions, N) :-
	strata(Program, Time, Strata),
	insertionQueue(Time, Strata, Program, Name, Insertions),
	N := nil;

/* Execute all deletions when insertion count goes to 0. 
   Deletions executed and deletions deltas global::scheduled for 
   next global::clock. */
deletion_runnable 
runnable(T, Program, Name, N, Deletions) :-
	deletionQueue(Time, Program, Name, Deletions),
	T := Time + 1,
	N := nil;


/* Determine the current strata in the current time for all 
   programs that have something global::scheduled. */
strata 
strata(Program, Time, min<Stratum>) :-
	insertionQueue(Time, Stratum, Program, Name, Insertions);

init_insertion_queue
insertionQueue(Time, Strata, Program, Name, Insertions) :-
	queue(Time, Strata, Program, Name, Insertions, _),
	compiler::program(Program, Owner, Object),
/*  ArbitraryExpression fails when Insertions is a TupleSet */
	Nilness := Insertions.nil?,
	Nilness != true,
	Size := Insertions.size,
	Size > 0;
	
init_deletion_queue
deletionQueue(Time, Program, Name, Deletions) :-
	queue(Time, Strata, Program, Name, Insertions, Deletions),
	compiler::program(Program, Owner, Object),
/*  ArbitraryExpression fails when Deletions is a TupleSet */
	Nilness := Deletions.nil?,
	Nilness != true,
	Size := Deletions.size,
	Size > 0;
	
/* Queue up global::scheduled items in current global::clock. */
q1_rule
queue(Time, Strata, Program, Name, Insertions, Deletions) :-
	global::clock(Location, Time),
	global::schedule(Time, Program, Name, Insertions, Deletions),
	priority(Program, Name, Strata);
	
q2_rule
queue(Time, Zero, Program, Name, Insertions, Deletions) :-
	global::clock(Location, Time),
	global::schedule(Time, Program, Name, Insertions, Deletions),
	notin priority(Program, Name, _),
	Zero := 0;

/* Clean up queued programs. */
sched_deleter
delete
global::schedule(Time, Program, Name, Insertions, Deletions) :-
	global::clock#delete(Location, Time),
	global::schedule(Time, Program, Name, Insertions, Deletions);

/*******************************************************************/
/*** Periodic global::scheduler                                           **/

define(schedulePeriodic, {String, Float, Float, Float, Float, String});

/* schedule next periodic. */
renewPeriodic
schedulePeriodic(Id, Period, TTL, Tp, C, Program) :-
	global::clock#insert(Location, Time),
	global::periodic(Id, Period, TTL, Time, Count, Program),
	Count < TTL,
	Tp := Time+Period,
	C := Count+1;
			
initPeriodic 
schedulePeriodic(Id, Period, TTL, T, C, Program) :-
	config(Time, Program, Object),
	global::periodic(Id, Period, TTL, Offset, Count, Program),
	T1 := Time+1,
	T := Time1+Offset,
	C := Count+1;
	
/* global::schedule the periodic and update its execution count. */
schedulePeriodic 
periodic(Id, Period, TTL, Time, Count, Program) :-
	periodicScheduler(schedulePeriodic(Id, Period, TTL, Time, Count, Program));


/*******************************************************************/
/*** Fact scheduler */

define(facts, {String, TableName, TupleSet});

collectFacts 
facts(Program, Name, tupleset<Tuple>) :-
	config(Time, Program, Object),
	compiler::fact(Program, Name, Tuple);

installFacts2 
global::schedule(TheTime, Program, Name, Facts, N) :-
	facts(Program, Name, Facts),
/*	Facts.setName(Name), */
	global::clock(Location, Time),
	TheTime := Time+1,
	N := nil;
	
/*******************************************************************/
/*** schedule compile */

define(config, {Float, String, Program});

configProgram 
config(Time, Program, Object) :-
	bootstrap::compiler#insert(Program, Owner, File, Object),
	global::clock(Location, Time),
	Object.plan();
		
compileConfig 
global::schedule(Time, "compiler", TupleName, Tuples, N) :-
	config(Time, Program, Object),
	/* TName used to be TableName and that produced a silent bug on the name conflict */
	TName := TableName.new("compiler", "config"),
	Obj := Object.tuple(),
	Tuples := TupleSet.new(TName, Obj),
	TupleName := Tuples.name(),
	N := nil;
