program compiler;

/*
import jol.lang.plan.Program;
import java.lang.Integer;
*/

/*******************************************************************/
/*** Table definitions ***/
define(dependency, keys(0,1,2), {String, TableName, TableName});
define(priorityUpdate, {String, TableName, Integer});
define(config, {String, Program});
define(checkStrata, {String, Integer});

/*******************************************************************/
/*** Facts that initialize priority with this program's predicates ***/

runtime::priority("compiler", TableName.new("global", "compiler"),  0);
runtime::priority("compiler", TableName.new("global", "predicate"), 0);
runtime::priority("compiler", TableName.new("global", "rule"),      0);

runtime::priority("compiler", TableName.new("compiler", "config"),         0);
runtime::priority("compiler", TableName.new("compiler", "dependency"),     1);
runtime::priority("compiler", TableName.new("compiler", "priorityUpdate"), 2);
runtime::priority("compiler", TableName.new("runtime", "priority"),       3);
runtime::priority("compiler", TableName.new("compiler", "checkStrata"),    4);


/*******************************************************************/
/*** Compile rules: Initialize program priority/strata **/

/*
checkStratification
checkStrata(Program, count<*>) :-
	runtime::priority(Program, TableName, Priority);

watch(checkStrata, i);
*/

/* Determine R/G graph dependencies. */
dependency(ProgramName, Hname, Bname) :-
	config(ProgramName, Object),
	rule(ProgramName, Rule, X, Y, Z),
	predicate(ProgramName, Rule, 0, _, Head), /* Position == 0 */
	predicate(ProgramName, Rule, Pos, _, Body), 
	Hname := Head.name(),
	Bname := Body.name(),
	Hname != Bname, Pos > 0,
	ProgramName != "compiler";
	
/* Transitive closure over the dependency graph. */
dependency(ProgramName, Ancestor, Child) :-
	dependency(ProgramName, Ancestor, Descendant),
	dependency(ProgramName, Descendant, Child),
	Ancestor != Child;
	
/* Initialize all predicates to stratum 0. */
priority_init
runtime::priority(ProgramName, Name, Zero) :-
	config(ProgramName, Object),
	rule(ProgramName, Rule, X, Y, Z),
	predicate(ProgramName, Rule, Pos, Event, Pred),
	ProgramName != "compiler",
	Name := Pred.name(),
	Zero := 0;
	
priority2
runtime::priority(ProgramName, TableName, Zero) :-
	config(ProgramName, Object),
	fact(ProgramName, TableName, Tuple),
	ProgramName != "compiler",
	Zero := 0;


/* Bubble up predicates in the stratum chain. */
priorityUpJoin
priorityUpdate(ProgramName, Head, max<Priority>) :-
	runtime::priority(ProgramName, Head, HPriority),
	runtime::priority(ProgramName, Body, BPriority),
	dependency(ProgramName, Head, Body),
	notin dependency(ProgramName, Body, Head),
	HPriority <= BPriority,
	Priority := BPriority + 1;
		
priorityUp
runtime::priority(ProgramName, Pred, Priority) :-
	priorityUpdate(ProgramName, Pred, Priority);
	
	
/*******************************************************************/
/*** Compile uninstall program **/
/* import java.lang.Boolean; */
	
define(uninstall, {String, Boolean});
define(hardUninstall, {String});

delete
program(Program, Owner, Object) :-
	uninstall(Program, _),
	program(Program, Owner, Object),
	Owner != "system";
	
hardUninstall(Program) :-
	uninstall(Program, Hard),
	program(Program, Owner, Object),
	Owner != "system";

delete
runtime::priority(Program, Pred, Priority) :-
	hardUninstall(Program),
	runtime::priority(Program, Pred, Priority);	

delete
bootstrap::query(Program, Rule, Public, Delete, Event, Input, Output, Object) :-
	hardUninstall(Program),
	bootstrap::query(Program, Rule, Public, Delete, Event, Input, Output, Object);
	
delete
rule(Program, Rule, Public, Delete, Object) :-	
	hardUninstall(Program),
	rule(Program, Rule, Public, Delete, Object);
	
delete
predicate(Program, Rule, Position, Event, Object) :-
	hardUninstall(Program),
	predicate(Program, Rule, Position, Event, Object);
	
delete
selection(Program, Rule, Position, Object) :-
	hardUninstall(Program),
	selection(Program, Rule, Position, Object);

delete
assignment(Program, Rule, Position, Object) :-
	hardUninstall(Program),
	assignment(Program, Rule, Position, Object);

delete
watch(Program, Tablename, Modifier, Operator) :-
	hardUninstall(Program),
	watch(Program, Tablename, Modifier, Operator);
	
	
	
	