#@ this grammar is mostly auto-generated from the rats! grammar of the java implementation of P2.
# rats!, treetop and peg/leg are all implementations of packrat parsers, which are memoizing
# parsers for Parsing expression Grammars (PEGs).
# syntax-directed translation (rats! -> treetop) was performed using a PEG grammar in the peg/leg
# syntax.  the grammar recognizes a rats! grammar and outputs an equivalent treetop grammar.
#
# unfortunately, the evaluation strategy for treetop programs seems to differ significantly from
# that of rats!.  the auto-generated grammar contained numerous instances of left-recursive rules
# that caused stack overflows in ruby.  these all had to be manually re-written to remove
# left-recursion. (note: these rewrites need to be carefully reread: the operator precedence is
# likely thrown off)

# also, PEG rules with uppercase first letters causes namespace issues in ruby.  before I figured this
# out, I was unable to descend below a nonterminal semantic element, and structured the code in 
# some odd ways to work around this (see the semantic block for "name" (previously "Name"))


grammar Overlog

include Ddl
       	rule pprogram
		  pprogramname Spacing Clauses #EndOfFile   
	end
     	rule pprogramname
		  'program' Spacing word ';'
			{
				def pprogramname
					return word.text_value
				end
			}
	end
     	rule Clauses
		     (Clause semicolon)*
	end

	rule semicolon
		Spacing ';' Spacing
	end
  	rule Clause
		     Rule  /     Watch  /     Fact  /     Definition  /  Require   / statement

			
	end
	rule statement
		super
	end
     	rule Require
		  'require' Spacing DoubleQuote Filename DoubleQuote
		  {
		    def Require
		      return self.Filename
	      end
		  }
	end
     	rule Fact
		  ptablename opar expressionList cpar
			{
				def Fact
					return self.ptablename.text_value
				end
			}
	end
     	rule Rule
		  #   (('public'   )?  deleter?  rulehead Spacing ':-' Spacing RuleBody  /     ('public'   )?  name  Spacing  deleter?  rulehead Spacing ':-' Spacing RuleBody   )
		# reimagined rule:
		(( 'public' )? deleter rulehead followsfrom RuleBody / ( 'public' )? name? deleter rulehead followsfrom RuleBody  ) 
			{ 
				def Rule
					return self
				end 
			}
	end
	rule followsfrom
		Spacing ':-' Spacing
	end
	rule deleter
		Spacing ( 'delete' )? Spacing	
			{
				def delete
					#if text_value.eql?("") then
					#	return false
					#else
					#	return true
					#end
					return !text_value.eql?("")
				end
			}
	end
  	rule rulehead
		  predicate   
	end
  	rule RuleBody
		  TermList   
	end
     	rule TermList
		  Term    (Comma Term   )*    
	end
  	rule Term
		  TableFunction  /  predicate  /  Assignment  /  Selection   
	end
     	rule Definition
		     ('define' opar ptablename Comma Keys Comma Schema cpar /     'define' opar ptablename Comma Schema cpar )
			{
				def Definition
					return ptablename.text_value
				end			
			}
	end
	rule opar
		Spacing '(' Spacing
	end
	rule cpar
		Spacing ')' Spacing
	end
  	rule Keys
		     'keys' '(' IntegerList ')'  /     'keys' '(' ')'   
	end
  	rule Schema
		  '{' TypeDefList '}'   
	end
     	rule TypeDefList
		  Type    (Comma Type   )*    
	end
     	rule Watch
		     'watch' opar ptablename cpar  /     'watch' opar ptablename Comma WatchFlow Spacing cpar	
			{
				def Watch
					return self
				end 
			}
	end
   	rule WatchFlow
		  [taeidrs]+    
	end
     	rule TableFunction
		  ptablename opar predicate cpar  
		  {
		    def TableFunction
		      return self
	      end
		  }
	end
     	rule predicate
		    notin? ptablename eventModifier  arguments   
				{
					def predicate
						#return self.ptablename
						return self
					end
					#def args
					#	return arguments.value
					#end
				}
	end
	rule notin
		# DON'T FORGET THIS
		Spacing ( 'notin' ) Spacing
		{
			def naught
				return !text_value.eql?("")
			end
		}
	end
     	rule Assignment
		  variable Spacing ':=' Spacing expression
			{
				def Assignment
					return self
				end
			}
	end
     	rule Selection
		  expression   
			{
				def Selection
					return self
				end 
			}
	end
     	rule expression
		  IfElseexpression
			{
			def value 
				return text_value

			end
			}
	end
     	rule expressionList
		  uExpression    (Comma uExpression)*    
		{
			def value 
				return 
			end
		}
	end
	rule uExpression
		expression
		{
			#@def uExpression
			#	return self
			#end
		}
	end	
   	rule IfElseexpression
		     LogicalOrexpression '?' expression ':' expression  /     LogicalOrexpression
	end

# this left-recursion stuff is killing me.
#   	rule LogicalOrexpression
#		     LogicalOrexpression '||' LogicalAndexpression  /     LogicalAndexpression
#	end

   	rule LogicalOrexpression
		     LogicalAndexpression / LogicalOrexpression '||' LogicalAndexpression  #/     LogicalAndexpression
	end
   	rule LogicalAndexpression
		     Equalityexpression / LogicalAndexpression '&&' Equalityexpression  #/     Equalityexpression
	end
   	rule Equalityexpression
			# again
		     #Inequalityexpression / Equalityexpression eqop Inequalityexpression  #/     Inequalityexpression
		     Inequalityexpression eqop Equalityexpression /     Inequalityexpression
		
	end
	rule eqop
		Spacing EqualityOperator Spacing
	end
  	rule EqualityOperator
		     '=='  /     '!='  /     '<>'   
	end
   	rule Inequalityexpression
		  #Shiftexpression / Inequalityexpression ineq Shiftexpression  #/  Shiftexpression
		  Shiftexpression ineq Inequalityexpression /  Shiftexpression
	end
	rule ineq
		Spacing InequalityOperator Spacing
	end
  	rule InequalityOperator
		     '<='  /     '>='   / '<'  /     '>'
	end
   	rule Shiftexpression
		     Additiveexpression / Shiftexpression ShiftOperator Additiveexpression  #/     Additiveexpression
	end
  	rule ShiftOperator
		     '<<'  /     '>>'   
	end
   	rule Additiveexpression
		## NOTE: I had to totally invert this and will probably have to do so for all these left-recursive constructs.
		     #Multiplicativeexpression / Additiveexpression Spacing AdditiveOperator Spacing Multiplicativeexpression  #/     Multiplicativeexpression
		     Multiplicativeexpression addop Additiveexpression  /     Multiplicativeexpression
	end
  	rule AdditiveOperator
		     Spacing '+'  Spacing /     '-'   
	end
   	rule Multiplicativeexpression
		     #Unaryexpression /  Multiplicativeexpression multop Unaryexpression  #/     Unaryexpression
			Unaryexpression multop Multiplicativeexpression / Unaryexpression
	end
	rule multop
		Spacing MultiplicativeOperator Spacing
	end
	rule addop
		Spacing AdditiveOperator Spacing
	end
  	rule MultiplicativeOperator
		     '*'  /     '/'  /     '%'   
	end
  	rule Unaryexpression
		     #Castexpression  /     LogicalNegationexpression  /     Inclusiveexpression  /     Postfixexpression
			Postfixexpression / Castexpression  /     LogicalNegationexpression  /     Inclusiveexpression
	end
  	rule LogicalNegationexpression
		  '!' Unaryexpression   
	end
  	rule Castexpression
		  '(' Type ')' Unaryexpression   
	end
  	rule Inclusiveexpression
		  primaryexpression 'in' Rangeexpression  /  primaryexpression 'in' variable   
	end
  	rule Rangeexpression
		  LeftRangeOperator expression ',' expression RightRangeOperator   
	end
  	rule LeftRangeOperator
		     '['  /     '('   
	end
  	rule RightRangeOperator
		     ']'  /     ')'   
	end
  	rule Postfixexpression
		     #primaryexpression / Postfixexpression '.' name Reference  /     Postfixexpression arguments Method  /     Postfixexpression '[' Constant ']' ArrayIndex  /     Postfixexpression '++' Increment  /     Postfixexpression '--' Decrement  #/     primaryexpression   

		     #primaryexpression / Postfixexpression '.' name  /     Postfixexpression arguments /     Postfixexpression '[' Constant ']' ArrayIndex  /     Postfixexpression '++' Increment  /     Postfixexpression '--' Decrement  #/     primaryexpression   

		     primaryexpression '.' name arguments? / primaryexpression /  Postfixexpression arguments /     Postfixexpression '[' Constant ']' ArrayIndex  /     Postfixexpression '++' Increment  /     Postfixexpression '--' Decrement  #/     primaryexpression   

	end
  	rule primaryexpression
		    #(Location Spacing / Aggregate Spacing / Constant Spacing / Alias Spacing  /     variable Spacing  /     NewClass Spacing  /  Referencename Spacing  # / Constant Spacing  
		#	/     opar expression cpar )

		    (Location Spacing / Aggregate Spacing / opar expression cpar / Constant Spacing / Alias Spacing  /     variable Spacing  /     NewClass Spacing  /  Referencename Spacing)
				{
					def primaryexpression
						return self
					end
				}
	end
   	rule arguments
		     opar (expressionList) cpar  /     opar cpar   
			{
				#def arguments 
				#	return self
				#end
				#def value 	
				#	return expressionList.value
				#end
				def args
					return expressionList
				end
			}
	end
  	rule NewClass
		  Typename  '.new' 
	end
  	rule Referencename
		  name   
	end
     	rule Alias
		  variable ':=' '$' IntegerConstant   
	end
     	rule name
		  word
	end
  	rule word
		  Spacing (wordCharacters) Spacing   
			{
				def word
					return self
				end 
				def value 
					return text_value
				end
			}
	end
	rule wordCharacters
		[a-zA-Z0-9_]*
	end
   	rule Spacing
		     (Space  /  LineTerminator  /  TraditionalComment  /  EndOfLineComment)*    
	end
   	rule Space
		#' '  /  '\t'  /  '\f'   
		[ \t\f]
	end
	  rule DoubleQuote
	  '"'
  end
   	rule TraditionalComment
		  '/*'    ('*' !'/'  /  !'*'  .   )*  '*/'   
	end
   	rule EndOfLineComment
		  '//'    (![\n\r]  .   )*     (LineTerminator ) ##  /  &EndOfFile   )   
	end
   	rule LineTerminator
		  #'\r' '\n'  /  '\r'  /  '\n'   
		 '\r\n' / Newline
			{
				def LineTerminator
					#@@lines = @@lines + 1
					return self
				end
			}
	end
	rule Newline
		[\r\n]
	end
   	rule EndOfFile
		  !.   
	end

	rule Comma
		Spacing "," Spacing
	end 
     	rule name
		  word   
	end
  	rule word
		  #Spacing wordCharacters Spacing   
			wordCharacters
	end
  	rule eventModifier
		  ('#' eventType)?   
		  {
		    def eventModifier
		      return self.eventType
	      end
      }
	end
  	rule eventType
		     'insert'  /     'delete'   
	end
  	rule ptablename
		  (scope '::' name  /  name )
	end
	rule scope
		name
	end
  	rule variable
		  name   /  '_'  /  '*'   
	end
  	rule Location
		  '@' variable   
	end
  	rule Aggregate
		  name '<' aggregatevariable '>'   
		{
			def func
				return name
			end
			
		}
	end
  	rule aggregatevariable
		     Location  /     variable   
	end
  	rule AttributePosition
		  '$' [0-9]+  Spacing   
	end
  	rule Type
		     Typename Dimensions?  Spacing   
	end
  	rule Typename
		     PrimitiveType  /     ClassType   
	end
  	rule Filename
		     name ('/' name)*
	end
  	rule PrimitiveType
		     'byte'  /     'short'  /     'char'  /     'string'  /     'int'  /     'long'  /     'float'  /     'double'  /     'boolean'   
	end
  	rule Dimensions
		     ('[' [0-9]*  ']'   )+    
	end
  	rule ClassType
		  name    ('::' name   )*    
	end
     	rule Constant
		 StringConstant Spacing / FloatConstant Spacing  /  LongConstant Spacing  /  IntegerConstant Spacing  /   NullConstant Spacing  /  BooleanConstant Spacing  /  InfinityConstant Spacing  /  Vector Spacing  /  Matrix Spacing   

	end
     	rule ConstantList
		  Constant    (',' Constant   )*    
	end
  	rule FloatConstant
		  FloatingPointString   
	end
     	rule FloatList
		  FloatConstant    (',' FloatConstant   )*    
	end
  	rule FloatingPointString
		  Digit+  '.' Digit+  Exponent?  FloatTypeSuffix?   /  '.' Digit+  Exponent?  FloatTypeSuffix?   /  Digit+  Exponent FloatTypeSuffix?   /  Digit+  Exponent?  FloatTypeSuffix   
	end
   	rule Exponent
		  [eE] [+\-]?  Digit+    
	end
   	rule FloatTypeSuffix
		  [fFdD]   
	end
  	rule IntegerConstant
		  HexConstant  /  DecimalConstant   
	end
  	rule LongConstant
		  DecimalConstant LongTypeSuffix   
	end
     	rule IntegerList
		  IntegerConstant    (',' IntegerConstant   )*    
	end
   	rule HexConstant
		  HexNumeral HexTypeSuffix?    
	end
   	rule DecimalConstant
		  '-'?  DecimalNumeral   
	end
   	rule DecimalNumeral
		  '0'  /  NonZeroDigit Digit*    
	end
   	rule NonZeroDigit
		  [1-9]   
	end
   	rule Digit
		  [0-9]   
	end
   	rule HexNumeral
		  '0' [xX] HexDigit+    
	end
   	rule HexDigit
		  [0-9a-fA-F]   
	end
   	rule LongTypeSuffix
		  [lL]   
	end
   	rule HexTypeSuffix
		  [UI]   
	end
  	rule StringConstant
		  CharacterSequence   
	end
  	rule CharacterSequence
		  ["]    (EscapeSequence  /  !["\\]  . )*  ["]   
	end
   	rule EscapeSequence
		  '\\' [btnfr"'\\]   
	end
  	rule BooleanConstant
		  'true'  /  'false'   
	end
  	rule InfinityConstant
		  'infinity'   
	end
  	rule NullConstant
		  'null' / 'nil'   
	end
  	rule Vector
		  IntVector  /  FloatVector   
	end
  	rule IntVector
		  '{' IntegerList '}'   
	end
  	rule FloatVector
		  '{' FloatList '}'   
	end
  	rule Matrix
		  IntMatrix  /  FloatMatrix   
	end
  	rule IntMatrix
		  '{' IntMatrixEntries '}'   
	end
  	rule FloatMatrix
		  '{' FloatMatrixEntries '}'   
	end
     	rule IntMatrixEntries
		  IntVector    (',' IntVector   )*    
	end
     	rule FloatMatrixEntries
		  FloatVector    (',' FloatVector   )*    
	end
 end
