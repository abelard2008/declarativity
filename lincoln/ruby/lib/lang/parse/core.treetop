# this grammar is mostly auto-generated from the rats! grammar of the java implementation of P2.
# rats!, treetop and peg/leg are all implementations of packrat parsers, which are memoizing
# parsers for Parsing expression Grammars (PEGs).
# syntax-directed translation (rats! -> treetop) was performed using a PEG grammar in the peg/leg
# syntax.  the grammar recognizes a rats! grammar and outputs an equivalent treetop grammar.
#
# unfortunately, the evaluation strategy for treetop programs seems to differ significantly from
# that of rats!.  the auto-generated grammar contained numerous instances of left-recursive rules
# that caused stack overflows in ruby.  these all had to be manually re-written to remove
# left-recursion. (note: these rewrites need to be carefully reread: the operator precedence is
# likely thrown off)

# also, PEG rules with uppercase first letters causes namespace issues in ruby.  before I figured this
# out, I was unable to descend below a nonterminal semantic element, and structured the code in 
# some odd ways to work around this (see the semantic block for "name" (previously "Name"))


grammar Overlog
       	rule Program
		  Programname Spacing Clauses #EndOfFile   
	end
     	rule Programname
		  'program' Spacing Word ';'
	end
     	rule Clauses
		     (Clause semicolon)*
	end

	rule semicolon
		Spacing ';' Spacing
	end
  	rule Clause
		     Rule  /     Watch  /     Fact  /     Definition  /     Import   

			
	end
     	rule Import
		  'import' Spacing Typename   
	end
     	rule Fact
		  Tablename opar expressionList cpar
			{
				def Fact
					return self.Tablename.text_value
				end
			}
	end
     	rule Rule
		     (('public'   )?  deleter?  rulehead Spacing ':-' Spacing RuleBody  /     ('public'   )?  name    deleter?  rulehead Spacing ':-' Spacing RuleBody   )
			{ 
				def Rule
					return self
					#return [rulehead.text_value,deleter.text_value]
				end 
			}
	end
	rule deleter
		Spacing 'delete' Spacing	
	end
  	rule rulehead
		  Predicate   
	end
  	rule RuleBody
		  TermList   
	end
     	rule TermList
		  Term    (Comma Term   )*    
	end
  	rule Term
		  TableFunction  /  Predicate  /  Assignment  /  Selection   
	end
     	rule Definition
		     ('define' opar Tablename Comma Keys Comma Schema cpar /     'define' opar Tablename Comma Schema cpar )
			{
				def Definition
					return self
				end			
			}
	end
	rule opar
		Spacing '(' Spacing
	end
	rule cpar
		Spacing ')' Spacing
	end
  	rule Keys
		     'keys' '(' IntegerList ')'  /     'keys' '(' ')'   
	end
  	rule Schema
		  '{' TypeDefList '}'   
	end
     	rule TypeDefList
		  Type    (Comma Type   )*    
	end
     	rule Watch
		     'watch' opar Tablename cpar  /     'watch' opar Tablename Comma WatchFlow Spacing cpar	
			{
				def Watch
					return self
				end 
			}
	end
   	rule WatchFlow
		  [taeidrs]+    
	end
     	rule TableFunction
		  Tablename opar Predicate cpar  
	end
     	rule Predicate
		     ('notin'   )?  Tablename EventModifier?  arguments   
				{
					def Predicate
						return self.Tablename
						#return arguments.value
					end
					def args
						return arguments.value
					end
				}
	end
     	rule Assignment
		  Variable Spacing ':=' Spacing expression
			{
				def Assignment
					return self
				end
			}
	end
     	rule Selection
		  expression   
			{
				def Selection
					return self
				end 
			}
	end
     	rule expression
		  IfElseexpression
			{
			def value 
				return text_value

			end
			}
	end
     	rule expressionList
		  expression    (Comma expression)*    
		{
			def value 
				return 
			end
		}
	end
   	rule IfElseexpression
		     LogicalOrexpression '?' expression ':' expression  /     LogicalOrexpression
	end

# this left-recursion stuff is killing me.
#   	rule LogicalOrexpression
#		     LogicalOrexpression '||' LogicalAndexpression  /     LogicalAndexpression
#	end

   	rule LogicalOrexpression
		     LogicalAndexpression / LogicalOrexpression '||' LogicalAndexpression  #/     LogicalAndexpression
	end
   	rule LogicalAndexpression
		     Equalityexpression / LogicalAndexpression '&&' Equalityexpression  #/     Equalityexpression
	end
   	rule Equalityexpression
			# again
		     #Inequalityexpression / Equalityexpression eqop Inequalityexpression  #/     Inequalityexpression
		     Inequalityexpression eqop Equalityexpression /     Inequalityexpression
		
	end
	rule eqop
		Spacing EqualityOperator Spacing
	end
  	rule EqualityOperator
		     '=='  /     '!='  /     '<>'   
	end
   	rule Inequalityexpression
		  #Shiftexpression / Inequalityexpression ineq Shiftexpression  #/  Shiftexpression
		  Shiftexpression ineq Inequalityexpression /  Shiftexpression
	end
	rule ineq
		Spacing InequalityOperator Spacing
	end
  	rule InequalityOperator
		     '<'  /     '>'  /     '<='  /     '>='   
	end
   	rule Shiftexpression
		     Additiveexpression / Shiftexpression ShiftOperator Additiveexpression  #/     Additiveexpression
	end
  	rule ShiftOperator
		     '<<'  /     '>>'   
	end
   	rule Additiveexpression
		## NOTE: I had to totally invert this and will probably have to do so for all these left-recursive constructs.
		     #Multiplicativeexpression / Additiveexpression Spacing AdditiveOperator Spacing Multiplicativeexpression  #/     Multiplicativeexpression
		     Multiplicativeexpression addop Additiveexpression  /     Multiplicativeexpression
	end
  	rule AdditiveOperator
		     Spacing '+'  Spacing /     '-'   
	end
   	rule Multiplicativeexpression
		     #Unaryexpression /  Multiplicativeexpression multop Unaryexpression  #/     Unaryexpression
			Unaryexpression multop Multiplicativeexpression / Unaryexpression
	end
	rule multop
		Spacing MultiplicativeOperator Spacing
	end
	rule addop
		Spacing AdditiveOperator Spacing
	end
  	rule MultiplicativeOperator
		     '*'  /     '/'  /     '%'   
	end
  	rule Unaryexpression
		     Castexpression  /     LogicalNegationexpression  /     Inclusiveexpression  /     Postfixexpression
	end
  	rule LogicalNegationexpression
		  '!' Unaryexpression   
	end
  	rule Castexpression
		  '(' Type ')' Unaryexpression   
	end
  	rule Inclusiveexpression
		  Primaryexpression 'in' Rangeexpression  /  Primaryexpression 'in' Variable   
	end
  	rule Rangeexpression
		  LeftRangeOperator expression ',' expression RightRangeOperator   
	end
  	rule LeftRangeOperator
		     '['  /     '('   
	end
  	rule RightRangeOperator
		     ']'  /     ')'   
	end
  	rule Postfixexpression
		     Primaryexpression / Postfixexpression '.' name Reference  /     Postfixexpression arguments Method  /     Postfixexpression '[' Constant ']' ArrayIndex  /     Postfixexpression '++' Increment  /     Postfixexpression '--' Decrement  #/     Primaryexpression   

	end
  	rule Primaryexpression
		    #(Location Spacing / Aggregate Spacing / Constant Spacing / Alias Spacing  /     Variable Spacing  /     NewClass Spacing  /  Referencename Spacing  # / Constant Spacing  
		#	/     opar expression cpar )

		    (Location Spacing / Aggregate Spacing / opar expression cpar / Constant Spacing / Alias Spacing  /     Variable Spacing  /     NewClass Spacing  /  Referencename Spacing)
				{
					def Primaryexpression
						return self
					end
				}
	end
   	rule arguments
		     opar (expressionList) cpar  /     opar cpar   
			{
				#def arguments 
				#	return self
				#end
				def value 	
					return expressionList.value
				end
			}
	end
  	rule NewClass
		  'new' Typename   
	end
  	rule Referencename
		  name   
	end
     	rule Alias
		  Variable ':=' '$' IntegerConstant   
	end
     	rule name
		  Word
	end
  	rule Word
		  Spacing (WordCharacters) Spacing   
			{
				def Word
					return self
				end 
				def value 
					return text_value
				end
			}
	end
	rule WordCharacters
		[a-zA-Z0-9_]*
	end
   	rule Spacing
		     (Space  /  LineTerminator  /  TraditionalComment  /  EndOfLineComment)*    
	end
   	rule Space
		#' '  /  '\t'  /  '\f'   
		[ \t\f]
	end
   	rule TraditionalComment
		  '/*'    ('*' !'/'  /  !'*'  .   )*  '*/'   
	end
   	rule EndOfLineComment
		  '//'    (![\n\r]  .   )*     (LineTerminator ) ##  /  &EndOfFile   )   
	end
   	rule LineTerminator
		  #'\r' '\n'  /  '\r'  /  '\n'   
		 '\r\n' / Newline
			{
				def LineTerminator
					#@@lines = @@lines + 1
					return self
				end
			}
	end
	rule Newline
		[\r\n]
	end
   	rule EndOfFile
		  !.   
	end

	rule Comma
		Spacing "," Spacing
	end 
     	rule name
		  Word   
	end
  	rule Word
		  #Spacing WordCharacters Spacing   
			WordCharacters
	end
  	rule EventModifier
		  '#' EventType   
	end
  	rule EventType
		     'insert'  /     'delete'   
	end
  	rule Tablename
		  name '::' name  /  name
	end
  	rule Variable
		  name   /  '_'  /  '*'   
	end
  	rule Location
		  '@' Variable   
	end
  	rule Aggregate
		  name '<' AggregateVariable '>'   
		{
			def func
				return name
			end
			
		}
	end
  	rule AggregateVariable
		     Location  /     Variable   
	end
  	rule AttributePosition
		  '$' [0-9]+  Spacing   
	end
  	rule Type
		     Typename Dimensions?  Spacing   
	end
  	rule Typename
		     PrimitiveType  /     ClassType   
	end
  	rule PrimitiveType
		     'byte'  /     'short'  /     'char'  /     'string'  /     'int'  /     'long'  /     'float'  /     'double'  /     'boolean'   
	end
  	rule Dimensions
		     ('[' [0-9]*  ']'   )+    
	end
  	rule ClassType
		  name    ('.' name   )*    
	end
     	rule Constant
		 StringConstant Spacing / FloatConstant Spacing  /  LongConstant Spacing  /  IntegerConstant Spacing  /   NullConstant Spacing  /  BooleanConstant Spacing  /  InfinityConstant Spacing  /  Vector Spacing  /  Matrix Spacing   

	end
     	rule ConstantList
		  Constant    (',' Constant   )*    
	end
  	rule FloatConstant
		  FloatingPointString   
	end
     	rule FloatList
		  FloatConstant    (',' FloatConstant   )*    
	end
  	rule FloatingPointString
		  Digit+  '.' Digit+  Exponent?  FloatTypeSuffix?   /  '.' Digit+  Exponent?  FloatTypeSuffix?   /  Digit+  Exponent FloatTypeSuffix?   /  Digit+  Exponent?  FloatTypeSuffix   
	end
   	rule Exponent
		  [eE] [+\-]?  Digit+    
	end
   	rule FloatTypeSuffix
		  [fFdD]   
	end
  	rule IntegerConstant
		  HexConstant  /  DecimalConstant   
	end
  	rule LongConstant
		  DecimalConstant LongTypeSuffix   
	end
     	rule IntegerList
		  IntegerConstant    (',' IntegerConstant   )*    
	end
   	rule HexConstant
		  HexNumeral HexTypeSuffix?    
	end
   	rule DecimalConstant
		  '-'?  DecimalNumeral   
	end
   	rule DecimalNumeral
		  '0'  /  NonZeroDigit Digit*    
	end
   	rule NonZeroDigit
		  [1-9]   
	end
   	rule Digit
		  [0-9]   
	end
   	rule HexNumeral
		  '0' [xX] HexDigit+    
	end
   	rule HexDigit
		  [0-9a-fA-F]   
	end
   	rule LongTypeSuffix
		  [lL]   
	end
   	rule HexTypeSuffix
		  [UI]   
	end
  	rule StringConstant
		  CharacterSequence   
	end
  	rule CharacterSequence
		  ["]    (EscapeSequence  /  !["\\]  . )*  ["]   
	end
   	rule EscapeSequence
		  '\\' [btnfr"'\\]   
	end
  	rule BooleanConstant
		  'true'  /  'false'   
	end
  	rule InfinityConstant
		  'infinity'   
	end
  	rule NullConstant
		  'null'   
	end
  	rule Vector
		  IntVector  /  FloatVector   
	end
  	rule IntVector
		  '{' IntegerList '}'   
	end
  	rule FloatVector
		  '{' FloatList '}'   
	end
  	rule Matrix
		  IntMatrix  /  FloatMatrix   
	end
  	rule IntMatrix
		  '{' IntMatrixEntries '}'   
	end
  	rule FloatMatrix
		  '{' FloatMatrixEntries '}'   
	end
     	rule IntMatrixEntries
		  IntVector    (',' IntVector   )*    
	end
     	rule FloatMatrixEntries
		  FloatVector    (',' FloatVector   )*    
	end
 end
