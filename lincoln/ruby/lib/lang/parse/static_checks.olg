program static_checks;

import java.lang.String;
import java.lang.Integer;




// (rule, predicate, position, name, type)
define(terms,keys(0,1,2,3),{Integer,Integer,Integer,String,Integer});
// (id,name)
define(table,keys(0),{Integer,String});
// (rule,id,name)
define(predicate,keys(0,1),{Integer,Integer,String,Integer});
// (table,id,name)
define(column,keys(0,1),{Integer,Integer,String});
// (table,id)
define(index,keys(0,1),{Integer,Integer});
// (rule,id,expression)
define(assign,keys(0,1),{Integer,Integer,String});
// (rule,id,expression)
define(select,keys(0,1),{Integer,Integer,String});
// (rule,id,info,type)
define(objects,keys(0,1),{Integer,Integer,String,String});
// (rule,id,expression)
define(expression,keys(0,1),{Integer,Integer,String});

define(join,keys(0,1,2,3),{Integer,String,Integer,Integer,Integer,Integer});
define(prettyJoin,keys(0,1,2),{Integer,String,String,String,Integer,Integer});

define(headTerms,keys(0,1),{Integer,String});
define(bodyTerms,keys(0,1),{Integer,String});

define(constantInHead,keys(0,1,2),{Integer,String,Integer});
define(maxAssign,keys(0),{Integer,Integer});
// tablename, type (-1 = schema, otherwise rule for predicate)
define(colCnt,keys(0,1),{String,Integer});
define(predCnt,keys(0,1,2),{String,Integer,Integer,Integer});

define(dependency,keys(0,1),{String,String,Integer});

// (rule,predid,cnt)
define(tupleCnt,keys(0,1),{Integer,Integer,Integer});
define(inBody,keys(0,1),{Integer,String});
define(error,keys(0,1,2),{Integer,String,String,Integer});


watch(prettyJoin,id);
//watch(assign,id);
watch(error,id);
watch(dependency,id);
//watch(table,id);
//watch(colCnt,id);
//watch(predCnt,id);
//watch(terms,id);
//watch(objects,id);
//watch(predicate,id);
//watch(headTerms,id);
//watch(inBody,id);



/***  SAFETY ***/
inBody(Rule,Name) :- terms(Rule,Id,Pos,Name,Type),
						//// get back to ordinals starting with 1!
						Id > 0,
						predicate(Rule,Id,_,Notin),
						Notin == 0;

inBody(Rule,Name) :- assign(Rule,Id,Expr),
					 terms(Rule,Id,Pos,Name,Type),
					 Pos > 0;
					 

headTerms(Rule,Name) :- terms(Rule,0,Pos,Name,Type), 
						Type == "var",
						/* necessary to ensure that inBody has reached fixpoint */
						periodic(Id,4L,4L,4L);
						
															 				
error(Rule,Name,"Unsafe: unbound variable in head",-1) :- 
								headTerms(Rule,Name),
								notin inBody(Rule,Name);		 				

// ARITY

// schema
colCnt(Name,count<*>) :- table(Table,Name),
						column(Table,Ord,Column);
						
predCnt(Pname,Rule,Id,count<*>) :- terms(Rule,Id,Pos,Name,Type),
										predicate(Rule,Id,Pname,Notin);					


error(-1,Name,"Schema - Predicate arity mismatch",Cnt2) :- colCnt(Name,Cnt1),
												predCnt(Name,_,_,Cnt2),
												Cnt1 != Cnt2;

// this one is clearly redundant in the java version.  but in the c++ p2, 
// there can be undeclared event tables that nevertheless need to self-agree
// in arity.												
error(-1,Name,"Predicate - Predicate arity mismatch",Cnt2) :- predCnt(Name,_,_,Cnt1),
															  predCnt(Name,_,_,Cnt2),
															  Cnt1 != Cnt2;											
																								
//  DEPENDENCIES
// we do not group by rule -- going across rules is the whole point
dependency(A,B,Notin) :-  predicate(Rule,0,A,_),
						predicate(Rule,Ordinal,B,Notin),	
						Ordinal > 0;
						
// transitive closure... any negative dependencies propagate.				
dependency(A,B,Notin) :- predicate(Rule,0,A,_),
						predicate(Rule,Ordinal,C,Notin1),
						dependency(C,B,Notin2),	
						Ordinal > 0,
						Notin := (Notin1 || Notin2) ? 1 : 0;						
					
					

//  EQUIJOINS 

join(Rule,Name,Pred1,Pred2,Pos1,Pos2) :- terms(Rule,Pred1,Pos1,Name,Type),
									terms(Rule,Pred2,Pos2,Name,Type),
									Pred1 < Pred2;
									

prettyJoin(Rule,Name,Pred1,Pred2,Pos1,Pos2) :- join(Rule, Name,Pn1,Pn2,Pos1,Pos2),
										  predicate(Rule,Pn1,Pred1,Notin),
										  predicate(Rule,Pn2,Pred2,Notin2);




												