program static_checks;

import java.lang.String;
import java.lang.Integer;
	column(0,0,"String");
column(0,1,"String");
table(0,"link");
column(1,2,"String");
column(1,3,"String");
column(1,4,"Integer");
table(1,"path");
column(2,5,"String");
column(2,6,"String");
column(2,7,"Integer");
fact(-1,"link");
terms(-1,0,0,"1","const");
terms(-1,0,1,"2","const");
fact(0,"link");
terms(-1,1,0,"2","const");
terms(-1,1,1,"3","const");
fact(1,"link");
terms(-1,2,0,"3","const");
terms(-1,2,1,"4","const");
fact(2,"link");
terms(-1,3,0,"2","const");
terms(-1,3,1,"4","const");
fact(3,"link");
terms(-1,4,0,"5","const");
terms(-1,4,1,"6","const");
fact(4,"link");
terms(-1,5,0,"6","const");
terms(-1,5,1,"7","const");
fact(5,"link");
terms(-1,6,0,"7","const");
terms(-1,6,1,"8","const");
fact(6,"link");
terms(-1,7,0,"8","const");
terms(-1,7,1,"9","const");
//rule(0,"path(Source, Destination, 1) :- link(Source, Destination)");
predicate(0,0,"path",0);
objects(0,0,0,"path","predicate");
terms(0,0,0,"Source","var");
terms(0,0,1,"Destination","var");
terms(0,0,2,"1","const");
predicate(0,1,"link",0);
objects(0,1,1,"link","predicate");
terms(0,1,0,"Source","var");
terms(0,1,1,"Destination","var");
//rule(1,"path(Source, Destination, Hops+1) :- \n	path(Source, Intermediate, Hops), link(Intermediate, Destination)");
predicate(1,0,"path",0);
objects(1,0,0,"path","predicate");
terms(1,0,0,"Source","var");
terms(1,0,1,"Destination","var");
terms(1,0,2,"Hops+1","expr");
objects(1,1,-1,"buh","expression");
expression(1,1,"Hops+1");
terms(1,1,0,"Hops","var");
terms(1,1,1,"1","const");
predicate(1,2,"path",0);
objects(1,2,1,"path","predicate");
terms(1,2,0,"Source","var");
terms(1,2,1,"Intermediate","var");
terms(1,2,2,"Hops","var");
predicate(1,3,"link",0);
objects(1,3,2,"link","predicate");
terms(1,3,0,"Intermediate","var");
terms(1,3,1,"Destination","var");
//rule(2,"shortestPath(Source, Destination, min<Hops>) :- \n	path(Source, Destination, Hops)");
predicate(2,0,"shortestPath",0);
objects(2,0,0,"shortestPath","predicate");
terms(2,0,0,"Source","var");
terms(2,0,1,"Destination","var");
predicate(2,1,"path",0);
objects(2,1,1,"path","predicate");
terms(2,1,0,"Source","var");
terms(2,1,1,"Destination","var");
terms(2,1,2,"Hops","var");
//rule(3,"delete link(2, 4) :- periodic(Id, 1L, 1L, 5L)");
predicate(3,0,"link",0);
objects(3,0,0,"link","predicate");
terms(3,0,0,"2","const");
terms(3,0,1,"4","const");
predicate(3,1,"periodic",0);
objects(3,1,1,"periodic","predicate");
terms(3,1,0,"Id","var");
terms(3,1,1,"1L","const");
terms(3,1,2,"1L","const");
terms(3,1,3,"5L","const");
