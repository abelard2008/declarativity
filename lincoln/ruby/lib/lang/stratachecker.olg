program strataChecker;

/*
import jol.core.Log;
import jol.types.table.TableName;
import java.lang.String;
import java.lang.Integer;
*/

define(error, {String, String, TableName, Integer, TableName, Integer});

/* Verify strata for notin predicates. */
public
error(Program, Rule, Pname, ParentStrata, Cname, ChildStrata) :-
	compile::checkStrata(Program, Predicates),
	predicate(Program, Rule, 0, Event, Parent), 
	predicate(Program, Rule, Pos, Event, Child), 
	Pos > 0, Child.notin(),
	Pname := Parent.name(),
	Cname := Child.name(),
	runtime::priority(Program, Pname, ParentStrata),
	runtime::priority(Program, Cname, ChildStrata),
	ParentStrata <= ChildStrata;
	
/* Verify strata for aggregation predicates. */
public
error(Program, Rule, Parent, ParentStrata, Hname, HeadStrata) :-
	compile::checkStrata(Program, Predicates),
	predicate(Program, Rule, 0, Event, Head), 
	Head.containsAggregation(),
	Hname := Head.name(),
	compile::dependency(Program, Parent, Hname),
	runtime::priority(Program, Hname, HeadStrata),
	runtime::priority(Program, Parent, ParentStrata),
	ParentStrata <= HeadStrata;
	
	
log("WARNING", Msg) :-
	error(Program, Rule, Parent, ParentStrata, Child, ChildStrata),
	clock(Location, Time),
/*	Msg := "Program " + Program + ", RULE " + Rule +
	       ": strata error Predicate " + 
	       Parent.to_s + " is assigned to strata " + ParentStrata.to_s + 
	       " but depends on predicate " + Child.to_s + " in strata " + ChildStrata.to_s; */
	  Msg := "Bite me, died in stratachecker";
	