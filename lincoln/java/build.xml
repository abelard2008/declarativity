<?xml version="1.0"?>
<project name="jol" default="dist" basedir=".">
  <description>
    An Ant build file for the Java Overlog Library (JOL) implementation.
  </description>

  <property name="src" location="src"/>
  <property name="build" location="ant-build"/>
  <property name="dist"  location="ant-dist"/>
  <property name="lib" location="lib"/>
  <property name="parser-dir" location="${src}/jol/lang/parse"/>

  <target name="init">
    <tstamp/>
    <mkdir dir="${build}"/>
  </target>

  <!-- Check if we need to re-run Rats -->
  <target name="rats-freshness">
    <uptodate property="rats.up-to-date"
              srcfile="${parser-dir}/Parser.rats"
              targetfile="${parser-dir}/Parser.java"/>
  </target>

  <target name="rats" depends="rats-freshness" unless="rats.up-to-date">
    <echo message="Regenerating Overlog parser using Rats..."/>

    <java classname="xtc.parser.Rats" classpath="${lib}/xtc.jar" >
      <arg line="-in ${parser-dir}"/>
      <arg line="-out ${parser-dir}"/>
      <arg value="-lgpl"/>
      <arg value="-no-exit"/>
      <arg value="${parser-dir}/Parser.rats"/>
    </java>
  </target>

  <target name="compile" depends="init,rats" description="compile the source">
    <javac srcdir="${src}" classpath="${lib}/xtc.jar" destdir="${build}" debug="yes"/>
  </target>

  <target name="dist" depends="compile" description="generate a JAR file">
    <mkdir dir="${dist}"/>
  	<!--
  	  We want to redistribute the contents of the XTC JAR file with the
  	  JOL JAR. Since the default Java classloader doesn't support nested
  	  JAR files, it seems the easiest way to do this is to expand the
  	  XTC JAR and add its contents to our JAR. XXX: This makes us GPL,
  	  by contamination. The full XTC JAR is also pretty large. It would
  	  be better to depend only on LGPL'd Rats files.
  	-->
  	<mkdir dir="${dist}/rats_tmp"/>
  	<unzip src="${lib}/xtc.jar" dest="${dist}/rats_tmp"/>
    <jar jarfile="${dist}/jol.jar">
      <fileset dir="${build}"/>
      <!-- Include the OLG files we need to bootstrap JOL in the JAR -->
      <fileset dir="${src}" includes="**/*.olg"/>
      <!-- Include the RATS runtime files we just expanded above -->
      <fileset dir="${dist}/rats_tmp" includes="xtc/**"/>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Main-Class" value="jol.core.Runtime"/>
      </manifest>
    </jar>
  	<delete dir="${dist}/rats_tmp"/>
  </target>

  <target name="clean" description="clean up">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
</project>
