program gfs;

import jol.types.basic.ValueList;
import gfs.Master;

// Node, Master node
define(master_for_node, keys(0, 1), {String, String});

// Right now, every node has the same master. We leave the master undefined
// on the master node itself.
master_for_node(Self, Master) :-
    self(Self), Master := Master.ADDRESS, Self != Master;

// Node, File name, Contents
define(file, keys(0, 1), {String, String, String});

file(Master.ADDRESS, "Foo", "Bar");
file(Master.ADDRESS, "Bar", "Baz");
file(Master.ADDRESS, "Quux", "Quuux");

// Source node, Request ID, File name
define(cat_request, keys(0, 1), {String, Integer, String});

// Source node, Request ID, File name, File content
define(create_request, keys(0, 1), {String, Integer, String, String});

// Source node, Request ID
define(ls_request, keys(0, 1), {String, Integer});

// Source node, Request ID, File name
define(rm_request, keys(0, 1), {String, Integer, String});

// Source node, Request ID, Request type, Arg1, Arg2
define(request_started, keys(0, 1), {String, Integer, String, String, String});

// Master node, Request ID, Source node, Request type, Arg1, Arg2
define(request, keys(0, 1), {String, Integer, String, String, String, String});

// Master node, Request Id, Source node, Success?, Response
define(cat_request_done, keys(0, 1), {String, Integer, String, Boolean, String});
define(create_request_done, keys(0, 1), {String, Integer, String, Boolean, String});
define(ls_request_done, keys(0, 1), {String, Integer, String, ValueList});
define(rm_request_done, keys(0, 1), {String, Integer, String, Boolean, String});

// Node, Request ID, Success, File contents
define(cat_response, keys(0, 1), {String, Integer, Boolean, String});

// Node, Request ID, Success, Error message (on failure)
define(create_response, keys(0, 1), {String, Integer, Boolean, String});

// Node, Request ID, Listing contents
define(ls_response, keys(0, 1), {String, Integer, ValueList});

// Node, Request ID, Success, Error message (on failure)
define(rm_response, keys(0, 1), {String, Integer, Boolean, String});

request_started(@Source, Id, "Cat", FName, null) :-
    cat_request(@Source, Id, FName);

request_started(@Source, Id, "Create", FName, FContent) :-
    create_request(@Source, Id, FName, FContent);

request_started(@Source, Id, "Ls", null, null) :-
    ls_request(@Source, Id);

request_started(@Source, Id, "Rm", FName, null) :-
    rm_request(@Source, Id, FName);

request(@Master, Id, Source, RequestType, Arg1, Arg2) :-
    self(@Source), master_for_node(@Source, Master),
    request_started(@Source, Id, RequestType, Arg1, Arg2);

// If we get a "cat" request for a file that exists, send back the
// contents of the file
cat_request_done(@Master, Id, Source, Success, FContent) :-
    request(@Master, Id, Source, "Cat", FName, _),
    file(@Master, FName, FContent), Success := true;

// If the file doesn't exist, return an error message
cat_request_done(@Master, Id, Source, Success, ErrMessage) :-
    request(@Master, Id, Source, "Cat", FName, _),
    notin file(@Master, FName, _),
    Success := false, ErrMessage := "File does not exist";

// If we got a "create" request for a file that didn't exist,
// send back a positive ack
// XXX: the use of "#insert" here is a hack
create_request_done(@Master, Id, Source, true, null) :-
    request#insert(@Master, Id, Source, "Create", FName, _),
    notin file(@Master, FName, _);

// If we get a "create" request for a file that exists, send
// back a negative ack
// XXX: the use of "#insert" here is a hack
create_request_done(@Master, Id, Source, false, ErrMessage) :-
    request#insert(@Master, Id, Source, "Create", FName, _),
    file(@Master, FName, _),
    ErrMessage := "File already exists";

// If the "create" succeeded, add the file
file(@Master, FName, FContent) :-
    create_request_done(@Master, Id, Source, true, _),
    request(@Master, Id, Source, "Create", FName, FContent);

// If we got an "ls" request, send back the names of all the files in
// the FS
ls_request_done(@Master, Id, Source, generic<(new ValueList()).insert(FName)>) :-
    request(@Master, Id, Source, "Ls", _, _),
    file(@Master, FName, _);
    
// If we got an "rm" request and the file exists, remove it and send
// back a positive ack.
rm_request_done(@Master, Id, Source, true, null) :-
    request(@Master, Id, Source, "Rm", FName, _),
    file(@Master, FName, _);

// If we got an "rm" request and the file doesn't exist, return a
// negative ack. NB: unlike in the "create" case, we don't need the
// "#insert" hack, since deletions are postponed the end of the
// fixpoint.
rm_request_done(@Master, Id, Source, false, ErrMessage) :-
    request(@Master, Id, Source, "Rm", FName, _),
    notin file(@Master, FName, _),
    ErrMessage := "File does not exist";

// If the "rm" succeeded, actually delete the file
// XXX: join against File in the body is unnecessary, but JOL
// complains about a "don't care variable in the head"
delete
file(@Master, FName, FContents) :-
    rm_request_done(@Master, Id, Source, true, _),
    request(@Master, Id, Source, "Rm", FName, _),
    file(@Master, FName, FContents);

cat_response(@Source, Id, Success, Response) :-
    cat_request_done(@Master, Id, Source, Success, Response);

create_response(@Source, Id, Success, Response) :-
    create_request_done(@Master, Id, Source, Success, Response);

ls_response(@Source, Id, Response) :-
    ls_request_done(@Master, Id, Source, Response);

rm_response(@Source, Id, Success, Response) :-
    rm_request_done(@Master, Id, Source, Success, Response);
