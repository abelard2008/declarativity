program gfs;

import jol.types.basic.ValueList;

define(nodes, keys(0), {String});
define(master, keys(0), {String});

// The nodes in the cluster
nodes("tcp:localhost:5500");
nodes("tcp:localhost:5501");

// The address of the master node
master("tcp:localhost:5500");

// Node, Master node
define(master_per_node, keys(0, 1), {String, String});

master_per_node("tcp:localhost:5500", "tcp:localhost:5500");
master_per_node("tcp:localhost:5501", "tcp:localhost:5500");

//master_per_node(@Node, Master) :- master(@Master), nodes(@Node);

// Node, File name, Contents
define(file, keys(0, 1), {String, String, String});

file("tcp:localhost:5500", "Foo", "Bar");
file("tcp:localhost:5500", "Bar", "Baz");
file("tcp:localhost:5500", "Quux", "Quuux");

// Source node, Request ID, Request type, Request arguments
define(request_started, keys(0, 1), {String, Integer, String, String});

// Source node, Request ID, File name
define(cat_request, keys(0, 1), {String, Integer, String});

// Source node, Request ID, File name, File content
define(create_request, keys(0, 1), {String, Integer, String, String});

// Source node, Request ID
define(ls_request, keys(0, 1), {String, Integer});

// Master node, Request Id, Source node, Success, Response
define(cat_request_done, keys(0, 1), {String, Integer, String, Boolean, String});
define(create_request_done, keys(0, 1), {String, Integer, String, Boolean, String});
define(ls_request_done, keys(0, 1), {String, Integer, String, ValueList});

// Node, Request ID, Success, File contents
define(cat_response, keys(0, 1), {String, Integer, Boolean, String});

// Node, Request ID, Success, Error message (on failure)
define(create_response, keys(0, 1), {String, Integer, Boolean, String});

// Node, Request ID, Listing contents
define(ls_response, keys(0, 1), {String, Integer, ValueList});

request_started(@Source, Id, RequestType, Filename) :-
    cat_request(@Source, Id, Filename), RequestType := "Cat";
request_started(@Source, Id, RequestType, Filename) :-
    create_request(@Source, Id, Filename, _), RequestType := "Create";
request_started(@Source, Id, RequestType, "Foo") :-
    ls_request(@Source, Id), RequestType := "Ls";

request(@Master, Id, Source, RequestType, Args) :-
    self(@Source), master_per_node(@Source, Master),
    request_started(@Source, Id, RequestType, Args);

// If we get a "cat" request for a file that exists, send back the
// contents of the file
cat_request_done(@Master, Id, Source, Success, FContent) :-
    request(@Master, Id, Source, "Cat", FName),
    file(@Master, FName, FContent), Success := true;

// If the file doesn't exist, return an error message
cat_request_done(@Master, Id, Source, Success, ErrMessage) :-
    request(@Master, Id, Source, "Cat", FName),
    notin file(@Master, FName, _),
    Success := false, ErrMessage := "File does not exist";

// If we get a "create" request for a file that does not exist,
// create the file and send back a positive ack
create_request_done(@Master, Id, Source, Success, "...") :-
    request(@Master, Id, Source, "Create", FName),
    notin file(@Master, FName, _),
    Success := true;

file(@Master, FName, FContent) :-
    request(@Master, Id, Source, "Create", FName),
    notin file(@Master, FName, _),
    FContent := "test";

// If we get a "create" request for a file that exists, send
// back a negative ack
create_request_done(@Master, Id, Source, Success, ErrMessage) :-
    request(@Master, Id, Source, "Create", FName),
    file(@Master, FName, _),
    Success := false, ErrMessage := "File already exists";

// If we got an "ls" request, send back the names of all the files in
// the FS
ls_request_done(@Master, Id, Source, generic<(new ValueList()).insert(FName)>) :-
    RequestType == "Ls",
    request(@Master, Id, Source, RequestType, _),
    file(@Master, FName, _);

cat_response(@Source, Id, Success, Response) :-
    cat_request_done(@Master, Id, Source, Success, Response);

create_response(@Source, Id, Success, Response) :-
    create_request_done(@Master, Id, Source, Success, Response);

ls_response(@Source, Id, Response) :-
    ls_request_done(@Master, Id, Source, Response);
