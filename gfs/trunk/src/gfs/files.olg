program gfs;

import jol.core.Runtime;
import jol.types.basic.ValueList;
import java.io.File;
import gfs.Conf;

define(file, keys(0,1), {String, String});
define(dir, keys(0), {String, File, ValueList});

timer(clock,physical,5000,5000,1000);
timer(periodic,logical,1,1,1);

watch(dir,ae);
watch(file,ae);

// Node address, data directory on host file system
define(datadir, keys(0), {String,String});
watch(datadir, ae);

dir(Host,DirObj,DirList) :-
    datadir(Host, Dir),
    DirObj := new File(Dir),
    DirList := DirObj.isDirectory() ? new ValueList(DirObj.list()) : new ValueList(),
    clock(_,_,_);

define(indx,keys(0),{String,Integer});
watch(indx,ae);
indx(Host,0) :-   
    dir#insert(Host,Dir,List);

delete
file(Host,File) :-
    file(Host,File),
    dir#insert(Host,Dir,List);

indx(Host,Next) :-
    indx(Host,Old),
    file#insert(Host,File),
    Next := Old + 1;


file(Host,File) :-
    dir(Host,Dir,List),
    indx#insert(Host,I),
    I < List.size(),
    B := List.get(I),
    File := B.toString();


define(heartBeat,keys(0,1,2),{String,String,Integer,Long,Long});
//watch(heartBeat,ae);
heartBeat(Host,Master,Chunk,Tstamp,Id) :-
    file(Host,File),
    Chunk := Integer.valueOf(File),
    masters(Host,Master),
    clock(_,_,_),
    Tstamp := java.lang.System.currentTimeMillis(),
    Id := Runtime.idgen();


heartBeat(Host,Master,-1,Tstamp,-1) :-
    masters(Host,Master),
    clock(_,_,_),
    Tstamp := java.lang.System.currentTimeMillis(),
    Id := Runtime.idgen();


define(sendHeartBeat,keys(0,1,2,3),{String,String,Integer,Long,Long});
watch(sendHeartBeat,ae);
sendHeartBeat(@Master,Host,File,Tstamp,Id) :-
    heartBeat(@Host,Master,File,Tstamp,Id),
    notin serverKnows(@Host,Master,File,_);

define(ackHeartBeat,keys(0,1,2),{String,String,Long});
watch(ackHeartBeat,ae);

define(serverKnows,keys(0,1,2,3),{String,String,Integer,Long});
watch(serverKnows,ae);
serverKnows(Host,Master,File,Id) :-
    heartBeat(Host,Master,File,Tstamp,Id),
    ackHeartBeat#insert(Host,Master,Id);

define(masters,keys(0,1),{String,String});
define(mindx,keys(0),{String,Integer});
watch(masters,ae);
//watch(periodic,ae);

mindx(Me,0) :-
    Me := Conf.getSelfAddress(),
    periodic(_,_,_);

mindx(Host,I) :-
    mindx(Host,Old),
    masters#insert(Host,Master),
    Old < Conf.getNumMasters()-1,
    I := Old + 1;

masters(Host,Master) :-
    mindx#insert(Host,I),
    Master := Conf.getMasterAddress(I);
