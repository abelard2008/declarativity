program gfs;

import java.lang.System;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import jol.core.Runtime;
import gfs.Conf;

define(chunk, keys(0,1), {String, String, String});
define(chunkTmp, {String, String});
define(dir, keys(0,1,2), {String, File, ArrayList});

timer(clock,physical,5000,5000,5000);
timer(periodic,logical,1,1,1);

watch(dir,ae);
//watch(chunk,ae);
//watch(chunkTmp,ae);

// Node address, data directory on host chunk system
define(datadir, keys(0), {String,String});
define(checksumdir, keys(0), {String,String});
watch(datadir, ae);

dir(Host,DirObj,DirList) :-
    datadir(Host, Dir),
    DirObj := new File(Dir + File.separator + "chunks"),
    DirList := DirObj.isDirectory() ? new ArrayList(Arrays.asList(DirObj.list())) : new ArrayList(),
    clock(_,_,_);

define(indx,keys(0),{String,Integer});
//watch(indx,ae);
indx(Host,0) :-
    dir#insert(Host,Dir,List);

/*
delete
chunk(Host,File) :-
    chunk(Host,File),
    dir#insert(Host,Dir,List);
*/

indx(Host, Next) :-
    indx(Host, Old),
    chunkTmp(Host, File),
    Next := Old + 1;

chunkTmp(Host, File) :-
    dir(Host, Dir, List),
    indx(Host, I),
    I < List.size(),
    B := List.get(I),
    File := B.toString();

watch(chunk, ae);
// fix me!
checksumdir(H, D)  :-
    dir(H, FD),
    D := "testdata1/checksums";

chunk(Host, F, Checksum) :-
    Checksum := "foo",
    chunkTmp#insert(Host, F); /*,
    datadir(Host, Dir),
    CSO := new gfs.ChunkCheckSum();
    Checksum := CSO.checksum();
    */



define(heartBeat,keys(0,1,2),{String,String,Integer,Long,Long});
//watch(heartBeat,ae);
heartBeat(Host, Master, Chunk, Tstamp, Id) :-
    chunk(Host, File, Checksum),
    Chunk := Integer.valueOf(File),
    masters(Host,Master),
    clock(_,_,_),
    Tstamp := System.currentTimeMillis(),
    Id := Runtime.idgen();

heartBeat(Host,Master,-1,Tstamp,-1) :-
    masters(Host,Master),
    clock(_,_,_),
    Tstamp := System.currentTimeMillis(),
    Id := Runtime.idgen();


define(sendHeartBeat,keys(0,1,2,3),{String,String,Integer,Long,Long});
//watch(sendHeartBeat,ae);
sendHeartBeat(@Master,Host,File,Tstamp,Id) :-
    heartBeat(@Host,Master,File,Tstamp,Id),
    notin serverKnows(@Host,Master,File,_);

define(ackHeartBeat,keys(0,1,2),{String,String,Long});
//watch(ackHeartBeat,ae);

define(serverKnows,keys(0,1,2,3),{String,String,Integer,Long});
watch(serverKnows,ae);
serverKnows(Host,Master,File,Id) :-
    heartBeat(Host,Master,File,Tstamp,Id),
    ackHeartBeat#insert(Host,Master,Id);

define(masters,keys(0,1),{String,String});
define(mindx,keys(0),{String,Integer});
//watch(masters,ae);
//watch(mindx,ae);
//watch(periodic,ae);

mindx(Me,0) :-
    //Me := Conf.getSelfAddress(),
    dir(Me,_),
    periodic(_,_,_);

mindx(Host,I) :-
    mindx(Host,Old),
    masters#insert(Host,Master),
    Old < Conf.getNumMasters()-1,
    I := Old + 1;

masters(Host,Master) :-
    mindx#insert(Host,I),
    Master := Conf.getMasterAddress(I);

define(send_delete, keys(0), {String, Integer, String});
watch(send_delete, ae);
