program paxos_client_liveness;

/* the purpose of this program is to encapsulate the liveness component of paxos, so that the module responsible
   for correctness can remain uncluttered.  the basic idea is 
*/

define(livelog,keys(0,1,2,3),{String,String,String,Long,Long});
//define(timeError,keys(0,1,2,3),{String,String,String,Long});
define(timeError,{String,String,String,Long});
//define(timeIssue,keys(0,1,2,3),{String,String,String,Long});
define(timeIssue,{String,String,String,Long});
define(timeout,keys(0),{Long,Integer});
// a lazy timer that we'll change later.
timer(tick,physical,0,1000,0);

watch(livelog,ad);
watch(timeError,ad);
watch(timeIssue,ad);
//watch(paxos_global::decreeRequestbuffer,ae);

timeout(5000L,8);


public
livelog(Master,Client,Request,Id,Time) :- 
  paxos::storedDecreeRequest#insert(Master,Request,Client,Id),
  Time := System.currentTimeMillis();

public
timeIssue(Master,Client,Request,Id) :-
  livelog(Master,Client,Request,Id,Time),
  tick(_,_,_),
  Now := new Long(System.currentTimeMillis()),
  timeout(Timeout),
  notin paxos::decree(Master,Instance,Round,Request),
  notin timeIssue(_,_,_,Id),
  (Now - Time) > Timeout;

public
timeError(Master,Client,Request,Id) :-
  livelog(Master,Client,Request,Id,Time),
  tick(_,_,_),
  Now := new Long(System.currentTimeMillis()),
  timeout(Timeout,Times),
  notin paxos::decree(Master,Instance,Round,Request),
  (Now - Time) > (Timeout * Times);

delete
timeIssue(Master,Client,Request,Id) :-
  timeError(Master,Client,Request,Id);

delete 
livelog(Master,Client,Request,Id,Time) :-
  livelog(Master,Client,Request,Id,Time),
  timeError(Master,Client,Request,Id);

public
paxos_global::decreeRequestBuffer(Master,Request,Client) :-
  timeIssue#insert(Master,Client,Request,Id);//,
 // paxos::storedDecreeRequest(Master,Request,Client,Id);

public 
paxos_global::requestStatus(Master,Client,Decree,Status) :-
  timeError(Master,Client,Decree,Id),
  Status := "timeout";

