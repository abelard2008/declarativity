program alive;

import java.lang.System;

/* implements a naive, partially synchronous liveness detector */

// z = heartbeat timer = 3secs
timer(zTimer,2000,2000);
// c = check timer = 10secs
//timer(cTimer,0,10000);

define(alive,keys(0),{String});
define(parliament,keys(0,1),{String,String});
define(threshold,keys(0),{Long});

// 12 seconds: very generous
threshold(9L);

define(heartbeat,{String,String});
define(zTick,{String});

//watch(heartbeat,ae);
watch(alive,ae);
//watch(zTick,ae);
//watch(parliament,ae);
watch(beatLog,ae);
watch(alive,ae);


zTick(Ip) :- 
  ident(Me,_),
  B := Me + 10000,
  Ip := "tcp:localhost:"+B.toString(),
  zTimer(_,_,_);
  

heartbeat(@Him,Me) :-
  parliament(@Me,Him),
  zTick(@Me);

define(beatLog,keys(0,1,2),{String,String,Long});

beatLog(Me,Him,Time) :-
  heartbeat(Me,Him),
  Time := System.currentTimeMillis();


// the next two rules are synchronized on the cTimer

alive(Him) :- 
  beatLog(Me,Him,Time),
  zTimer(_,_,_),
  threshold(Thresh),
  Now := new Long(System.currentTimeMillis()),
  (Now - Time) < Thresh;

// this is just to emulate soft-state!  
delete 
beatLog(Me,Him,Time) :-
  zTimer(_,_,_),
  Now := new Long(System.currentTimeMillis()),
  beatLog(Me,Him,Time),
  (Now - Time) > 10000L; // 10 secs: soft state: NOT a critical parameter as long as it is high enough.






/* getopt, if you will */

define(ident,keys(0),{Integer,Integer});

ident(A,P) :- A := new Integer(System.getenv("ME")),
  P := new Integer(System.getenv("PROC")),
  periodic(Id,1L,1L,1L);

define(fake,keys(0,1),{Integer,Integer});
 
fake(A,0) :- ident(A,P),B := A;
fake(A,O+1) :- ident(A,P),
  fake(A,O),
  O < P;
 
parliament(Me,Him) :- fake(A,B),
  Left := A + 10000,
  Right := B + 10000,
  Me := "tcp:localhost:" + Left.toString(),
  Him := "tcp:localhost:" + Right.toString();


