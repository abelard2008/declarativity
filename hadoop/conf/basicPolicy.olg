program policy;

import java.util.Set;
import jol.types.basic.ValueList;
import org.apache.hadoop.mapred.declarative.Constants;
import org.apache.hadoop.mapred.declarative.util.Function;
import org.apache.hadoop.mapred.declarative.util.FileInput;
import org.apache.hadoop.mapred.JobID;
import org.apache.hadoop.mapred.TaskID;

define(candidate,      {JobID, TaskID, Constants.TaskType, String, ValueList});
define(mapSlots,       {String, Integer, Set});
define(reduceSlots,    {String, Integer, Set});
define(scheduleTask,   {String, TaskID});

/******************** Task Statistics *******************/
/* Task Progress stores the min, max, avg progress for a jobs tasks. */
define(taskProgress, keys(0,1), {JobID, Constants.TaskType, Float, Float, Float});

/*
public
taskProgress(JobId, Type, min<Progress>, max<Progress>, avg<Progress>) :-
	jobtracker::task#insert(JobId, TaskId, Type, _, _, _, Status),
	Status.state() == Constants.TaskState.RUNNING || Status.state() == Constants.TaskState.SUCCEEDED, 
	Progress := Status.progress();
*/
	
/******************** Signal to schedule a task *******************/
	
scheduler::schedule(JobId, TaskId, TrackerName) :-
	scheduleTask(TrackerName, TaskId),
	jobtracker::task(JobId, TaskId, _, _, _, _, _);

scheduleTask(TrackerName, TaskId) :-
	assignTracker(mapSlots(TrackerName, Maps, Tasks)),
	TaskId := (TaskID) Tasks;
	
scheduleTask(TrackerName, TaskId) :-
	assignTracker(reduceSlots(TrackerName, Reduces, Tasks)),
	TaskId := (TaskID) Tasks;
	
/******************** Schedule Map Tasks *******************/

/* Schedule task on tracker from flattened priorities. */
public
mapSlots(TrackerName, Maps, set<TaskId>) :-
	arg(candidate(JobId, TaskId, Type, TrackerName, min<Priority>)),
	scheduler::trackerSlots(TrackerName, Host, _, Maps, Reduces),
	Type == Constants.TaskType.MAP, Maps > 0;
	
/******************** Schedule Reduce Tasks *******************/
	
public
reduceSlots(TrackerName, Reduces, set<TaskId>) :-
	arg(candidate(JobId, TaskId, Type, TrackerName, min<Priority>)),
	scheduler::trackerSlots(TrackerName, Host, _, Maps, Reduces),
	Type == Constants.TaskType.REDUCE, Reduces > 0;
	
/**************************************************************/

/* Priority 1: Schedule unassigned map tasks. */
public
candidate(JobId, TaskId, Type, TrackerName, Priority) :-
	scheduler::trackerSlots(TrackerName, Host, _, Maps, Reduces),
	jobtracker::jobQueue(JobId, JPriority, SubmitTime, Type),
	jobtracker::task(JobId, TaskId, Type, _, _, _, Status),
	jobtracker::taskFileLocation(JobId, TaskId, FileLocation),
	Status.state() == Constants.TaskState.UNASSIGNED,
	Type == Constants.TaskType.MAP, Maps > 0
	{
		LocalFile := Host == FileLocation ? 0 : 1;
		Priority := [JPriority, SubmitTime, 1, LocalFile];
	};

/* Priority 1: Schedule unassigned reduce tasks. */
public
candidate(JobId, TaskId, Type, TrackerName, Priority) :-
	scheduler::trackerSlots(TrackerName, Host, _, Maps, Reduces),
	jobtracker::jobQueue(JobId, JPriority, SubmitTime, Type),
	jobtracker::task(JobId, TaskId, Type, _, _, _, Status),
	Status.state() == Constants.TaskState.UNASSIGNED,
	Type == Constants.TaskType.REDUCE, Reduces > 0
	{
		Priority := [JPriority, SubmitTime, 1];
	};
	
/* Priority 2: Schedule failed map tasks. */
public
candidate(JobId, TaskId, Type, TrackerName, Priority) :-
	scheduler::trackerSlots(TrackerName, Host, _, Maps, Reduces),
	jobtracker::jobQueue(JobId, JPriority, SubmitTime, Type),
	jobtracker::task(JobId, TaskId, Type, _, _, _, Status),
	jobtracker::taskFileLocation(JobId, TaskId, FileLocation),
	Status.state() == Constants.TaskState.FAILED, Status.attempts() < 3, 
	notin jobtracker::taskAttempt(JobId, TaskId, _, _, Constants.TaskState.FAILED, _, _, TrackerName, _, _, _,_,_),
	Type == Constants.TaskType.MAP, Maps > 0 
	{
		LocalFile := Host == FileLocation ? 0 : 1;
		Priority := [JPriority, SubmitTime, 2, LocalFile];
	};

/* Priority 2: Schedule failed reduce tasks. */
public
candidate(JobId, TaskId, Type, TrackerName, Priority) :-
	scheduler::trackerSlots(TrackerName, Host, _, Maps, Reduces),
	jobtracker::jobQueue(JobId, JPriority, SubmitTime, Type),
	jobtracker::task(JobId, TaskId, Type, _, _, _, Status),
	Status.state() == Constants.TaskState.FAILED, Status.attempts() < 3, 
	notin jobtracker::taskAttempt(JobId, TaskId, _, _, Constants.TaskState.FAILED, _, _, TrackerName, _, _, _,_,_),
	Type == Constants.TaskType.REDUCE, Reduces > 0 
	{
		Priority := [JPriority, SubmitTime, 2];
	};
	
/* Priority 3: Speculative task execution on the min priority job. */
/*
public
candidate(JobId, TaskId, Type, TrackerName, Priority) :-
	scheduler::trackerSlots(TrackerName, Host, _, Maps, Reduces),
	jobtracker::jobQueue(JobId, JPriority, JobSubmitTime, Type),
	jobtracker::task(JobId, TaskId, Type, _, _, _, Status),
	taskProgress(JobId, Type, MinProgress, MaxProgress, AvgProgress), 
	notin jobtracker::taskAttempt(JobId, TaskId, _, _, Constants.TaskState.FAILED, _, _, TrackerName, _, _, _,_,_),
	Status.state() == Constants.TaskState.RUNNING,
	Type == Constants.TaskType.MAP && Maps > 0 || Type == Constants.TaskType.REDUCE && Reduces > 0,
	(java.lang.System.currentTimeMillis() - JobSubmitTime) > 60000L,
	Status.progress() < AvgProgress - 0.2,
	Priority := [JPriority, SubmitTime, 3];
	*/
	
	
