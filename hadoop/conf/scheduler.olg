program scheduler;

import java.lang.String;
import java.lang.Integer;
import java.lang.Float;
import java.lang.System;
import jol.types.basic.ValueList;
import org.apache.hadoop.mapred.declarative.Constants;
import org.apache.hadoop.mapred.TaskTrackerAction;
import org.apache.hadoop.mapred.declarative.util.Function;
import org.apache.hadoop.mapred.declarative.util.JobState;
import org.apache.hadoop.mapred.JobPriority;


/*************** Task Attempt Scheduler *********************/

define(trackerCount, keys(0),   {Integer});
define(taskAttempts, keys(0,1), {JobID, TaskID, Integer});
define(schedule,        {JobID, TaskID, String});

public
trackerCount(count<TrackerName>) :-
	jobtracker::taskTracker(TrackerName, _, _, TrackerState, Timestamp, _,  _, _, _, _),
	TrackerState == Constants.TaskTrackerState.RUNNING;
	
public
taskAttempts(JobId, TaskId, count<AttemptId>) :-
	jobtracker::taskAttempt(JobId, TaskId, AttemptId);
	
failedJob
jobtracker::job(JobId, JobName, JobFile, JobConf, User, URL, Priority, SubmitTime, FailStatus) :-
	taskAttempts#insert(JobId, TaskId, Attempts), trackerCount(Trackers),
	jobtracker::task(JobId, TaskId, _, _, _, _, TaskStatus),
	jobtracker::job(JobId, JobName, JobFile, JobConf, User, URL, Priority, SubmitTime, JobStatus),
	TaskStatus.state() == Constants.TaskState.FAILED,
	JobStatus.state() == Constants.JobState.RUNNING,
	Attempts > 3 || Attempts > Trackers,
	FailStatus := new JobState(JobId, Constants.JobState.FAILED);

public
jobtracker::taskAttempt(JobId, TaskId, AttemptID, 0, State, Phase, null, TrackerName, null, 0L, 0L) :-
	schedule(JobId, TaskId, TrackerName),
	notin taskAttempts(JobId, TaskId, _),
	State       := Constants.TaskState.RUNNING,
	Phase       := Constants.TaskPhase.STARTING,
	AttemptID   := 0;

public
jobtracker::taskAttempt(JobId, TaskId, AttemptID, 0, State, Phase, null, TrackerName, null, 0L, 0L) :-
	schedule(JobId, TaskId, TrackerName),
	taskAttempts(JobId, TaskId, Attempts),
	State       := Constants.TaskState.RUNNING,
	Phase       := Constants.TaskPhase.STARTING,
	AttemptID   := Attempts;
	
actionSchedule
jobtracker::taskTrackerAction(TrackerName, TaskTrackerAction.ActionType.LAUNCH_TASK, Action) :-	
	jobtracker::taskAttempt#insert(JobId, TaskId, AttemptID, _, _, Constants.TaskPhase.STARTING, _, TrackerName, _, _, _),
	jobtracker::job(JobId, JobName, JobFile),
	jobtracker::task(JobId, TaskId, Type, Partition, Split, MapCount, _),
	Action := Type == Constants.TaskType.MAP ? 
	          Function.launchMap(Split, JobFile, TaskId, AttemptID, Partition) :
	          Function.launchReduce(JobFile, TaskId, AttemptID, Partition, MapCount);
 
/******************** Process Jobs *******************/
define(jobQueue,                keys(0), {JobID, JobPriority, Long, Constants.TaskType});
define(jobMapTasks,             keys(0), {JobID, Integer});
define(jobFinishedMapTasks,     keys(0), {JobID, Integer});
define(jobReduceTasks,          keys(0), {JobID, Integer});
define(jobFinishedReduceTasks,  keys(0), {JobID, Integer});

/* Put new jobs in a wait queue in a MAP phase. */
public
jobQueue(JobId, Priority, SubmitTime, Constants.TaskType.MAP) :-
	jobtracker::job#insert(JobId, JobName, JobFile, JobConf, User, URL, Priority, SubmitTime, Status),
	Status.state() == Constants.JobState.PREP;
	
public delete
jobQueue(JobId, Priority, SubmitTime, Phase) :-
	jobtracker::job(JobId, JobName, JobFile, JobConf, User, URL, Priority, SubmitTime, Status),
	jobQueue(JobId, Priority, SubmitTime, Phase),
	Status.state() == Constants.JobState.SUCCEEDED || Status.state() == Constants.JobState.FAILED;
	
/* Switch to reduce phase when all maps finish. */
jobQueue(JobId, Priority, SubmitTime, Constants.TaskType.REDUCE) :-
	jobFinishedMapTasks#insert(JobId, Maps), jobMapTasks(JobId, Maps),
	jobQueue(JobId, Priority, SubmitTime, Phase),
	Phase == Constants.TaskType.MAP;
	
public
jobMapTasks(JobId, count<TaskId>) :-
	jobtracker::task(JobId, TaskId, Type, _, _, _, _),
	Type == Constants.TaskType.MAP;
	
public
jobFinishedMapTasks(JobId, count<TaskId>) :-
	jobtracker::task(JobId, TaskId, Type, _, _, _, Status),
	Type == Constants.TaskType.MAP, Status.state() == Constants.TaskState.SUCCEEDED;
	

/******************** Signal task tracker slots available *******************/
define(trackerSlots, keys(0), {String, String, Long, Integer, Integer});

public
trackerSlots(TrackerName, Host, Timestamp, MaxMap - MapCount, MaxReduce - ReduceCount) :-
	jobtracker::taskTracker(TrackerName, Host, _, _, Timestamp, _, 
	                        MapCount, ReduceCount, MaxMap, MaxReduce);

	
	