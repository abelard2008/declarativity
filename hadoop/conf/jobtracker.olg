program jobtracker;

import org.apache.hadoop.mapred.JobID;
import org.apache.hadoop.mapred.TaskID;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobPriority;
import org.apache.hadoop.mapred.declarative.Constants;
import org.apache.hadoop.mapred.declarative.util.JobState;
import org.apache.hadoop.mapred.declarative.util.TaskState;

import jol.types.basic.ValueList;
import jol.types.basic.Wrapper;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Enum;

/*************** TASK INIT *********************/

define(initJob,  {JobID, String, String, Wrapper, String, String, JobPriority, Long, JobState});
define(initTask, {JobID, Wrapper, String, TaskID, Constants.TaskType, Integer, Wrapper, Integer, TaskState});
define(taskFile, {JobID, TaskID, ValueList});
define(taskFileLocation, keys(0,1), {JobID, TaskID, String});

job(JobID, JobName, JobFile, JobConf, User, URL, Priority, SubmitTime, Status) :-
	initJob(JobID, JobName, JobFile, JobConf, User, URL, Priority, SubmitTime, Status);

initTask(JobID, JobConf, JobFile, null, null, null, null, null, null) :-
	initJob(JobID, JobName, JobFile, JobConf, User, URL, Priority, SubmitTime, Status);
	
/* Break out of the current fixpoint thread (using 'async') since taskCreate table function
   makes blocking calls to the DFS. */
async initTask
task(JobID, TaskID, Type, Partition, Split, MapCount, Status) :-
	taskCreate(initTask(JobID, JobConf, JobFile, TaskID, Type, Partition, Split, MapCount, Status));
	
taskFile(JobId, TaskId, Locations) :-
	task(JobId, TaskId, Type, _, Split, _, Status),
	Status.state() == Constants.TaskState.UNASSIGNED,
	Type == Constants.TaskType.MAP,
	Locations := new ValueList(((JobClient.RawSplit)Split.object()).getLocations());
	
taskFileLocation(JobId, TaskId, Location) :-
	flatten(taskFile(JobId, TaskId, Locations)),
	Location := (String) Locations;
	
	
/*************** Network Statistics  *********************/

define(networkDistance, keys(0,1), {String, String, Integer});
define(neighborDistance, keys(0,1), {String, String, Integer});

networkDistance(Host, Host, 0) :-
	networkTopology(Host, Location, Parent, Level);
	
networkDistance(Host, Location, 1) :-
	networkTopology(Host, Location, Parent, Level);
	
networkDistance(Decendent, Ancestor, Distance + 1) :-
	networkTopology(Name, Decendent, Parent, Level),
	networkDistance(Parent, Ancestor, Distance);
	
neighborDistance(Location1, Location2, min<Distance>) :-
	networkDistance(Location1, Ancestor, Distance1),
	networkDistance(Location2, Ancestor, Distance2),
	Location1 != Location2,
	Distance := Distance1 + Distance2;
	
networkDistance(Location1, Location2, Distance) :-
	neighborDistance(Location1, Location2, Distance);


/*************** Job Status Maintenance *********************/
import jol.types.basic.ComparableSet;
	
define(mapTasks,    keys(0), {JobID, ComparableSet});
define(reduceTasks, keys(0), {JobID, ComparableSet});
define(updateJob, {JobID});

/* Update the job state. */
updateJobState
job(JobId, JobName, JobFile, JobConf, User, URL, Priority, SubmitTime, Status) :-
	updateJob(JobId), mapTasks(JobId, Maps), reduceTasks(JobId, Reduces),
	job(JobId, JobName, JobFile, JobConf, User, URL, Priority, SubmitTime, _),
	Status := new JobState(JobId, Maps, Reduces);
	
updateJob(JobId) :- mapTasks(JobId);
updateJob(JobId) :- reduceTasks(JobId);
	
	/*
watch(job, a);
watch(task, a);
*/

mapTaskStatus
mapTasks(JobId, set<Status>) :-
	task(JobId, TaskId, Type, _, _, _, Status),
	Type == Constants.TaskType.MAP;
	
reduceTasks(JobId, set<Status>) :-
	task(JobId, TaskId, Type, _, _, _, Status),
	Type == Constants.TaskType.REDUCE;
	
    
/*************** Task Status Maintenance *********************/

define(taskState, {JobID, TaskID, TaskState});

computeTaskState
taskState(JobID, TaskID, generic<(new TaskState(JobID, TaskID)).attempt(AttemptID, Progress, State, Phase, Start, Finish)>) :-
	taskAttempt(JobID, TaskID, AttemptID, Progress, State, Phase, _, _, _, Start, Finish),
	task(JobID, TaskID, Type, _, _, _, TaskStatus),
	Start > 0L,
	TaskStatus.state() == Constants.TaskState.UNASSIGNED || TaskStatus.state() == Constants.TaskState.RUNNING;
	
task(JobID, TaskID, Type, Partition, Split, MapCount, TaskStatus) :-
	taskState(JobID, TaskID, TaskStatus),
	task(JobID, TaskID, Type, Partition, Split, MapCount, _);
	
	