program hadoop;

import java.lang.System;
import org.apache.hadoop.mapred.TaskTracker;
import org.apache.hadoop.mapred.TaskRunner;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.JobID;
import org.apache.hadoop.mapred.TaskID;
import org.apache.hadoop.mapred.TaskAttemptID;
import org.apache.hadoop.mapred.JobPriority;
import org.apache.hadoop.mapred.JobTracker;
import org.apache.hadoop.mapred.declarative.util.JobState;
import org.apache.hadoop.mapred.declarative.util.TaskState;
import org.apache.hadoop.mapred.declarative.Constants.TaskType;
import org.apache.hadoop.mapred.declarative.Constants.TaskPhase;
import org.apache.hadoop.mapred.declarative.Constants.TaskState;
import org.apache.hadoop.mapred.declarative.Constants.TrackerState;
import org.apache.hadoop.mapred.TaskTrackerAction;
import org.apache.hadoop.mapred.KillJobAction;
import org.apache.hadoop.mapred.KillTaskAction;
import org.apache.hadoop.mapred.LaunchTaskAction;

/****************** Primary Table Definitions **********************/

define(jobTracker, keys(0), {String,       // TT JOL Location
                             String,       // JT JOL Location
                             TrackerState  // JT State
                             });

define(configuration, keys(0), {String,     // TaskTracker JOL address
                                String,     // Hostname
                                Integer,    // Http port
                                Integer,    // Max # maps
                                Integer,    // Max # reduces
                                TaskTracker // TaskTracker object
                                });
                                       
define(taskRunner, keys(2), {String,        // TaskTracker jol address
                             String,        // JobTracker jol address
                             TaskAttemptID, // The task attempt identifier
                             TaskType,      // Type of task
                             Float,         // Task progress
                             TaskState,     // Task state
                             TaskPhase,     // Task phase
                             TaskRunner     // Runner object
                             });
                             
define(statusUpdate, {TaskAttemptID, // The task being updated
                      Float,         // Its progress
                      TaskState,     // Its state
                      TaskPhase,     // Its phase
                      String,         // Diagnostic info
                      Long           // Cursor position
                      });

/*********************** Running task tally ************************/

define(trackerWorkload,   keys(0), {String, Integer, Integer});
define(trackerMapWork,    keys(0), {String, Integer});
define(trackerReduceWork, keys(0), {String, Integer});

watch(trackerWorkload, a);
trackerWorkload(TaskTracker, 0, 0) :-
    configuration(TaskTracker, Host, HttpPort, MaxMaps, MaxReduces, TT);
    
trackerWorkload(TaskTracker, Maps, Reduces) :-
    trackerMapWork(TaskTracker, Maps), trackerReduceWork(TaskTracker, Reduces);
    
trackerWorkload(TaskTracker, Maps, 0) :-
    trackerMapWork(TaskTracker, Maps), notin trackerReduceWork(TaskTracker, Reduces);
    
trackerWorkload(TaskTracker, 0, Reduces) :-
    trackerReduceWork(TaskTracker, Reduces), notin trackerMapWork(TaskTracker, Maps); 

trackerMapWork(TaskTracker, count<AttemptId>) :-
    taskRunner(TaskTracker, _, AttemptId, TaskType.MAP, _, TaskState.RUNNING, _, _); 
    
trackerReduceWork(TaskTracker, count<AttemptId>) :-
    taskRunner(TaskTracker, _, AttemptId, TaskType.REDUCE, _, TaskState.RUNNING, _, _); 

/**********************************************************************/

/*********************** Task Action Handlers *************************/

watch(taskTrackerAction, a);

taskRunner(TaskTracker, JobTracker, Id, Type, 0.0f, State, Phase, Runner) :-
    taskTrackerAction(TaskTracker, JobTracker, TaskTrackerAction.ActionType.LAUNCH_TASK, Action),
    configuration(TaskTracker, Host, HttpPort, MaxMaps, MaxReduces, TT)
    {
        Id     := ((LaunchTaskAction) Action).getTask().getTaskID();
        Type   := ((LaunchTaskAction) Action).getTask().isMapTask() ? TaskType.MAP : TaskType.REDUCE;
        State  := TaskState.RUNNING;
        Phase  := Type == TaskType.MAP ? TaskPhase.MAP : TaskPhase.SHUFFLE;
        Runner := TT.launch(((LaunchTaskAction) Action).getTask());
    };
    
taskRunner(TaskTracker, JobTracker, AttemptId, Type, Progress, TaskState.KILLED, Phase, Runner) :-
    taskTrackerAction(TaskTracker, JobTracker, TaskTrackerAction.ActionType.KILL_TASK, Action),
    configuration(TaskTracker, _, _, _, _, TT),
    taskRunner(TaskTracker, JobTracker, AttemptId, Type, Progress, State, Phase, Runner),
    State != TaskState.KILLED,
    ((KillTaskAction) Action).getTaskID() == AttemptId
    {
        TT.kill(Runner);
    }; 
    
taskRunner(TaskTracker, JobTracker, AttemptId, Type, Progress, TaskState.KILLED, Phase, Runner) :-
    taskTrackerAction(TaskTracker, JobTracker, TaskTrackerAction.ActionType.KILL_JOB, Action),
    configuration(TaskTracker, _, _, _, _, TT),
    taskRunner(TaskTracker, JobTracker, AttemptId, Type, Progress, State, Phase, Runner),
    State != TaskState.KILLED,
    ((KillJobAction) Action).getJobID() == AttemptId.getJobID()
    {
        TT.kill(Runner);
    }; 
    
/**********************************************************************/

watch(statusUpdate, a);
watch(mapCompletion, a);

taskRunner(TaskTracker, JobTracker, AttemptId, Type, Progress, State, Phase, Runner) :-
    statusUpdate(AttemptId, Progress, State, Phase, Diag, Cursor), 
    Progress < 0.9f || Progress == 1.0f,
    taskRunner(TaskTracker, JobTracker, AttemptId, Type, _, _, _, Runner);
    
mapCompletion(JobId, AttemptId, State, FileLocation) :-
    taskAttempt(_, _, AttemptId, _, State, _, FileLocation, _, _),
    State == TaskState.SUCCEEDED, AttemptId.isMap()
    {
        JobId := AttemptId.getJobID();
    };
 
/**********************************************************************/

define(reduceScheduleEvent, {String, TaskID, Integer, String});

watch(reduceScheduleEvent, a);

reduceScheduleEvent(TaskTracker, TaskId, Partition, Address) :-
	reduceSchedule(_, TaskId, Partition, Address),
    configuration(TaskTracker);

reduceScheduleEvent(@JobTracker, TaskId, Partition, Address) :-
	reduceScheduleEvent(@TaskTracker, TaskId, Partition, Address),
    jobTracker(@TaskTracker, JobTracker, JobTrackerState); 

/******************* Update State @JobTracker *************************/

timer(heartbeatInterval, physical, 10000, infinity, 0);
define(heartbeat, {String, String, Integer, Integer, Integer});

heartbeat(TaskTracker, Host, HttpPort, MaxMaps, MaxReduces) :-
    heartbeatInterval(), configuration(TaskTracker, Host, HttpPort, MaxMaps, MaxReduces, TT);
   
/* Send an update every so often, regardless of current running state. */
taskTracker(@JobTracker, TaskTracker, Host, HttpPort, JobTrackerState, Failures, 
                    Maps, Reduces, MaxMaps, MaxReduces, Timestamp) :-
    heartbeat(@TaskTracker, Host, HttpPort, MaxMaps, MaxReduces), 
    jobTracker(@TaskTracker, JobTracker, JobTrackerState), 
    trackerWorkload(@TaskTracker, Maps, Reduces)
    {
        Failures := 0; // todo later
        Timestamp := System.currentTimeMillis();
    };
    
taskAttempt(JobTracker, TaskTracker, AttemptId, Progress, State, Phase, FileLocation, StartTime, FinishTime) :-
    taskRunner#insert(TaskTracker, JobTracker, AttemptId, Type, Progress, State, Phase, Runner), 
    configuration(TaskTracker, Host, HttpPort, _, _, TT)
    {
        FileLocation := "http://" + Host + ":" + HttpPort.toString();
        StartTime    := Runner.startTime();
        FinishTime   := Progress == 1.0 ? System.currentTimeMillis() : Runner.finishTime();
    };

taskAttempt(@JobTracker, TaskTracker, AttemptId, Progress, State, Phase, FileLocation, StartTime, FinishTime) :-
    taskAttempt#insert(JobTracker, @TaskTracker, AttemptId, Progress, State, Phase, FileLocation, StartTime, FinishTime),
    taskRunner(@TaskTracker, JobTracker, AttemptId, Type, Progress, State, Phase, Runner); 
    
/**********************************************************************/
