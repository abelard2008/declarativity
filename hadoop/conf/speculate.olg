program speculate;


import java.lang.System;
import java.util.List;
import jol.types.basic.ValueList;
import org.apache.hadoop.mapred.declarative.Constants;
import org.apache.hadoop.mapred.declarative.util.Function;
import org.apache.hadoop.mapred.declarative.util.FileInput;
import org.apache.hadoop.mapred.JobID;
import org.apache.hadoop.mapred.TaskID;

timer(latePeriod, physical, 20000, infinity, 0);
define(lateCycle, {String});
lateCycle("LATE Cycle") :- latePeriod(), jobtracker::activeJobs(Count), Count > 0;

/******************** Task Statistics *******************/
define(slowTaskThreshold, keys(0), {JobID, Constants.TaskType, Float});
define(slowNodeThreshold, keys(0), {JobID, Constants.TaskType, Float});

define(totalAvailableSlots,  {Float, Float});
define(taskProgressRate,     keys(0,1,2), {JobID, TaskID, Constants.TaskType, Float});
define(taskProgressRates,    {JobID, Constants.TaskType, List});
define(trackerProgressRate,  keys(0,1,2), {String, JobID, Constants.TaskType, Float});
define(trackerProgressRates, {JobID, Constants.TaskType, List});

public
taskProgressRate(JobId, TaskId, Type, ProgressRate) :-
	jobtracker::task(JobId, TaskId, Type, _, _, _, Status),
	Status.start() > 0L, Status.state() != Constants.TaskState.FAILED 
    {
    	End := Status.finish() > 0L ? Status.finish() : java.lang.System.currentTimeMillis();
        java.lang.System.err.println("Task progress " + Status.progress().toString() + 
                                     ", running time " + (End - Status.start()).floatValue().toString());
    	ProgressRate := Status.progress() / (End - Status.start()).floatValue(); 
    };
	
taskProgressRates(JobId, Type, list<ProgressRate>) :-
	taskProgressRate(JobId, TaskId, Type, ProgressRate);
	
slowTaskThreshold(JobId, Type, Threshold) :-
	taskProgressRates(JobId, Type, Rates),
    Rates != null && Rates.size() >= 4,
	Threshold := Function.percentile(0.25, Rates);


public
trackerProgressRate(TrackerName, JobId, Type, avg<ProgressRate>) :-
	jobtracker::task#insert(JobId, TaskId, Type, _, _, _, _),
    jobtracker::taskAttempt(JobId, TaskId, _, Progress, State, _, _, TrackerName, _, Start, Finish, Timestamp, _),
    Start > 0L, Start < Timestamp, State != Constants.TaskState.FAILED 
    {
    	End := Finish > 0L ? Finish : Timestamp;
        java.lang.System.err.println("TASK RUNNING TIME: " + (End - Start).floatValue().toString());
    	ProgressRate := Progress / (End - Start).floatValue(); 
    };
    
public
trackerProgressRates(JobId, Type, list<AvgProgressRate>) :-
    lateCycle(),
	trackerProgressRate(TrackerName, JobId, Type, AvgProgressRate);
	
slowNodeThreshold(JobId, Type, Threshold) :-
	trackerProgressRates(JobId, Type, Rates),
    Rates != null && Rates.size() >= 4,
	Threshold := Function.percentile(0.25, Rates);
	
/**************************************************************/

/* Speculative map task execution. */
policy::candidate(JobId, TaskId, Type, TrackerName, Priority) :-
    lateCycle(),
    jobtracker::taskTracker(TrackerName, Host, _, _, _, _, MapCount, ReduceCount, MaxMap, MaxReduce, _),
    Maps := MapCount < MaxMap ? MaxMap - MapCount : 0,
    jobtracker::job(JobId, _, _, _, _, _, JobPriority, JobSubmitTime, _, _),
	jobtracker::task(JobId, TaskId, Type, _, _, _, TaskStatus),
	Type == Constants.TaskType.MAP, TaskStatus.state() == Constants.TaskState.RUNNING,
    System.currentTimeMillis() - TaskStatus.start() > 60000L,
    scheduler::taskAttempts(JobId, TaskId, Attempts), Attempts < 2,
	jobtracker::taskFileLocation(JobId, TaskId, FileLocation),
	notin jobtracker::taskAttempt(JobId, TaskId, _, _, _, _, _, TrackerName, _, _, _,_,_),
	trackerProgressRate(TrackerName, JobId, Type, NodeProgressRate),
	slowNodeThreshold(JobId, Type, NodeThreshold), NodeProgressRate > NodeThreshold,
	taskProgressRate(JobId, TaskId, Type, TaskProgressRate),
	slowTaskThreshold(JobId, Type, TaskThreshold), TaskProgressRate < TaskThreshold
	{
		LocalFile := Host == FileLocation ? 0 : 1;
		InvertCompletionEstimate := TaskProgressRate / (1f - TaskStatus.progress());
		Priority := [JobPriority, JobSubmitTime, 0, InvertCompletionEstimate, LocalFile];
	};
	
policy::candidate(JobId, TaskId, Type, TrackerName, Priority) :-
    lateCycle(),
    jobtracker::taskTracker(TrackerName, Host, _, _, _, _, MapCount, ReduceCount, MaxMap, MaxReduce, _),
    Reduces := ReduceCount < MaxReduce ? MaxReduce - ReduceCount : 0,
    jobtracker::job(JobId, _, _, _, _, _, JobPriority, JobSubmitTime, _, _),
	jobtracker::task(JobId, TaskId, Type, _, _, _, TaskStatus),
	Type == Constants.TaskType.REDUCE, TaskStatus.state() == Constants.TaskState.RUNNING,
    System.currentTimeMillis() - TaskStatus.start() > 60000L,
    scheduler::taskAttempts(JobId, TaskId, Attempts), Attempts < 2,
	trackerProgressRate(TrackerName, JobId, Type, NodeProgressRate),
	notin jobtracker::taskAttempt(JobId, TaskId, _, _, _, _, _, TrackerName, _, _, _,_,_),
	slowNodeThreshold(JobId, Type, NodeThreshold), NodeProgressRate > NodeThreshold,
	taskProgressRate(JobId, TaskId, Type, TaskProgressRate),
	slowTaskThreshold(JobId, Type, TaskThreshold), TaskProgressRate < TaskThreshold
	{
		InvertCompletionEstimate := TaskProgressRate / (1f - TaskStatus.progress());
		Priority := [JobPriority, JobSubmitTime, 0, InvertCompletionEstimate, 0];
	};
	
	
