Zyzvvya:

Question is when does it fall back to 2 phase protocol:
(a) one or more replica is faulty
(b) one or more client is faulty
(c) one or more replica is slow: once a replica misses one request, it will be lagging thereafter and hence slow down
operations after that. 
(d)  network drops packets

Hypothesis: Zyzvvya's single phase protocol is sensitive to perfect
network conditions (i.e., no loss, almost identical delays) and appropriate timer setting at clients. Any change in this setting causes it to degrade the performance. So, we contend that in practice, it is similar or slightly better than 2 phase protocol. Can we propose some new techniques to perform it closer to single phase in practice?


We have to focus on following cases, in increasing level of non-idealness:

(a) Ideal: exactly the conditions under which Zyzyvva completes in single phase. Depends on deployment setting. Superior compared to PSHQ.
(b) Ideal + network faults (loss, re-ordering, etc): Slightly more practical. Zyzyvva degrades to 2 phase. Similar to PSHQ.
(c) Ideal + network faults + slow-replicas: Even more practical. Again, Zyzyvva degrades to 2 phase. Similar to PSHQ.
(d) Ideal + network faults + faulty-clients: Zyzyvva degrades to 2 phase. Similar to PSHQ.
(e) Ideal + network faults + faulty-clients + non-primary-replica-faulty: Zyzyvva degrades to 2 phase. Similar to PSHQ.
(f) Ideal + network faults + faulty-clients + primary-replica-faulty: PSHQ probably superior since view change is costlier in Zyzyvva.


Summary: PSHQ is super-seded by Zyzyvva. So, the contribution of Zyzyvva, in practice, is a quorum protocol that avoids conflict resolution in the common case.

====================================================

Research related questions:
(a) Can we cast Zyzvvya as a safe hint? 
	- First phase of Zyzvvya is in fact a safe hint given to the client. If there are no-faults, that is the correct response. Zyzyvva's second phase is basically PSHQ protocol, which is itself a safe hint that we came up with. cases

(b) Can we improve Zyzvvya? Can we cast the improvement as another safe hint. Intuition is that Zyzvvya is 3 layered 
protocol: (1) single phase, (2) two phase (3) view change protocol. Is there something in-between (1) and (2)?
	-  Zyzvvya's first phase is vulnerable to faulty clients,  unreliable network, slow replicas and conservative timer set up at correct clients. How can we remove these vulnerabilities? 
		* Dealing with faulty network: let clients wait for a timeout, re-send the message send by the primary to only those replicas that havent 		  responded yet. This avoids replicas to do second phase as long as network eventually delivers but may inflate latency (two phase might be better in terms of 		  latency). Note: this is more like a hack and probably not a safe hint. Also, faulty clients can still degrade performance.

		* Dealing with faulty clients: Problem is that replicas do not know if there are going to be (3f+1) replicas participating in the first phase. 
		  So, when they receive a client's commit certificate, they need to act on it even though there are no faulty replicas. What we need is a mechanism by which replicas 		  can themselves figure out if they succeeded in the first phase and if so, they do not need to act on commit certificate. [Not sure about this. Ideas?]


(c) Can we push Zyzyvva's use of clients even further? [Not clear]

(d) Also, can we claim that these improvements came up because of the way we think about these optimizations in the form of safe hints?

(e) Can we skip encryption all together from the common case? 
	* Decrypt client requests and encrypt client responses. 2 crypto operations.
	* Primary does not encrypt the message it sends to replicas. If there are faults, then non-faulty clients will observe the inconsistency and then we can switch back to encrypted protocol version. I am still in thinking mode for this part, e.g., what happens when there are faults. Question: can a faulty client cause us to switch to encrypted 
version even if none of the replicas are faulty.
