\chapter[Reed-Muller (1,m) Codes Under Synchronization and Substitution Errors]
{Reed-Muller(1,m) Codes Under Synchronization and Substitution
Errors }\label{reed-muller-perfm}

In this chapter we study the performance of a Reed-Muller
RM($1$,$m$) code, as an instance of a substitution-error correcting
code, over channels in which, in addition to substitution errors, a
sampling error can cause synchronization errors. In particular, we
study the cases where the synchronization error results in the
deletion of a single bit and where it results in the repetition of a
single bit. In Section \ref{Model} we revisit the previously
discussed model of synchronization errors. Section \ref{sectionid}
discusses the identification problem for the RM($1$,$m$) code under
repetition and deletion errors, and provides a method to modify this
code to eliminate the identification problem. The pruned code also
has good identification under synchronization errors. The proofs
heavily rely on the structural properties proved earlier in Chapter
\ref{reed-muller-struc}. In Section \ref{sectiondec} we study the
modified RM code under synchronization and substitution errors. In
particular, we establish the post-repetition and the post-deletion
distance of this code (Subsection \ref{sectionmd}) and provide
bounded distance decoding algorithms suitable for the channels of
present interest (Subsection \ref{sectiondecalg}).
Section~\ref{sectionconcRM} provides a summary and concluding
remarks.

\section{Transmission Model Revisited}\label{Model}

We recall the discussion of synchronization errors from Chapter
\ref{intro1}. We adopt the following model in the infinite SNR
limit. Suppose $C$ is a $(n,k)$ linear block code. A codeword
$\mathbf{c}$ $\in C$ is modulated using pulse-amplitude modulation
(PAM), and the received waveform $r(t)$ is sampled noise-free. Let
$\mathbf{r}$ be the sampled version of $r(t)$ of length $l$ bits. We
assume that the location of the first and the last bit of
$\mathbf{r}$ in the received string of data is known, so that the
codewords can be analyzed in isolation. Then, from $l$ we would know
the difference between the number of repetitions and the number of
deletions that occurred over the channel. For instance, if the
channel model permits one repetition, then if $l=n$ we know that the
the sampled version of $r(t)$ equals $\mathbf{c}$, while if $l=n+1$
the sampled version of $r(t)$ is $\mathbf{c}$ but with one bit
repeated. Similarly, if the channel model permits one deletion, then
if $l=n$ we know that the sampled version of $r(t)$ equals
$\mathbf{c}$, while if $l=n-1$ the sampled version of $r(t)$ is
$\mathbf{c}$ with one bit deleted. These are the two channel models
that we consider in this Chapter. Note that in these examples the
location of the repeated (respectively deleted) bit is not known.

In general, in the infinite SNR limit a channel with
synchronization errors could be modelled as introducing a certain
number of repetitions and deletions in the transmitted codeword.
Assuming, as above, that the location of the first and the last
bit in the received string of data is known codewords could be
analyzed in isolation, and we would learn the difference, $l -n$,
between the number of repetitions and the number of deletions that
occurred over the channel. However, we would not know the location
of the repetitions and/or the deletions. This more general kind of
model is not analyzed here.

This Chapter is concerned with use of RM($1$,$m$) codes over
channels permitting substitution and synchronization errors under
the two kinds of synchronization error models discussed in the
first paragraph: the single repetition model and the single
deletion model.
\section{Identification Problem}\label{sectionid}

In this section we analyze the identification problem for
codewords of the RM($1$,$m$) codes over channels permitting a
single deletion. Before doing so, we first deal with the much
simpler case of channels permitting only (an arbitrary number of)
repetition errors.

\subsection{The case of repetition errors}

We have the following simple result:

\begin{theorem}\label{THE1} In $C(m)$, no two codewords can result
in the same string when they experience repetitions.
\end{theorem}

\noindent \textit{Proof:} For the case of one, or any number of
repetitions, two codewords in $C(m)$ resulting in the same string
must have the same number of runs, and the same sequence of runs.
By Lemma~\ref{LE2} there are exactly two codewords with the same
number of runs. However these two codewords are also complements
of each other and therefore cannot have the same sequence of runs.
We can conclude that $C(m)$ is immune to repetition errors. \hfill
$\blacksquare$

It should be noted, nevertheless, that even single repetitions can
result in pairs of codewords of the RM($1$,$m$) code having poor
identification. For instance, the codeword $c_{2^{m-1}}(01)$ and
its complement $c_{2^{m-1}}(10)$ have a post-repetition Hamming
distance of $2$.

\subsection{The case of a single deletion}

The analysis of the identification problem for RM($1$,$m$) codes
over channels permitting a single deletion is considerably more
interesting, see Theorem \ref{THE2}. Before proceeding to the main
theorem, we first make a couple of simple remarks.

\begin{remark}\label{Re31}
[\textit{Complementarity}] Consider two distinct codewords
$\mathbf{c_a}$ and $\mathbf{c_b}$ in $C(m)$. If $\mathbf{c_a}$ and
$\mathbf{c_b}$ can give rise to the same string after experiencing
one deletion each, the same is true for their bitwise complements
$\overline{\mathbf{c_a}}$ and $\overline{\mathbf{c_b}}$.
\end{remark}

\begin{remark}\label{Re32}
[\textit{Reversibility}] Consider two distinct codewords
$\mathbf{c_a}$ and $\mathbf{c_b}$ in $C(m)$, If $\mathbf{c_a}$ and
$\mathbf{c_b}$ can give rise to the same string after experiencing
one deletion each the same is true for their reversals ${\revca}$
and ${\revcb}$.
\end{remark}

Here is a description of the pairs of codewords in RM($1$,$m$)
which suffer from the identification problem over channels with a
single deletion, for small values of $m$:

\begin{remark}\label{re:RE2}
For $m=0,1,2$ we can show by inspection the following.

$m=0:$ The only codewords are `0' and `1' and they can both result
in an empty string.

$m=1:$ The codewords are `00', `11', `01', and `10'. The codewords
`00', `01', and `10' can all result in `0', and the codewords
`11',`10', and `01' can all result in `1'.

$m=2:$ The codewords are `0000', `1100', `0011', `0110', `1111',
`1010', `0101', and `1001'. The codeword `0011' and any one of
`0110', `0101', and `1001' can result in the same string.
Similarly, the codeword `1100' and any one of `1001', `1010', and
`0110' can result in the same string. The same is true for `0110',
and any one of `1010' and `0101' as well as for `1001' and any one
of `0101' and `1010'. Also, `1010' and `0101' can result in the
same string.\hfill $\blacksquare$
\end{remark}

We may now complete the analysis of the identification problem for
RM($1$,$m$) codes over channels permitting a single deletion:

\begin{theorem}\label{THE2}
Let $j=2^{m-1}$ and $k=2^{m-2}$. For $m \geq 3$, there is a total
of 11 pairs of distinct codewords in $C(m)$ that result in the
same string when each experiences a deletion. These are:

$ \left. \begin{array}{cc}
  \text{1. } & c_j^m(10) \text{ and }c_{j}^m(01)\\
\end{array} \right\}{\text{Group 1}} $
\vspace{0.1in}

$ \left. \begin{array}{cc}
  \text{2. } & c_j^m(10) \text{ and  }c_{j}^m(11) \\
  \text{3. } & c_j^m(10) \text{ and  }c_{j-1}^m(00) \\
  \text{4. } & c_j^m(01) \text{ and  }c_{j}^m(11) \\
  \text{5. } & c_j^m(01) \text{ and  }c_{j-1}^m(00) \\
\end{array} \right\}{\text{Group 2}} $
\vspace{0.1in}

$ \left. \begin{array}{cc}
  \text{6. } & c_k^m(01) \text{ and }c_{k}^m(00)\\
  \text{7. } & c_k^m(01) \text{ and }c_{k+1}^m(11)\\
  \text{8.} & c_k^m(10) \text{ and }c_{k}^m(00)\\
  \text{9.} &c_k^m(10) \text{ and }c_{k+1}^m(11)\\
\end{array} \right\}{\text{Group 3}} $
\vspace{0.1in}

 $ \left. \begin{array}{cc}
  \text{10. } & c_j^m(01)$ \text{ and  } $c_{j-1}^m(01)\\
  \text{11. } & c_j^m(10)$ \text{ and  } $c_{j-1}^m(10)\\
\end{array} \right\}{\text{Group 4}} $
\vspace{0.1in}
\end{theorem}


\noindent \textit{Proof:} Observe that we have already established
this result for $m=2$ in the previous remark. In the rest of the
proof we will assume that $m \geq 3$.

Note that it is sufficient to assume that the deletion occurs at
the end of a run, since the string resulting from a deletion of a
bit in some codeword is the same irrespective of where the deleted
bit was located within the run it belonged to.

Suppose $\mathbf{c_a}$ and $\mathbf{c_b}$ are distinct codewords
in $C(m)$ which result in the same string when each experiences
one deletion. Let $\mathbf{d_a}=d(\mathbf{c_a})$ and
$\mathbf{d_b}=d(\mathbf{c_b})$ be as defined in
Definition~\ref{de11}. We first observe that during a deletion,
the total number of runs in the codeword stays the same, decreases
by one, or by two. Suppose a codeword $\mathbf{c_a}$ experiences a
deletion in a run of length at least 2. Then the length of
$\mathbf{d_a}$ remains unchanged. If $\mathbf{c_a}$ experiences a
deletion in a run of length 1, the neighboring runs (if any) will
merge and the total number of runs will decrease. In particular,
if this deleted run of length 1 is an outermost run, the length of
$\mathbf{d_a}$ decreases by 1.  If this deleted run of length 1 is
located somewhere else in $\mathbf{c_a}$, the length of
$\mathbf{d_a}$ decreases by 2. It is therefore sufficient to
consider the cases when the lengths of $\mathbf{d_a}$ and
$\mathbf{d_b}$ differ by 0, 1, and 2. Without loss of generality
assume that $|\mathbf{d_a}|$ $\geq$ $|\mathbf{d_b}|$. We treat the
cases $|\mathbf{d_a}|$=$|\mathbf{d_b}|$,
$|\mathbf{d_a}|$=$|\mathbf{d_b}|$+1, and
$|\mathbf{d_a}|$=$|\mathbf{d_b}|$+2 separately.

Case 1: $|\mathbf{d_a}|$=$|\mathbf{d_b}|$

By Lemma~\ref{LE2}, it must be that $\mathbf{c_a}$ and
$\mathbf{c_b}$ are complements of each other, and consequently
$\mathbf{d_a}$ = $\mathbf{d_b}$. Either both $\mathbf{c_a}$ and
$\mathbf{c_b}$ experience deletions in runs of length at least 2
each, or both experience deletions in different outermost runs of
length 1 each or in inner runs of length 1 each.

Since $\mathbf{c_a}$ and $\mathbf{c_b}$ differ in their leftmost
bits, a deletion must occur in the leftmost bits in either
$\mathbf{c_a}$ or $\mathbf{c_b}$. Without loss of generality we
can assume that the leftmost bit in $\mathbf{c_a}$ is deleted. If
this bit belonged to a run of length at least 2, $\mathbf{c_b}$
itself would start with a run of length at least 2, but then it
would be impossible to obtain the same string from $\mathbf{c_a}$
and $\mathbf{c_b}$ when each experiences exactly one deletion.
Therefore, the leftmost run in $\mathbf{c_a}$ is a run of length
1, and by Lemma~\ref{LE3}, all runs in $\mathbf{c_a}$ (and
$\mathbf{c_b}$) must be of length 1 or 2. Since $\mathbf{d_a}$
decreases by 1, the same must be true for $\mathbf{d_b}$, so that
$\mathbf{c_b}$ experiences a deletion in its outermost bit, which
then must be its rightmost bit. Then $\mathbf{c_a}(p)$ =
$\mathbf{c_b}(p-1)$ for $1<p \leq 2^{m}$ (here and in the
remainder $\mathbf{c_a}(p)$ denotes the bit in the $p^{\text{th}}$
leftmost position of $\mathbf{c_a}$), and by using the fact that
$\mathbf{c_a}$ and $\mathbf{c_b}$ are complements of each other,
it follows that $\mathbf{c_a}$ and $\mathbf{c_b}$ consist of
alternating bits. Thus $\mathbf{c_a}$ is either $c_j^m(10)$ or
$c_j^m(01)$ for $j=2^{m-1}$, and $\mathbf{c_b}$ is its complement.
This codeword pair is listed under 1 and is labeled Group 1.

Case 2: $|\mathbf{d_a}|$=$|\mathbf{d_b}|$+1

Suppose a deletion occurs in position $p_a$ in $\mathbf{c_a}$, and
in position $p_b$ in $\mathbf{c_b}$ (we assume that the deletion
occurs at the end of a run), where we index the bits in the
codewords with $1$ through $2^m$, from left to right. It must be
that either: a) $\mathbf{c_a}$ experiences a deletion in an
outermost run of length 1, while $\mathbf{c_b}$ experiences a
deletion in a run of length at least 2, or b) $\mathbf{c_a}$
experiences a deletion in an inner run of length 1 and
$\mathbf{c_b}$ experiences a deletion in an outermost run of
length 1.

Subcase 2-1: $|\mathbf{d_a}|$ is even

We view $\mathbf{c_a}$ as the result of concatenation applied to
the same codeword $\mathbf{c'} \in C(m-1)$, whereby $\mathbf{c_a}=
[ \mathbf{c'} | \mathbf{c'}]$ if $\mathbf{c'}$ has opposite
outermost bits, and $\mathbf{c_a}= [ \mathbf{c'} |
\overline{\mathbf{c'}}]$ if the outermost bits in $\mathbf{c'}$
are the same.

In either case a) or b) there exists at least one entry in
$\mathbf{d_a}$ equal to 1. Then, by Lemma~\ref{LE3}, the outermost
runs in $\mathbf{c_a}$ and $\mathbf{c'}$ are all of length 1. By
mirror-symmetry (Lemma ~\ref{le11}) we can express $\mathbf{d_a}$
and $\mathbf{d_b}$ as $\mathbf{d_a}=[A11A^R]$ and
$\mathbf{d_b}=[A2A^R]$, where $A=[A_1 A_2 ... A_l]$ is a substring
of $\mathbf{d_a}$, $A^R$ is its reverse, and $A_1=1$.

For the situation described in a), by the reversibility property,
we may as well assume that the leftmost bit in $\mathbf{c_a}$ is
deleted. Then the entry in position $p$ in $\mathbf{d_b}$ must
correspond to the entry in position $p+1$ in $\mathbf{d_a}$, in
the sense that $\mathbf{d_a}(p+1)$ = $\mathbf{d_b}(p)$ $\forall p$
except for exactly one, call it $p^*$, for which
$\mathbf{d_a}(p^*+1)$ = $\mathbf{d_b}(p^*)+1$. In particular if
this entry in $\mathbf{d_b}$ is bigger than 2, by Lemma
~\ref{LE3}, it would have to be at least 4, further implying the
existence of a run in $\mathbf{c_a}$ of length at least 3, which
is impossible by Lemma ~\ref{LE3} and the fact that there is at
least one run of length 1 in $\mathbf{c_a}$.

Therefore $\mathbf{d_b}(p^*)$ = 2 and $\mathbf{d_a}(p^*+1)$ = 1.
Since $\mathbf{d_b}(l+1)$ = 2 and $\mathbf{d_a}(l+2)$ = 1 by
construction, it follows that $p^*=l+1$. Furthermore, $A_2=A_1$,
$A_3=A_2$, ...$A_l=A_{l-1}$, so that $\mathbf{d_a}$ consists of
all 1's and $\mathbf{d_b}$ has all 1's except for its innermost
entry which is 2. Consequently $\mathbf{c_a}$ is either
$c_j^m(10)$ or $c_j^m(01)$, and $\mathbf{c_b}$ is either
$c_j^m(11)$ or $c_{j-1}^m(00)$for $j=2^{m-1}$. One can check that
all four pairs of candidate codewords suffer from the
identification problem. This is the set of pairs listed under
Group 2. This group of codeword pairs is closed under
complementation and reversal.

Now, for the situation described in b), by the reversibility
property, we may as well assume that the rightmost bit in
$\mathbf{c_b}$ is deleted.

The first leftmost entries where $\mathbf{d_a}$ and $\mathbf{d_b}$
differ are their $(l+1)^{\text{st}}$ entries so the deletion in
$\mathbf{c_a}$ must be in its $(l+2)^{\text{nd}}$ run, which then
disappears altogether. Moreover, both $(l+1)^{\text{st}}$ and
$(l+3)^{\text{rd}}$ runs in $\mathbf{c_a}$ must be of length 1
each because the $(l+1)^{\text{st}}$ run of $\mathbf{c_b}$ is of
length $2$. Therefore $A^R(1)=A_l=1$.

The entry in position $l+2$ in $\mathbf{d_b}$ (which is $A^R(1)$)
must be the same as the entry in position $l+4$ in $\mathbf{d_a}$,
which is $A^R(2)=A_{l-1}$. The entry in position $l+3$ in
$\mathbf{d_b}$, which is itself $A^R(2)$, is the same as the entry
in $\mathbf{d_a}$ in position $l+5$, which is $A^R(3)$.

By continuing forward until the end of $A^R$, we conclude that
$A^R$ consists of all 1's, thereby making $\mathbf{d_a}$ be all
1's as well, and $\mathbf{d_b}$ be all 1's except for 2 in the
middle. These two $\mathbf{d_a}$ and $\mathbf{d_b}$ have already
been encountered in the situation described in a), and yield the
codeword pairs listed under Group 2.

Subcase 2-2: $|\mathbf{d_a}|$ is odd

In either case a) or b) $\mathbf{d_a}$ has at least one entry
equal to 1, so all its entries are either 1 or 2 by
Lemma~\ref{LE3}. If $\mathbf{d_b}$ had an entry larger than 3, by
Lemma~\ref{LE3} case b) would not be even possible. For case a) it
would require an existence of a run in $\mathbf{c_a}$ of length at
least 3, which is also impossible by the same Lemma. Since all
entries in $\mathbf{d_a}$ and $\mathbf{d_b}$ are then precisely
$1$ or $2$, we can use their mirror symmetry and apply Lemma
~\ref{le14} to conclude that $\mathbf{d_a}$ and $\mathbf{d_b}$
have the following formats:

$\mathbf{d_a}=[A1B1A^R]$ and $\mathbf{d_b}=[A2C2A^R]$,

where $|B|=|C|+1$ and $A$ and $C$ are possibly empty.

Let $|A|=p-1$. Further, note that $|C|$ is even.

For the situation described in a) we may as well assume, by the
reversibility property, that the rightmost bit in $\mathbf{c_a}$
is deleted, and that it belonged to a 1-bit run. Then the deletion
in $\mathbf{c_b}$ must be in its $p^{\text{th}}$ leftmost run (of
length 2).

Since $A^R(p-1)=1$ in $\mathbf{d_a}$, by mirror symmetry, $A(1)=1$
(or by Lemma~\ref{LE3}). Since the rightmost entry in
$\mathbf{d_b}$ is the same as the second rightmost entry in
$\mathbf{d_a}$, it further follows that $A^R(p-2)=1$, which in
turn implies that $A(2)=1$, and so on until the end of $A$,
thereby requiring that $A$ consists of all 1's. Similarly, the
entry in $\mathbf{d_b}$ in position $|\mathbf{d_b}|-(p-1)$, which
is 2 by assumption, is the same as the entry in $\mathbf{d_a}$ in
position $|\mathbf{d_a}|-p$, which is itself the last entry in
$B$. Thus $B$ ends in 2 and by mirror symmetry it also starts with
2. This in turn implies that $C$ starts and ends with 2, which
then implies that the next to the last entry in $B$ is also 2. By
continuing on until all entries in $B$ and $C$ have been
encountered we can conclude that $B$ and $C$ consist only of 2's.
Then $\mathbf{d_a}$ = `1.12.21.1' and $\mathbf{d_b}$=`1.12.21.1'
(if $A$ nonempty) or $\mathbf{d_b}$=`2.2' (if $A$ empty), where
`1.1' (`2.2') indicates a non-empty run of 1's (2's). For
$|\mathbf{d_b}|$ even, the run of 2's in $\mathbf{d_b}$ would have
to have even length (since the neighboring `1.1' runs are of the
same length by the mirror-symmetry property) which is impossible
by Lemma ~\ref{le12}.2. Thus $\mathbf{d_b}$ =`2.2', $A$ is empty,
and then $\mathbf{d_a}$=`12.21'. Consequently, $\mathbf{c_b}$
itself is either $c_k^m(01)$ or $c_k^m(10)$ for $k=2^{m-2}$, and
$\mathbf{c_a}$ is either $c_k^m(00)$ or $c_{k+1}^m(11)$. It can be
checked that all four codeword pairs suffer from the
identification problem. These are the pairs listed in Group 3.
This group of codeword pairs is also closed under complementation
and reversal.

For b) we may as well assume, by the reversibility property, that
the rightmost bit in $\mathbf{c_b}$ is deleted, so that
$\mathbf{d_b}$ ends in a 1. Note that this implies that $A^R$ (and
$A$) cannot be empty, and therefore $p>1$. Then the first leftmost
entry in which $\mathbf{d_a}$ and $\mathbf{d_b}$ differ is
compensated for by the deletion in a 1-bit run in $\mathbf{c_a}$.
Since all runs in $\mathbf{c_b}$ are of length at most 2, the
deleted run in $\mathbf{c_a}$ must be bordered by two 1-bit runs.
Therefore, the $(p+1)^{\text{st}}$ run (of length 1) in
$\mathbf{c_a}$ is deleted, and both $(p)^{\text{th}}$ and
$(p+2)^{\text{nd}}$ run in $\mathbf{c_a}$ are also of length 1.
Furthermore, the entry in position $t$ for $p+1 \leq t \leq
|\mathbf{d_b}|-1$ in $\mathbf{d_b}$ is the same as the entry in
position $t+2$ in $\mathbf{d_a}$.

In particular, the entry in $\mathbf{d_b}$ in position
$|\mathbf{d_b}|-p+1$, which is 2, is the same as the entry in
position $|\mathbf{d_a}|-p+2$ in $\mathbf{d_a}$, which is
$A^R(1)$. By mirror symmetry entries in positions $p-1$ in both
$\mathbf{d_a}$ and $\mathbf{d_b}$ are equal to 2. Then the entry
in $\mathbf{d_b}$ in position $|\mathbf{d_b}|-p+2$ is also 2, as
is the entry in $\mathbf{d_a}$ in position $|\mathbf{d_a}|-p+3$.
By continuing onwards until $t = |\mathbf{d_b}|-1$, and by using
the mirror symmetry, we conclude that $A$ (and $A^R$) consists of
all 2's, which is in contradiction with the earlier requirement
that the deletion in $\mathbf{c_b}$ occurs in its outermost run of
length 1.


Case 3: $|\mathbf{d_a}|$=$|\mathbf{d_b}|$+2

We now consider the remaining case where the deletion in
$\mathbf{c_a}$ occurs in an inner run of length 1 and in
$\mathbf{c_b}$ in a run of length at least 2. This deletion in a
1-bit run of $\mathbf{c_a}$ causes its neighboring runs to merge.
By Lemma~\ref{LE3}, these runs are of length 1 or 2 each. If they
were both of length 2 each, there would exist an inner run of 1's
in $\mathbf{d_a}$ of length 1, which is impossible by
Lemma~\ref{le12}.3. If one neighboring run was of length 1 and the
other of length 2, the merging would require an existence of a
3-bit run in the post-deletion $\mathbf{c_b}$. By Lemma~\ref{LE3},
the deletion in $\mathbf{c_b}$ would then have to be in a 4-bit
run, and by the same Lemma, the outermost runs in $\mathbf{c_b}$
would be of length at least 2. These would have to correspond to
the outermost runs in $\mathbf{c_a}$, which are themselves of
length 1 each. Therefore, the deletion in $\mathbf{c_a}$ must
occur in an inner 1-bit run neighbored by two 1-bit runs, and all
entries in both $\mathbf{d_a}$ and $\mathbf{d_b}$ can be only 1 or
2.


Consider $\mathbf{c_c} \in C(m)$ which has $|\mathbf{d_b}|+1$
runs. For $|\mathbf{d_a}|$ even, we can think of $\mathbf{c_a}$ as
being the result of concatenating a codeword $\mathbf{c_d} \in
C(m-1)$ with itself if $|\mathbf{d_a}|/2$ is even, and with its
complement if $|\mathbf{d_a}|/2$ is odd, such that $\mathbf{c_d}$
and $\mathbf{c_a}$ have the same leftmost bits (the existence of
such codeword in $C(m-1)$ follows from Lemma~\ref{LE2}).
Furthermore, in the former case we can view $\mathbf{c_c}$ as the
result of concatenating $\mathbf{c_d}$ with its complement, and in
the latter case as the result of concatenating $\mathbf{c_d}$ with
itself. Then $\mathbf{d_a}=[\mathbf{d_d}|\mathbf{d_d}]$, and
$\mathbf{d_c}=[\mathbf{d_d}(1,l-1)|(\mathbf{d_d}(l)+\mathbf{d_d}(1))|\mathbf{d_d}(2,l)]$,
where $\mathbf{d_d}=d(\mathbf{c_d})$ and $l=|\mathbf{d_d}|$. The
leftmost entry in which $\mathbf{d_a}$ and $\mathbf{d_c}$ differ
is their $(|\mathbf{d_c}|+1)/2^{\text{th}}$ leftmost entry. By
mirror symmetry of $\mathbf{d_d}$, this entry in $\mathbf{d_c}$ is
twice its counterpart in $\mathbf{d_a}$. Since all entries in
$\mathbf{d_a}$ are 1 or 2, and its outermost entries are 1, it
follows that all entries in $\mathbf{d_c}$ are also at most 2.
Then the first leftmost entry in which $\mathbf{d_c}$ and
$\mathbf{d_b}$ differ is say in position $p$, for
$p<|\mathbf{d_b}|/2$ and $\mathbf{d_c}(p)=1$ and
$\mathbf{d_b}(p)=2$, by Lemma ~\ref{le14}. Since $|\mathbf{d_b}| <
|\mathbf{d_c}|+1$, the first leftmost entries in which
$\mathbf{d_a}$ and $\mathbf{d_b}$ differ is in the $p^{\text{th}}$
position, where $p < |\mathbf{d_b}|/2$.

A similar argument holds for $|\mathbf{d_a}|$ odd when the first
leftmost entry in which $\mathbf{d_a}$ and $\mathbf{d_c}$ differ
is then in some position $p$, for $p < |\mathbf{d_c}|/2$, and the
first leftmost entry in which $\mathbf{d_c}$ and $\mathbf{d_b}$
differ is in their $(|\mathbf{d_b}|+1)/2^{\text{th}}$ entry. Then
the first leftmost entry in which $\mathbf{d_a}$ and
$\mathbf{d_b}$ differ is still in position $p$.


As a result and by mirror symmetry, we can then express
$\mathbf{d_a}$ and $\mathbf{d_b}$ as $\mathbf{d_a}=[A1B1A^R]$ and
$\mathbf{d_b}=[A2C2A^R]$, where $|B|=|C|+2$, $|A|=p-1$, and $A$
and $C$ are possibly empty.

By the reversibility property, we can assume that the leftmost
error is a deletion in $\mathbf{c_a}$, which then must be in the
$(p+1)^{\text{st}}$ run in $\mathbf{c_a}$ (of length 1),
neighbored by 1-bit runs on each side, such that the substring
`111' starts at position $p$ in $\mathbf{d_a}$ and the substring
`2' in $\mathbf{d_b}$ is at position $p$.

From $t=p+1$ onwards, the entry in position $t$ in $\mathbf{d_b}$
must be the same as the entry in position $t+2$ in $\mathbf{d_a}$,
except for one pair of entries. In this exception, the entry is 2
in $\mathbf{d_b}$ and 1 in $\mathbf{d_a}$. By mirror symmetry, the
entry in $\mathbf{d_b}$ in position $|\mathbf{d_b}|-p+1$ is 2 and
the entry in $\mathbf{d_a}$ in position $|\mathbf{d_a}|-p+1 =
|\mathbf{d_b}|-p+1+2$ is 1.

We now re-express $\mathbf{d_a}$ as $[A111D1A^R]$ and
$\mathbf{d_b}$ as $[A2D2A^R]$, such that $B=11D$. In particular,
$D$ is non-empty as otherwise $\mathbf{d_b}$ would have a run of
2's of even length which by Lemma~\ref{le12}.2 would imply that
$\mathbf{d_b}$ consists of all 2's. As a consequence,
$\mathbf{d_a}$ would have an inner run of 1's of length 4, which
is impossible by Lemma~\ref{le12}.3.

We suppose that $|D|=l$, $l>0$. By mirror symmetry of
$\mathbf{d_a}$, $D(l)=D(l-1)=1$, and then by mirror symmetry of
$\mathbf{d_b}$, $D(1)=D(2)=1$ as well. By mirror symmetry of
$\mathbf{d_a}$, $D(l-2)=D(l-3)=1$. By continuing on with matching
up the appropriate entries in $\mathbf{d_a}$ and $\mathbf{d_b}$,
and by utilizing mirror symmetry we conclude that $D$ consists of
all 1's. Then, $\mathbf{d_a}=[A1.1A^R]$ and
$\mathbf{d_b}=[A21.12A^R]$, and by Lemma~\ref{le12}.3
$|\mathbf{d_b}|$ is even, as is then $|\mathbf{d_a}|$.

Consider $\mathbf{d_b'}=\mathbf{d_b}(1,|\mathbf{d_b}|/2)$, and
$\mathbf{d_a'}=\mathbf{d_a}(1,|\mathbf{d_a}|/2)$. Since
$|\mathbf{d_a}|$ and $|\mathbf{d_b}|$ are even, there exist
codewords $\mathbf{c_a'}, \mathbf{c_b'} \in C(m-1)$ for which
$\mathbf{d_a'}=d(\mathbf{c_a'})$ and
$\mathbf{d_b'}=d(\mathbf{c_b'})$. Then $\mathbf{d_a'}$ = [$A1.1$]
and $\mathbf{d_b'}$ = [$A21.1$]. If 2 following $A$ in
$\mathbf{d_b'}$ is not in its innermost position, then it would
have a mirror image in $A$ in $\mathbf{d_b'}$ (it cannot have a
mirror image in the run of 1's) but such 2 in $A$ in
$\mathbf{d_a'}$ would not have 2 as its mirror image. Thus
$|A|=|\mathbf{d_b'}|/2-1$ and $A$ has all 1's. Then $\mathbf{d_a}$
itself has all 1's, and $\mathbf{d_b}$ is `1.121.121.1', so that
$\mathbf{c_a}$ is $c_j^m(10)$ or $c_j^m(01)$, and $\mathbf{c_b}$
is $c_{j-1}^m(10)$ or $c_{j-1}^m(01)$, for $j=2^{m-1}$. By the
current assumption on the deletion locations, it follows that
$\mathbf{c_a}$ and $\mathbf{c_b}$ must have the same leftmost bit.
The resulting two pairs of codewords are listed in Group 4. By
reversibility and complementarity these are the only such
pairs.\hfill $\blacksquare$

\begin{remark}
It is well known that a code capable of correcting a deletion is
also capable of correcting an insertion \cite{lev:66}. Moreover,
the codeword pairs that cause the identification problem under a
single insertion are the same as the codeword pairs that cause the
identification problem under a single deletion, and thus Theorem
\ref{THE2} also gives the identification error causing codeword
pairs under a single insertion.\hfill$\blacksquare$
\end{remark}
Having identified all pairs of codewords in RM($1$,$m$) that have
an identification problem, our next goal is to construct a linear
subcode that has good identification under single deletion errors.
It turns out this is possible to do with the loss of only one
information bit, and furthermore, this subcode also has good
identification for single repetition errors.

\subsection{Pruned RM Code}\label{sectionprun}

Let us first recall that the $i^{\text{th}}$ row of $\mathbf{G_m}$,
for $1 <i \leq m+1$ consists of $2^{i-1}$ alternating runs of ones
and zeros, and that each run is of length $2^{m-i+1}$ (see
Section~\ref{sectionRM1}). Observe that the $i^{\text{th}}$ row is
then precisely $c_{2^{i-2}}^m(10)$. In particular, the last two rows
of $\mathbf{G_m}$ are $c_{2^{m-2}}^m(10)$ for $i$ = $m$ and
$c_{2^{m-1}}^m(10)$ for $i$ = $m+1$.

We write $\mathbf{c} \in C(m)$ as $\mathbf{x} \mathbf{G_m}$, where
$\mathbf{x}$ is a $(m+1)$-dimensional message vector so that
$c_{2^{m-1}}^m(10)$ = $[0,0,\ldots,0,1] \mathbf{G_m}$ and
$c_{2^{m-1}}^m(01)$ = $[1,0,\ldots,0,1] \mathbf{G_m}$. Similarly,
$c_{2^{m-2}}^m(10)$ is $[0,0,\ldots,0,1,0] \mathbf{G_m}$ and
$c_{2^{m-2}}^m(01)$ is $[1,0,\ldots,0,1,0] \mathbf{G_m}$.

Observe that $c_{2^{m-1}}^m(10)$ appears in pairs 1). through 3).
and the pair 11). in Theorem~\ref{THE2}. Its complement, the
codeword $c_{2^{m-1}}^m(01)$ appears in pair 1)., 4)., 5). and
10). For both these codewords, there is a non-zero component in
the last, i.e. $(m+1)^{\text{st}}$ position in the corresponding
message vectors. Note that $c_{2^{m-2}}^m(10)$ appears in pairs
8). and 9). and that its complement $c_{2^{m-2}}^m(01)$ appears in
pairs 6). and 7). Furthermore, the sum of the last two entries in
the message vectors corresponding to these two codewords is 1.

We may now try to find as large as possible a linear subcode of
$C(m)$, in which no two codewords cause the identification problem
under one deletion. The generator matrix $\hat{G}$ of this subcode
can have at most $m$ rows. Consider a matrix consisting of the top
$m-1$ rows of $\mathbf{G_m}$, followed by a binary sum of the last
two rows of $\mathbf{G_m}$. Now, $\hat{G}$ has $m$ rows and no
linear combinations of its rows give rise to codewords causing the
identification problem.

Therefore, if instead of using $C(m)$ of rate $\frac{m+1}{2^m}$ we
use its linear subcode $\hat{C}(m)$ of rate $\frac{m}{2^m}$,
generated by the top $m-1$ rows of $\mathbf{G_m}$ and the binary
sum of the last two rows of $\mathbf{G_m}$, we are able to
eliminate the identification problem under a single deletion while
preserving the linearity of the code and suffering a very small
loss in the overall rate.

\begin{remark}
Since a code is immune to a single insertion if and only if it is
immune to a single deletion \cite{lev:66} it immediately follows
that in the subcode $\hat{C}(m)$ no two codewords cause the
identification problem under a single
insertion.\hfill$\blacksquare$
\end{remark}
In the next section, we will see that the subcode we have
constructed is not just immune to single deletions; it also has
good identification under the single deletion model and under the
single repetition model.

In principle, one can utilize the run-length structure of the
RM($1$,$m$) code to determine large subcodes immune to any number
of deletions, or even to combinations of repetitions and
deletions. Such analysis quickly becomes very complicated. A
detailed analysis of the identification problem for the
RM($1$,$m$) codes under the infinite SNR channel model which
permits {\em both} one repetition
and one deletion is contained in \cite{dRMSupTech:06}. % \cite{TBA}.



\section{Decoding the modified RM(1,m) code over
a channel with synchronization and substitution
errors}\label{sectiondec}

In the previous section we described how to extract a linear
subcode of the RM($1$,$m$) code that is immune to a single
deletion. We now consider the behavior of such a subcode over
channels in which, in addition to substitution errors,
synchronization errors can occur as well. We consider two kinds of
channel models for synchronization errors: channels where the
deletion of a single bit can occur, and channels where the
repetition of  a single bit can occur. As in subsection
\ref{Model} we assume in each case that the receiver learns from
the sampled output whether a deletion (respectively, a repetition)
has occurred or not.

In this section, we first determine the minimum distance between
the sets of strings obtained by applying a deletion of a single
bit to codewords of the modified RM($1$,$m$) code. We then compute
the minimum distance between the sets of strings obtained by
applying the repetition of a single bit to codewords of the
modified RM($1$,$m$) code. Finally, in each case, we propose a
bounded distance decoding algorithm for up to half the
corresponding minimum distance over a channel where, in addition
to substitution errors, the synchronization error can occur as
well. The complexity of the decoding algorithm is of the same
order as that of the usual fast Hadamard transform based decoding
for RM($1$,$m$) codes.

\subsection{Minimum distance}\label{sectionmd}

In this subsection we first determine the minimum Hamming distance
between the elements of sets associated with distinct codewords of
the modified code that result from the deletion of a single bit.
Let $\hat{C}(m)$ denote the code whose generator matrix consists
of the top $m-1$ rows of $\mathbf{G_m}$ and the binary sum of the
last two rows of $\mathbf{G_m}$. The code $\hat{C}(m)$ is immune
to one deletion by construction.

We first make the following observation:
\begin{remark}\label{RE1}
For $m \geq 2$ a codeword $\mathbf{c}$ of $C(m)$ belongs to
$\hat{C}(m)$ if and only if all its quadruplets starting at
position $i$ for $i $ mod $4 \equiv 1$ are all `1111' or `0000' or
all are `0110' or `1001'.
\end{remark}
In the remainder we will call quadruplets of $\mathbf{c}$ starting
at position $i$ for $i $ mod $4 \equiv 1$ \textit{constituent}
quadruplets.

For $\mathbf{c} \in \hat{C}(m)$, let $S_d(\mathbf{c})$ denote the
set of strings obtained by applying the deletion of a single bit
to $\mathbf{c}$.

\begin{lemma}\label{LE1}
For $\mathbf{c_a},\mathbf{c_b}$ distinct codewords in
$\hat{C}(m)$, let $D(\mathbf{c_a},\mathbf{c_b})$ be the smallest
Hamming distance between $\mathbf{s_a}$ and $\mathbf{s_b}$ where
$\mathbf{s_a}$ ranges over all elements in the set
$S_d(\mathbf{c_a})$ and $\mathbf{s_b}$ ranges over all elements in
the set $S_d(\mathbf{c_b})$. Let
$D_{min}^m=\min_{\mathbf{c_a},\mathbf{c_b} \in \hat{C}(m),
\mathbf{c_a}\neq \mathbf{c_b}} D(\mathbf{c_a},\mathbf{c_b})$. Then
for $m>2$, $D_{min}^m=2^{m-3}$. Further, for $m \ge 3$,
$D(\mathbf{c_a},\mathbf{c_b})=2^{m-3}$ only for
$\mathbf{c_a}=c_j^m(01)$ or $c_j^m(10)$ for $j=3 \times 2^{m-3}$,
and $\mathbf{c_b}$ either $\mathbf{c_a}+c_1^m(10)$, or
$\mathbf{c_a}+c_1^m(01)$, or vice versa, and in addition for $m
\geq 4$, $\mathbf{c_b}$ is also $\mathbf{c_a}+c_1^m(00)$, or vice
versa.
\end{lemma}
\noindent \textit{Proof:} Suppose that $\mathbf{c_a}$ experiences
a deletion in position $p_1$ and $\mathbf{c_b}$ experiences a
deletion in position $p_2$. Without loss of generality we can
assume that $p_1 <p_2$. Let $p_1'= \lfloor(p_1-1)/4 \rfloor 4+1$
and let $p_2'= \lfloor(p_2-1)/4 \rfloor 4+4$, so that $p_1'$
denotes the first position of the constituent quadruplet $p_1$
belongs to, and $p_2'$ denotes the last position of the
constituent quadruplet $p_2$ belongs to. We also let $l_1$ be the
Hamming distance between the strings $\mathbf{c_a}(1,p_1'-1)$ and
$\mathbf{c_b}(1,p_1'-1)$, $l_2$ be the Hamming distance between
the strings $\mathbf{c_a}(p_1',p_2')$ and
$\mathbf{c_b}(p_1',p_2')$, and $l_3$ be the Hamming distance
between the strings $\mathbf{c_a}(p_2'+1,2^{m})$ and
$\mathbf{c_b}(p_2'+1,2^{m})$, where the notation
$\mathbf{c_i}(p,q)$ indicates the substring of the codeword
$\mathbf{c_i}$ starting at position $p$ and ending at position
$q$. In addition, let $n_c=(p_2'-p_1'+1)/4$ be the total number of
quadruplets spanned by positions $p_1'$ and $p_2'$. By the
standard properties of a Reed-Muller($1$,$m$) code, $l_1+l_2+l_3$
is either $2^{m-1}$ or $2^m$. Let
$\mathbf{\tilde{c}_a}=[\mathbf{c_a}(1,p_1-1) |
\mathbf{c_a}(p_1+1,2^m)]$, and
$\mathbf{\tilde{c}_b}=[\mathbf{c_b}(1,p_2-1) |
\mathbf{c_b}(p_2+1,2^m)]$. Then the Hamming distance
$d_{H}(\mathbf{\tilde{c}_a},\mathbf{\tilde{c}_b})$ between
$\mathbf{\tilde{c}_a}$ and $\mathbf{\tilde{c}_b}$ is
\begin{eqnarray*}
d_{H}(\mathbf{\tilde{c}_a},\mathbf{\tilde{c}_b})&=&
d_H\left(\mathbf{\tilde{c}_a}(1,p_1'-1),\mathbf{\tilde{c}_b}(1,p_1'-1)\right)\\
{}&+&d_H\left(\mathbf{\tilde{c}_a}(p_1',p_2'-1),\mathbf{\tilde{c}_b}(p_1',p_2'-1)\right)\\
{}&+&d_H\left(\mathbf{\tilde{c}_a}(p_2',2^m-1),\mathbf{\tilde{c}_b}(p_2',2^m-1)\right).
\end{eqnarray*}

Observe that the first term in the sum is simply $l_1$ and that
the last term is $l_3$. We let $\tilde{l}_2$ denote the middle
term,
$d_H\left(\mathbf{\tilde{c}_a}(p_1',p_2'-1),\mathbf{\tilde{c}_b}(p_1',p_2'-1)\right)$,
and we establish the relationship between $\tilde{l}_2$ and $l_2$
for all choices of $\mathbf{c_a}$ and $\mathbf{c_b}$, from which
the bound on the overall distance will follow.

1) Let us first consider the case when the constituent quadruplets
in $\mathbf{c_a}$ are `0110' and `1001' and in $\mathbf{c_b}$ are
`0000' and `1111', or vice versa. In this case, the Hamming
distance between $\mathbf{c_a}$ and $\mathbf{c_b}$ is $2^{m-1}$,
and the constituent quadruplet pairs starting at the same
positions in $\mathbf{c_a}$ and $\mathbf{c_b}$ each contribute 2
to the overall Hamming distance. Therefore, $l_2=2n_c$.

If $p_2'-p_1'=3$, then the deletions occur in the same quadruplet,
$l_2$ is 2 to begin with, and the Hamming distance between
$\mathbf{\tilde{c}_a}(p_1',p_2'-1)$ and
$\mathbf{\tilde{c}_b}(p_1',p_2'-1)$ is at least 1, which can be
verified by checking all cases. Hence the Hamming distance between
$\mathbf{\tilde{c}_a}$ and $\mathbf{\tilde{c}_b}$ is at least
$2^{m-1} -1$, which is strictly greater than $2^{m-3}$.

Now suppose that $p_2'-p_1'>3$. Then $n_c>1$. After the deletions,
the Hamming distance between
$\mathbf{\tilde{c}_a}(p_1'+4i,p_1'+3+4i)$ and
$\mathbf{\tilde{c}_b}(p_1'+4i,p_1'+3+4i)$, for $1 \leq i \leq
n_c-2$ is at least 1, as is the distance between the substrings
$\mathbf{\tilde{c}_a}(p_2'-3,p_2'-1)$ and
$\mathbf{\tilde{c}_b}(p_2'-3,p_2'-1)$, and between the substrings
$\mathbf{\tilde{c}_a}(p_1',p_1'+3)$ and
$\mathbf{\tilde{c}_b}(p_1',p_1'+3)$ (which again can be verified
by checking all cases). Then, $\tilde{l}_2 \geq (n_c-2)\times 1 +
1\times 1 +1\times 1=l_2/2$.

Since the Hamming distance between
$\mathbf{\tilde{c}_a}(p_1',p_2'-1)$ and
$\mathbf{\tilde{c}_b}(p_1',p_2'-1)$ is at least $l_2/2$, the
Hamming distance between $\mathbf{\tilde{c}_a}$ and
$\mathbf{\tilde{c}_b}$ is then at least $l_1+l_2/2+l_3$, which is
lower bounded by $2^{m-2}$, and thus strictly greater than
$2^{m-3}$.


2) Suppose now that the constituent quadruplets are `0000' and
`1111' in both $\mathbf{c_a}$ and $\mathbf{c_b}$. The Hamming
distance between $\mathbf{c_a}$ and $\mathbf{c_b}$ is either
$2^{m-1}$ or $2^m$, and the constituent quadruplet pairs starting
at the same positions in $\mathbf{c_a}$ and $\mathbf{c_b}$ each
contribute either 0 or 4 to the overall Hamming distance. In the
segment spanning positions $p_1'$ and $p_2'$ in $\mathbf{c_a}$ and
$\mathbf{c_b}$, $l_2/4$ of the constituent quadruplet pairs each
contribute 4 to the overall Hamming distance between
$\mathbf{c_a}$ and $\mathbf{c_b}$.

If $p_2'-p_1'=3$, the deletions occur in the same quadruplet, and
$l_2$ is either 0 or 4. Then
$d_H\left(\mathbf{\tilde{c}_a}(p_1',p_1'+2),\mathbf{\tilde{c}_b}(p_1',p_1'+2)\right)$
is either 0 (if $l_2 = 0$) or 3 (if $l_2 = 4$). The overall
distance between $\mathbf{\tilde{c}_a}$ and $\mathbf{\tilde{c}_b}$
is thus at least $2^{m-1}-1$, which is bigger than $2^{m-3}$ for
all $m \geq 3$.

If $p_2'-p_1'>3$ we consider constituent quadruplets contained
within positions $p_1'+4$ and $p_2'-4$ in $\mathbf{c_a}$ and
$\mathbf{c_b}$ that start at the same positions and we denote the
set of their starting positions by $Tot$ (the set $Tot$ is non
empty as long as $p_1'$ and $p_2'$ belong to non-adjacent
quadruplets). Let \textit{Com} be the subset of $Tot$ whose
elements index complementary quadruplets in $\mathbf{c_a}$ and
$\mathbf{c_b}$. Then the Hamming distance between the quadruplets
$\mathbf{c_a}(i+1,i+4)$ and $\mathbf{c_b}(i,i+3)$, and
consequently between $\mathbf{\tilde{c}_a}(i,i+3)$ and
$\mathbf{\tilde{c}_b}(i,i+3)$ for $i \in$ \textit{Com} is at least
3. In addition, if $p_2'$ belongs to the constituent quadruplets
of $\mathbf{c_a}$ and $\mathbf{c_b}$ that are complements of each
other, the distance between $\mathbf{\tilde{c}_a}(p_2'-3,p_2'-1)$
and $\mathbf{\tilde{c}_b}(p_2'-3,p_2'-1)$ is at least 3.
Similarly, if $p_1'$ belongs to the constituent quadruplets of
$\mathbf{c_a}$ and $\mathbf{c_b}$ that are complements of each
other, the distance between $\mathbf{\tilde{c}_a}(p_1',p_1'+3)$
and $\mathbf{\tilde{c}_b}(p_1',p_1'+3)$ is also at least 3.
Therefore, the Hamming distance between
$\mathbf{\tilde{c}_a}(p_1',p_2'-1)$ and
$\mathbf{\tilde{c}_b}(p_1',p_2'-1)$ is at least $3\times l_2/4$,
thereby making the overall distance between $\mathbf{\tilde{c}_a}$
and $\mathbf{\tilde{c}_b}$ be at least $l_1+3l_2/4+l_3$, which is
again strictly greater than $2^{m-3}$.




3) Finally, consider $\mathbf{c_a}$ and $\mathbf{c_b}$ with
constituent quadruplets `0110' and `1001'. Again, the Hamming
distance between $\mathbf{c_a}$ and $\mathbf{c_b}$ is either
$2^{m-1}$ or $2^m$, and the constituent quadruplet pairs starting
at the same positions in $\mathbf{c_a}$ and $\mathbf{c_b}$ each
contribute either 0 or 4 to it.

For the case when $p_2'-p_1'=3$, $l_2$ is either 0 or 4, so that
the Hamming distance between $\mathbf{\tilde{c}_a}(p_1',p_2'-1)$
and $\mathbf{\tilde{c}_b}(p_1',p_2'-1)$ is either at least 0 for
$l_2$ = 0 or at least 1 for $l_2$ = 4. In the former case, the
Hamming distance between $\mathbf{\tilde{c}_a}$ and
$\mathbf{\tilde{c}_b}$ is at least $2^{m-1}$, and in latter case
it is least $2^{m-1}-3$. In particular, for $m\geq 4$, $2^{m-1}-3$
is strictly bigger than $2^{m-3}$. For $m=3$, $2^{m-1}-3=
2^{m-3}$. Then $\mathbf{c_a}$ and $\mathbf{c_b}$ would have to be
complements of each other in the quadruplets experiencing
deletions, and would have to be the same in their other
quadruplet. For $\mathbf{c_a}+\mathbf{c_b}$ being either
`00001111' or `11110000', $\mathbf{c_a}$ is then either
$c_3^3(10)$ or $c_3^3(01)$ and $\mathbf{c_b}$ is either
$\mathbf{c_a}+c_1^3(10)$ or $\mathbf{c_a}+c_1^3(01)$ or vice
versa. Observe that these are precisely the codeword pairs listed
at the beginning of the proof for $j=3$ and $m=3$.

If $p_2'-p_1'>3$ we again consider constituent quadruplets
contained within positions $p_1'+4$ and $p_2'-4$ in $\mathbf{c_a}$
and $\mathbf{c_b}$ that start at the same positions and we denote
the set of their starting positions by $Tot$ (the set $Tot$ is non
empty as long as $p_1'$ and $p_2'$ belong to non-adjacent
quadruplets). Let \textit{Com} be the subset of $Tot$ whose
elements index complement quadruplets in $\mathbf{c_a}$ and
$\mathbf{c_b}$, and let $Sam=Tot-Com$.

Then the Hamming distance between $\mathbf{c_a}(i+1,i+4)$ and
$\mathbf{c_b}(i,i+3)$ for $i \in$ \textit{Com} is either 1 or 2,
and we denote their total number by $s_{1}^1$ and $s_{2}^1$,
respectively such that $s_{1}^1+s_{2}^1=|$\textit{Com}$|$. The
Hamming distance between $\mathbf{c_a}(i+1,i+4)$ and
$\mathbf{c_b}(i,i+3)$ for $i \in$ \textit{Sam} is either 2 or 3,
and we similarly denote their total number by $s_{2}^0$ and
$s_{3}^0$, respectively, where $s_{2}^0+s_{3}^0=|$\textit{Sam}$|$.
In addition, if $p_2'$ belongs to the constituent quadruplets of
$\mathbf{c_a}$ and $\mathbf{c_b}$ that are complements of each
other, the distance between $\mathbf{\tilde{c}_a}(p_2'-3,p_2'-1)$
and $\mathbf{\tilde{c}_b}(p_2'-3,p_2'-1)$ is either 1, 2, or 3,
which we denote by $t_2^1$, and is either 0, 1, or 2 if those two
quadruplets in $\mathbf{c_a}$ and $\mathbf{c_b}$ are the same, in
which case we denote it by $t_2^0$. Let $J_2=1$ if these two
quadruplets are complements and let $J_2=0$ otherwise. Finally,
the distance between $\mathbf{\tilde{c}_a}(p_1',p_1'+3)$ and
$\mathbf{\tilde{c}_b}(p_1',p_1'+3)$ is $0$, $1$, $2$, or $3$ if
the corresponding quadruplets in $\mathbf{c_a}$ and $\mathbf{c_b}$
are the same, when is denoted by $t_1^0$, and  is $1$, $2$, $3$,
or $4$ if these quadruplets are complements, when is denoted by
$t_1^1$. Let $J_1=1$ for complement quadruplets and $J_1=0$ for
the same.

The overall Hamming distance between $\mathbf{\tilde{c}_a}$ and
$\mathbf{\tilde{c}_b}$ is then
\[l_1+J_1t_1^1+(1-J_1)t_1^0+s_{1}^1+2s_{2}^1+2s_{2}^0+3
s_{3}^0+J_2t_2^1+(1-J_2)t_2^0+l_3.\] Observe that
$s_{1}^1+s_{2}^1+J_1+J_2=l_2/4$.

Since $t_{1}^1 \ge 1$ and $t_{2}^1 \ge 1$ we have
\begin{eqnarray*}
d_H(\mathbf{\tilde{c}_a}, \mathbf{\tilde{c}_b}) &\ge&
l_1 + J_1 + s_{1}^1 + s_{2}^1 + J_2 + l_3\\
&=& l_1 + \frac{l_2}{4} + l_3\\
&\ge& \frac{1}{4} d_H(\mathbf{c}_a, \mathbf{c}_b) \ge 2^{m-3}~.
\end{eqnarray*}
Equality holds in this sequence of inequalities if and only if
$d_H(\mathbf{c}_a, \mathbf{c}_b) = 2^{m-1}$ (i.e. $\mathbf{c}_a$
and $\mathbf{c}_b$ are not complements of each other), $l_1 = 0$,
$l_3 =0$, $s_{2}^0 = 0$, $s_{3}^0 = 0$, $s_{2}^1 = 0$, and one of
the following four cases holds:

(a) $(J_1, J_2) = (1, 1)$ and $(t_{1}^1, t_{2}^1) = (1, 1)$,

(b) $(J_1, J_2) = (0, 1)$ and $(t_{1}^0, t_{2}^1) = (0, 1)$,

(c) $(J_1, J_2) = (1, 0)$ and $(t_{1}^1, t_{2}^0) = (1, 0)$,

(d) $(J_1, J_2) = (0, 0)$ and $(t_{1}^0, t_{2}^0) = (0, 0)$.


Since $l_1=0$ and $l_3=0$, all constituent quadruplets in
$\mathbf{c_a}(1,p_1'-1)$ and $\mathbf{c_b}(1,p_1'-1)$ as well as
in $\mathbf{c_a}(p_2'+1,2^m)$ and $\mathbf{c_b}(p_2'+1,2^m)$ are
pairwise the same. Since $s_{2}^0$ = $s_{3}^0$ = $0$, the
constituent quadruplets spanning positions $p_1'+4$ through
$p_2'-4$ in $\mathbf{c_a}$ and $\mathbf{c_b}$ are pairwise
complements of each other. Moreover, since $s_2^1=0$ they are
actually alternating `1001' and `0110' in $\mathbf{c_a}$ and are
alternating `0110' or `1001' in $\mathbf{c_b}$, or vice versa. The
quadruplets in $\mathbf{c_a}$ and $\mathbf{c_b}$ to which $p_1'$
($p_2'$) belongs are the same if $J_1=0$ ($J_2=0$), and otherwise
they are complements. Therefore, for all four cases,
$\mathbf{c_a}+\mathbf{c_b}$ is of the type `0.01.10.0', with
possibly one run of zeros empty (but not both as then
$\mathbf{c_a}$ and $\mathbf{c_b}$ would be complements), and is
such that it belongs to $\hat{C}(m)$. Specifically,
$\mathbf{c_a}+\mathbf{c_b}$ is either $c_1^m(10)$, $c_1^m(01)$, or
$c_1^m(00)$, and by $p_2'-p_1'>3$, $m$ is at least 3. Since
$c_1^m(00) \notin \hat{C}(m)$ for $m =3$, no new pairs can result
from this analysis in this case, so we may assume from now on that
$m \ge 4$.

Let $p_l$ and $p_r$ be the positions of the leftmost and the
rightmost 1 in $\mathbf{c_a}+\mathbf{c_b}$. %Observe that
%$p_r-p_l+1=2^{m-1}$
%for all three choices of $\mathbf{c_a}+\mathbf{c_b}$.%From the form of
%$\mathbf{c_a}+\mathbf{c_b}$ it follows that there are at least
%$1/2(2^{m-2})-2$ contiguous alternating '0110' and '1001' (or vice
%versa) spanning positions $p_1'+4$ and $p_2'-4$ in $\mathbf{c_a}$.
Then $p_1'$ is either $p_l$ or $p_l-4$, depending on the value of
$J_1$ and on the format of $\mathbf{c_a}+\mathbf{c_b}$, and
likewise $p_2'$ is either $p_r$ or $p_r+4$, depending on the value
of $J_2$ and $\mathbf{c_a}+\mathbf{c_b}$. In particular, for
$\mathbf{c_a}+\mathbf{c_b}$ equal to $c_1^m(10)$, $J_1$ must be
$1$ and $p_1'=p_l$, and for $\mathbf{c_a}+\mathbf{c_b}$ equal to
$c_1^m(01)$, $J_2$ must be $1$ and $p_2'=p_r$.

For $m>5$, since there are at least $1/2(2^{m-2})-2$ contiguous
alternating `0110' and `1001' (or vice versa) spanning positions
$p_1'+4$ and $p_2'-4$ in $\mathbf{c_a}$, and since $(p_l,p_r)$ is
either $(1,2^{m-1})$ or $(2^{m-1}+1,2^m)$ or $(2^{m-2}+1,3\times
2^{m-2})$, by the concatenation principle it follows that all
quadruplets spanning positions $p_l$ and $p_r$ in $\mathbf{c_a}$
are alternating `0110' and `1001', or vice versa. It then follows
that under the set of constraints $(l_1=0, l_3=0,
s_2^0=0,s_3^0=0,s_2^1=0)$, $\mathbf{c_a}$ can only be $c_j^m(01)$
or $c_j^m(10)$ for $j=3\times 2^{m-3}$, and $\mathbf{c_b}$ is then
$\mathbf{c_a}+c_1^m(10)$, $\mathbf{c_a}+c_1^m(01)$, or
$\mathbf{c_a}+c_1^m(00)$, or vice versa. It remains to determine
whether these candidate codeword pairs satisfy one of the (a)
through (d) cases.

From the structure of the candidate codeword pairs, it follows for
example that all six codeword pairs achieve $D_{min}^m$ for
$(J_1,J_2,t_1^1,t_2^1)=(1,1,1,1)$, with deletions in positions
$(p_1,p_2)=(2^{m-1}+1,2^m)$ for
$\mathbf{c_a}+\mathbf{c_b}=c_1^m(01)$, in positions $(p_1,p_2)=(1,
2^{m-1})$ for $\mathbf{c_a}+\mathbf{c_b}=c_1^m(10)$, and in
positions $(p_1,p_2)=(2^{m-2}+1, 3 \times 2^{m-2})$ for
$\mathbf{c_a}+\mathbf{c_b}=c_1^m(00)$, such that both individual
values of $\mathbf{c_a}$ and $\mathbf{c_b}$ per pair are possible.

% this paragraph lists all other possible configurations
%In addition, $(\mathbf{c_a}$, $\mathbf{c_b})$ equal to
%$(c_j^m(01)+c_1^m(01),c_j^m(01))$,
%$(c_j^m(01)+c_1^m(00),c_j^m(01))$,
%$(c_j^m(10)+c_1^m(01),c_j^m(10))$,
%$(c_j^m(10)+c_1^m(00),c_j^m(10))$, achieves $D_{min}^m$ for
%$(J_1,J_2,t_1^0,t_2^1)=(0,1,0,1)$, and likewise $(c_j^m(01),
%c_j^m(01)+c_1^m(01))$, $(c_j^m(01), c_j^m(01)+c_1^m(00))$,
%$(c_j^m(10), c_j^m(10)+c_1^m(01))$, $(c_j^m(10),
%c_j^m(10)+c_1^m(00))$, achieves $D_{min}^m$ for
%$(J_1,J_2,t_1^1,t_2^0)=(1,0,1,0)$, where $(\mathbf{c_a}$,
%$\mathbf{c_b})$ refers to the ordered pair such that the deletion
%in $\mathbf{c_a}$ occurs before the deletion in $\mathbf{c_b}$.



%Since in particular $s_{2}^0$ = $s_{3}^0$ = $0$, for the case when
%$s_{1}^1=l_4/4-1$, $J=1$, $t_2^1=1$ and all other terms equal to
%zero, the constituent quadruplets spanning positions $p_1'$ and
%$p_2'$ in $\mathbf{c_a}+\mathbf{c_b}$ are all '1111'. Likewise,
%for the case when $s_1^1=l/4$ and all other quantities equal to
%zero, the constituent quadruplets spanning positions $p_1'$ and
%$p_2'-4$ in $\mathbf{c_a}+\mathbf{c_b}$ are all '1111'. Either
%way, $\mathbf{c_a}+\mathbf{c_b}$ is 0.01.10.0, with possibly one
%run of zeros empty (but not both as then $\mathbf{c_a}$ and
%$\mathbf{c_b}$ would be complements), and is such that it belongs
%to $\hat{C}(m)$. Moreover, the run of 1's cannot be empty as that
%would imply $\mathbf{c_a}$ = $\mathbf{c_b}$, so that in the second
%case even the stronger condition $p_2'-p_1>4$ holds. Specifically,
%$\mathbf{c_a}+\mathbf{c_b}$ is either $c_1^m(10)$, or $c_1^m(01)$,
%or $c_1^m(00)$, and by $p_2'-p_1'>3$, $m$ is at least 4.
%Since $s_{2}^1$ = $0$, the constituent quadruplets spanning
%position $p_1'$ and $p_2'$ for the \textit{minimizing set 1}, and
%positions $p_1'$ and $p_2'-4$ for the \textit{minimizing set 2} in
%$\mathbf{c_a}$ are alternating '0110' and '1001', or vice versa.
%Then $\mathbf{c_a}$ itself is $c_j^m(01)$ or $c_j^m(10)$ for
%$j=3*2^{m-3}$, and $\mathbf{c_b}$ is either
%$\mathbf{c_a}+c_1^m(10)$, $\mathbf{c_a}+c_1^m(01)$, or
%$\mathbf{c_a}+c_1^m(00)$, or vice versa.

For $m=4$ and $m=5$ the pairs of codewords
$\{\mathbf{c_a},\mathbf{c_b}\}$ achieving the proposed $D_{min}^m$
can be identified directly, and they have the same format as
codewords achieving $D_{min}^m$ for $m > 5$. This concludes the
proof of the lemma. \hfill$\blacksquare$

We next determine the minimum Hamming distance between the
elements of sets associated with distinct codewords of the
modified code that result from the repetition of a single bit.

For $\mathbf{c} \in \hat{C}(m)$, let $S_r(\mathbf{c})$ denote the
set of strings obtained by applying the repetition of a single bit
to $\mathbf{c}$. Recall that $S_d(\mathbf{c})$ denotes the set of
strings obtained by applying the deletion of a single bit to
$\mathbf{c}$.

\begin{lemma}\label{LE1a}
For $\mathbf{c_a},\mathbf{c_b}$ distinct codewords in
$\hat{C}(m)$, let $R(\mathbf{c_a},\mathbf{c_b})$ be the smallest
Hamming distance between $\mathbf{t_a}$ and $\mathbf{t_b}$ where
$\mathbf{t_a}$ ranges over all elements in the set
$S_r(\mathbf{c_a})$ and $\mathbf{t_b}$ ranges over all elements in
the set $S_r(\mathbf{c_b})$. Let
$R_{min}^m=\min_{\mathbf{c_a},\mathbf{c_b} \in \hat{C}(m),
\mathbf{c_a}\neq \mathbf{c_b}} R(\mathbf{c_a},\mathbf{c_b})$. Then
for $m>2$, $R_{min}^m=2^{m-3}+1$. Further, for $m \ge 3$,
$R(\mathbf{c_a},\mathbf{c_b})=2^{m-3}+1$ only for
$\mathbf{c_a}=c_j^m(01)$ or $c_j^m(10)$ for $j=3 \times 2^{m-3}$,
and $\mathbf{c_b}$ either $\mathbf{c_a}+c_1^m(10)$, or
$\mathbf{c_a}+c_1^m(01)$, or vice versa, and in addition for $m
\geq 4$, $\mathbf{c_b}$ is also $\mathbf{c_a}+c_1^m(00)$, or vice
versa.
\end{lemma}

\noindent \textit{Proof:} We first observe that $0 \leq
R(\mathbf{c_a},\mathbf{c_b})-D(\mathbf{c_a},\mathbf{c_b}) \leq 2$,
where $D(\mathbf{c_a},\mathbf{c_b})$ is as defined in Lemma
\ref{LE1}.  To see this, consider $\mathbf{s_a}$ obtained by
deleting a bit in $\mathbf{c_a}$ in position $p_a$, and
$\mathbf{s_b}$ obtained by deleting a bit in $\mathbf{c_b}$ in
position $p_b$. For $p_a<p_b$, $d_H(\mathbf{s_a},\mathbf{s_b})$ is
\begin{eqnarray*}d_H(\mathbf{s_a},\mathbf{s_b}) &=&
d_H(\mathbf{c_a}(1,p_a-1),\mathbf{c_b}(1,p_a-1))\\
{}&+&d_H(\mathbf{c_a}(p_a+1,p_b),\mathbf{c_b}(p_a,p_b-1))\\
{}&+&d_H(\mathbf{c_a}(p_b+1,n),\mathbf{c_b}(p_b+1,n)).\end{eqnarray*}

For $\mathbf{t_a} \in S_r(\mathbf{c_a})$ and $\mathbf{t_b} \in
S_r(\mathbf{c_b})$ such that the bit in position $p_b$ ($p_a$) is
the bit that gets repeated in $\mathbf{t_a}$ ($\mathbf{t_b}$),
write $d_H(\mathbf{t_a},\mathbf{t_b})$ as
\begin{eqnarray*}
d_H(\mathbf{t_a},\mathbf{t_b})&=&d_H(\mathbf{c_a}(1,p_a-1),\mathbf{c_b}(1,p_a-1))
+d_1\\
{}&+&d_H(\mathbf{c_a}(p_a+1,p_b),\mathbf{c_b}(p_a,p_b-1)) +d_2\\
{}&+&d_H(\mathbf{c_a}(p_b+1,n),\mathbf{c_b}(p_b+1,n)),
\end{eqnarray*}
where $d_1=\mathbf{c_a}(p_a)+\mathbf{c_b}(p_a)$ and
$d_2=\mathbf{c_a}(p_b)+\mathbf{c_b}(p_b)$. Therefore, $0 \le
d_H(\mathbf{t_a},\mathbf{t_b})- d_H(\mathbf{s_a},\mathbf{s_b}) =
d_1+d_2 \leq 2$. A similar argument gives the same inequality for
$p_a > p_b$. Taking the minimum over all $(p_a, p_b)$, the claim
of this paragraph follows.


By Lemma~\ref{LE1}, $D_{min}^m=2^{m-3}$, so that $R_{min}^m$ is at
most $2^{m-3}+2$. We use the nomenclature introduced in
Lemma~\ref{LE1} to determine the codewords $\mathbf{c_a}$,
$\mathbf{c_b}$ for which $D(\mathbf{c_a},\mathbf{c_b})$ yields the
proposed bound on $R(\mathbf{c_a},\mathbf{c_b})$, i.e. the
codewords for which $D(\mathbf{c_a},\mathbf{c_b})$ is at most
$2^{m-3}+1$.


1) Let us first consider the case when the constituent quadruplets
in $\mathbf{c_a}$ are `0110' and `1001' and in $\mathbf{c_b}$ are
`0000' and `1111', or vice versa. From the proof of
Lemma~\ref{LE1} it follows that $D(\mathbf{c_a},\mathbf{c_b})$ is
at least $2^{m-2}$, as is then $R(\mathbf{c_a},\mathbf{c_b})$. The
proposed lower bound can only be met for $m = 3$. By checking all
cases, for $m = 3$, it follows that $R(\mathbf{c_a},\mathbf{c_b})$
is at least $4$, thus exceeding the proposed lower bound.

2) Suppose now that the constituent quadruplets are `0000' and
`1111' in both $\mathbf{c_a}$ and $\mathbf{c_b}$. From the proof
of Lemma~\ref{LE1} it follows that $D(\mathbf{c_a},\mathbf{c_b})$
is at least $3 \times 2^{m-3}$, and thus
$R(\mathbf{c_a},\mathbf{c_b})$ is strictly greater than the
proposed lower bound.

3) Finally, consider $\mathbf{c_a}$ and $\mathbf{c_b}$ with
constituent quadruplets `0110' and `1001'.

We assume that $p_1'$, $p_2'$, $\mathbf{\tilde{c}_a}$,
$\mathbf{\tilde{c}_b}$, $l_1$, $l_2$, $l_3$ as well as $t_1^0$,
$t_1^1$, $t_2^0$, $t_2^1$, $s_{1}^1$, $s_{2}^1$, $s_{2}^0$, and
$s_{3}^0$ are as defined in the proof of Lemma~\ref{LE1}.

 In the notation of Lemma~\ref{LE1}, if
$p_2'-p_1' = 3$, $D(\mathbf{c_a},\mathbf{c_b})$ is at least
$2^{m-1}-3$, thus exceeding $2^{m-3}+1$ for $m \geq 4$. For $m =
3$, there are four codewords in $\hat{C}(m)$ having `0110' and
`1001' as constituent quadruplets. It follows by direct checking
that $R(\mathbf{c_a},\mathbf{c_b})=2^{m-3}+1=2$ only for
$\mathbf{{c}_a}$ =`01101001' or `10010110' and
$\mathbf{{c}_b}=\mathbf{{c}_a}+c_1^3(01)$ or
$\mathbf{{c}_b}=\mathbf{{c}_a}+c_1^3(10)$, or vice versa. In the
remainder we will assume $m \geq 4$.

For $p_2'-p_1' >3$, in the notation of Lemma~\ref{LE1}, the
overall Hamming distance between $\mathbf{\tilde{c}_a}$ and
$\mathbf{\tilde{c}_b}$ is
\begin{equation}\label{eq1}
\begin{array}{ccc}
d_H(\mathbf{\tilde{c}_a}, \mathbf{\tilde{c}_b}) &=&
l_1+J_1t_1^1+(1-J_1)t_1^0+s_{1}^1+2s_{2}^1+\\{}&{}&2s_{2}^0+3
s_{3}^0+J_2t_2^1+(1-J_2)t_2^0+l_3, \end{array}\end{equation} where
$s_{1}^1+s_{2}^1+J_1+J_2=l_2/4$.

As established in Lemma~\ref{LE1}, for $d_H(\mathbf{\tilde{c}_a},
\mathbf{\tilde{c}_b})$ to equal $2^{m-3}$ for $m \geq 4$ it is
necessary that $\mathbf{c_a}$ is $c_j^m(01)$ or $c_j^m(10)$ for
$j=3\times 2^{m-3}$, and $\mathbf{c_b}$ is either
$\mathbf{c_a}+c_1^m(10)$, $\mathbf{c_a}+c_1^m(01)$, or
$\mathbf{c_a}+c_1^m(00)$, or vice versa. By direct checking it
follows that $R(\mathbf{c_a},\mathbf{c_b})$ is precisely
$2^{m-3}+1$ for all six codeword pairs (since the deletions in
$\mathbf{c_a}$ and $\mathbf{c_b}$ yielding $D_{min}^m$ are such
that one of them belongs to a run of size 2 and the other belongs
to a run of size 1).


It remains to determine $\mathbf{c_a}$, $\mathbf{c_b}$ for which
$d_H(\mathbf{\tilde{c}_a}, \mathbf{\tilde{c}_b})$ equals
$2^{m-3}+1$, and such that both deletions occur in runs of size
bigger than 1. Using the expression in (\ref{eq1}) it follows that
$d_H(\mathbf{c_a}, \mathbf{c_b}) = 2^{m-1}$, $l_1 = 0$, $l_3 =0$,
$s_{2}^0 = 0$, $s_{3}^0 = 0$, (use ($\triangle$) as a shorthand
for set of conditions ($\triangle$)) and one of the following
holds:

(a) $(J_1, J_2) = (0, 1)$ and $(t_{1}^0, t_{2}^1, s_2^1) = (0, 2,
0)$,

(b) $(J_1, J_2) = (0, 1)$ and $(t_{1}^0, t_{2}^1, s_2^1) = (1, 1,
0)$,

(c) $(J_1, J_2) = (1, 0)$ and $(t_{1}^1, t_{2}^0, s_2^1) = (2, 0,
0)$,

(d) $(J_1, J_2) = (1, 0)$ and $(t_{1}^1, t_{2}^0, s_2^1) = (1, 1,
0)$,

(e) $(J_1, J_2) = (0, 0)$ and $(t_{1}^0, t_{2}^0, s_2^1) = (1, 0,
0)$,

(f) $(J_1, J_2) = (0, 0)$ and $(t_{1}^0, t_{2}^0, s_2^1) = (0, 1,
0)$,

(g) $(J_1, J_2) = (1, 1)$ and $(t_{1}^1, t_{2}^1, s_2^1) = (2, 1,
0)$,

(h) $(J_1, J_2) = (1, 1)$ and $(t_{1}^1, t_{2}^1, s_2^1) = (1, 2,
0)$,

(i) $(J_1, J_2) = (0, 1)$ and $(t_{1}^0, t_{2}^1, s_2^1) = (0, 1,
1)$,

(j) $(J_1, J_2) = (1, 0)$ and $(t_{1}^1, t_{2}^0, s_2^1) = (1, 0,
1)$,

(k) $(J_1, J_2) = (0, 0)$ and $(t_{1}^0, t_{2}^0, s_2^1) = (0, 0,
1)$,

(l) $(J_1, J_2) = (1, 1)$ and $(t_{1}^1, t_{2}^1, s_2^1) = (1, 1,
1)$,

Since $l_1=0$ and $l_3=0$, all constituent quadruplets in
$\mathbf{c_a}(1,p_1'-1)$ and $\mathbf{c_b}(1,p_1'-1)$ as well as
in $\mathbf{c_a}(p_2'+1,2^m)$ and $\mathbf{c_b}(p_2'+1,2^m)$ are
pairwise the same. Since $s_{2}^0$ = $s_{3}^0$ = $0$, the
constituent quadruplets spanning positions $p_1'+4$ through
$p_2'-4$ in $\mathbf{c_a}$ and $\mathbf{c_b}$ are pairwise
complements of each other. Therefore, for all cases,
$\mathbf{c_a}+\mathbf{c_b}$ is of the type `0.01.10.0', with
possibly one run of zeros empty (but not both as then
$\mathbf{c_a}$ and $\mathbf{c_b}$ would be complements), and is
such that it belongs to $\hat{C}(m)$.

% the part below is changed
First observe that for cases (a) through (h), the common
constraint $s_2^1 = 0$, along with the constraint set
($\triangle$) is the same as the set of constraints on the same
parameters established in the proof of Lemma~\ref{LE1}. As given
in the proof of Lemma~\ref{LE1} under the set of constraints
$(l_1=0, l_3=0, s_2^0=0,s_3^0=0,s_2^1=0)$, $\mathbf{c_a}$ can only
be $c_j^m(01)$ or $c_j^m(10)$ for $j=3\times 2^{m-3}$, and
$\mathbf{c_b}$ can only then be $\mathbf{c_a}+c_1^m(10)$,
$\mathbf{c_a}+c_1^m(01)$, or $\mathbf{c_a}+c_1^m(00)$, or vice
versa. Observe that these codeword pairs are already established
in the earlier case when
$d_H(\mathbf{\tilde{c}_a},\mathbf{\tilde{c}_b})=2^{m-3}$ was
analyzed (though it can also be verified that these candidate
codeword pairs satisfy at least one of the (a) through (h) cases,
and with deletions in appropriate runs of size 2 result in strings
with Hamming distance $2^{m-3}+1$).


%It thus remains to verify that there exist strings
%$\mathbf{\tilde{c}_a} \in S_d(\mathbf{c_a})$ and
%$\mathbf{\tilde{c}_b} \in S_d(\mathbf{c_b})$ for which
%$d_{H}(\mathbf{\tilde{c}_a},\mathbf{\tilde{c}_b})=2^{m-3}+1$ and
%are such that both $\mathbf{\tilde{c}_a}$ and
%$\mathbf{\tilde{c}_b}$ are obtained from their respective
%codewords by a deletion in a run of size 2.
%It thus gives rise to the codeword pairs already established.


The remaining cases (i) through (l) all share the same constraint
that $s_2^1 = 1$, which implies that all constituent quadruplets
spanning positions $p_1'+8$ through $p_2'-4$ in $\mathbf{c_a}$ and
$\mathbf{c_b}$ are the complements of their left neighboring
quadruplets, except for one constituent quadruplet which is the
same as its left neighboring quadruplet.

Let $p_l$ and $p_r$ be the positions of the leftmost and the
rightmost 1 in $\mathbf{c_a}+\mathbf{c_b}$, so that $(p_l,p_r)$ is
either $(1,2^{m-1})$ or $(2^{m-1}+1,2^m)$ or $(2^{m-2}+1,3 \times
2^{m-2})$. Depending on the values of $J_1$ and $J_2$ and the
structure of $\mathbf{c_a}+\mathbf{c_b}$, $p_1'$ is either $p_l-4$
or $p_l$ and $p_2'$ is either $p_r+4$ or $p_r$, so that all
constituent quadruplets spanning positions $p_l+8$ through $p_r-4$
in $\mathbf{c_a}$ and $\mathbf{c_b}$ are the complements of their
left neighboring quadruplets with the exception of one constituent
quadruplet which is the same as its left neighboring quadruplet.

For $m>5$, by the concatenation principle it follows that this
singular constituent quadruplet must be the one starting at the
position $2^{m-1}+1$ so that $\mathbf{c_a}+\mathbf{c_b}$ is
$c_1^m(00)$. Moreover, the constituent quadruplets spanning
positions $p_l=2^{m-2}+1$ and $2^{m-1}$ are then alternating
`0110' and `1001' (or vice versa), followed by alternating `1001'
and `0110' (or vice versa) that span positions $2^{m-1}+1$ and
$p_r=3\times 2^{m-2}$. As a result, it follows that $\mathbf{c_a}$
is $c_j^m(11)$ or $c_{j-1}^m(00)$ for $j=3\times 2^{m-3}-1$, and
$\mathbf{c_b}$ is either $\mathbf{c_a}+c_1^m(10)$,
$\mathbf{c_a}+c_1^m(01)$, or $\mathbf{c_a}+c_1^m(00)$, or vice
versa. However, in all cases, when
$d_{H}(\mathbf{\tilde{c}_a},\mathbf{\tilde{c}_b})=2^{m-3}+1$, not
both deletion errors can be in runs of size bigger than 1 (which
can be verified by direct checking of all possible constraint sets
as given by (i) through (l)), and therefore
$R(\mathbf{c_a},\mathbf{c_b})$ is strictly greater than
$2^{m-3}+1$.

For $m =4, 5$ it can be checked directly that the only codeword
pairs achieving
$d_{H}(\mathbf{\tilde{c}_a},\mathbf{\tilde{c}_b})=2^{m-3}+1$ under
the current constraints are the same as for $m>5$. Again, not both
deletions can occur in runs of size 2, and thus
$R(\mathbf{c_a},\mathbf{c_b})$ is again strictly greater than
$2^{m-3}+1$. \hfill$\blacksquare$



\subsection{Decoding algorithm}\label{sectiondecalg}

In this subsection, we first propose a bounded distance decoding
scheme for ${\hat C}(m)$ which corrects one deletion and up to
$2^{m-4}-1$ substitution errors. We outline the algorithm and
discuss its correctness and complexity.


A common technique for decoding a codeword in a Reed-Muller
($1$,$m$) code that has experienced a certain number of
substitution errors involves computing a fast Hadamard transform
of the received string, \cite[$\S$4, Ch.14]{mws:77}. Specifically,
the received string $\mathbf{s}$ (of length $n$) is multiplied by
a Hadamard matrix $H_n$ to form $\mathbf{s} H_n$. The computation
is done efficiently by starting with the binary string
$\mathbf{s}$ of length $n =2^m$ and carrying out $m$ stages, each
of which involves $n = 2^m$ additions of integers, to return the
integer valued string $\mathbf{s} H_n$ of length $n$. Subsequently
one needs to find the coordinate in this integer string of maximum
absolute value. The complexity of the overall algorithm is
therefore normally quoted as $O(n \log n)$.

In our situation, let $\mathbf{c} \in \hat{C}(m)$ for $m \geq 5$
be the transmitted codeword. Let $\mathbf{s}$ be the received
string obtained from $\mathbf{c}$ by one deletion and at most
$2^{m-4}-1$ substitution errors. Thus, the received string
$\mathbf{s}$ is of length $n-1$. The objective is to recover
$\mathbf{c}$ from $\mathbf{s}$. In principle one could construct
strings of length $n$ by inserting either 0 or 1 at each position
in $\mathbf{s}$ and compare each resulting string with candidate
codewords from $\hat{C}(m)$, which would be equivalent to
performing $2n$ standard decoding operations. The complexity of
such an algorithm would be $O(n^2 \log n)$. However, it is
possible to do much better.

For any codeword $\tilde{\mathbf{c}} \in \hat{C}(m)$, write
$\tilde{\mathbf{c}} = \left[ \tilde{\mathbf{c}}^L |
\tilde{\mathbf{c}}^R \right]$, where $\tilde{\mathbf{c}}^L$ and
$\tilde{\mathbf{c}}^R$ are each of length $2^{m-1}$. In
particular, the transmitted codeword $\mathbf{c}$ is written as
$\mathbf{c} = \left[ \mathbf{c}^L | \mathbf{c}^R \right]$. From
the received string $\mathbf{s}$ we create $\mathbf{s}^L = \left[
s(1) \ldots s(2^{m-1}) \right]$ and $\mathbf{s}^R = \left[
s(2^{m-1}) \ldots s(2^m -1) \right]$. Each of these strings is of
length $2^{m-1}$.

If the location of the deletion is in the second half of the
codeword, then $\mathbf{s}^L$ is obtained from $\mathbf{c}^L$ by
at most  $2^{m-4}-1$ substitution errors. Further, for every
$\tilde{\mathbf{c}} \in \hat{C}(m)$ other than $\mathbf{c}$ and
$\mathbf{c} + c_1^m(01)$ we have
\begin{eqnarray*}
d_H(\mathbf{s}^L, \tilde{\mathbf{c}}^L) &\ge& d_H(\mathbf{c}^L,
\tilde{\mathbf{c}}^L) - d_H(\mathbf{s}^L, \mathbf{c}^L)\\
{}& \ge& 2^{m-2} - (2^{m-4} -1)\\ {}&> &2^{m-4}~.
\end{eqnarray*}
If one uses the fast Hadamard transform to compute $\left[
\mathbf{s}^L | \mathbf{0} \right] H_n$, the coordinate with
maximum absolute value will then correspond to either the pair
comprised of $\mathbf{c}$ and its bitwise complement or the pair
comprised of $\mathbf{c} + c_1^m(01)$ and its bitwise complement.
Further, there will be at most two competing locations for the
maximum absolute value.

Similarly, if the location of the deletion is in the first half of
the codeword, then $\mathbf{s}^R$ is obtained from $\mathbf{c}^R$
by at most  $2^{m-4}-1$ substitution errors, so by using the fast
Hadamard transform to compute $\left[ \mathbf{0} | \mathbf{s}^R
\right] H_n$, the coordinate with maximum absolute value will
correspond to either the pair comprised of $\mathbf{c}$ and its
bitwise complement or the pair comprised of $\mathbf{c} +
c_1^m(10)$ and its bitwise complement. Again, there will be at
most two competing locations for the maximum absolute value.

Thus, in $O(n \log n)$ operations we will be presented with at
most $8$ candidates for the transmitted codeword. We may now go
the naive step of considering all the $2n$ strings of length $n$
got by inserting either 0 or 1 at each position in $\mathbf{s}$
and compare each resulting string with each of these $8$ candidate
codewords. In $O(n)$ operations we will arrive at the true
codeword.

There are some obvious inefficiencies in the algorithm just
described. For instance, it is not really necessary to compare the
received string with the columns of $H_n$ that correspond to
strings in $C(m)$ that are not in $\hat{C}(m)$. An analysis of
this inefficiency could save a constant factor. The second stage
could also undoubtedly be improved, but this is less interesting
because the overall complexity is dominated by the first stage.
Since using the first stage as described has the significant
practical advantage that the existing hardware which is used to
decode when there is no deletion can also be used when there is a
deletion, we have preferred to describe the overall algorithm as
above.

Finally, along similar lines, we propose a bounded distance
decoding scheme for ${\hat C}(m)$ for $m \ge 4$ which corrects one
repetition and up to $2^{m-4}$ substitution errors and discuss its
correctness and complexity. Let $\mathbf{s}$ be the received
string obtained from $\mathbf{c}$ by one repetition and at most
$2^{m-4}$ substitution errors. Thus, the received string
$\mathbf{s}$ is of length $n+1$. As before, for any codeword
$\tilde{\mathbf{c}} \in \hat{C}(m)$, write $\tilde{\mathbf{c}} =
\left[ \tilde{\mathbf{c}}^L | \tilde{\mathbf{c}}^R \right]$, where
$\tilde{\mathbf{c}}^L$ and $\tilde{\mathbf{c}}^R$ are each of
length $2^{m-1}$. The transmitted codeword $\mathbf{c}$ is written
as $\mathbf{c} = \left[ \mathbf{c}^L | \mathbf{c}^R \right]$. From
the received string $\mathbf{s}$ we create $\mathbf{s}^L = \left[
s(1) \ldots s(2^{m-1}) \right]$ and $\mathbf{s}^R = \left[
s(2^{m-1}) \ldots s(2^m -1) \right]$. Each of these strings is of
length $2^{m-1}$.

If the location of the repetition is in the second half of the
codeword, then $\mathbf{s}^L$ is got from $\mathbf{c}^L$ by at
most  $2^{m-4}$ substitution errors. Further, for every
$\tilde{\mathbf{c}} \in \hat{C}(m)$ other than $\mathbf{c}$ and
$\mathbf{c} + c_1^m(01)$ we have
\begin{eqnarray*}
d_H(\mathbf{s}^L, \tilde{\mathbf{c}}^L) &\ge &d_H(\mathbf{c}^L,
\tilde{\mathbf{c}}^L) - d_H(\mathbf{s}^L, \mathbf{c}^L) \\{}&\ge&
2^{m-2} - 2^{m-4} \\{}&>& 2^{m-4}~.
\end{eqnarray*}
If one uses the fast Hadamard transform to compute $\left[
\mathbf{s}^L | \mathbf{0} \right] H_n$ the coordinate with maximum
absolute value will then correspond to either the pair comprised
of $\mathbf{c}$ and its bitwise complement or the pair comprised
of $\mathbf{c} + c_1^m(01)$ and its bitwise complement. Further,
there will be at most two competing locations for the maximum
absolute value.

Similarly, if the location of the repetition  is in the first half
of the codeword, then $\mathbf{s}^R$ is got from $\mathbf{c}^R$ by
at most  $2^{m-4}$ substitution errors, so by using the fast
Hadamard transform to compute $\left[ \mathbf{0} | \mathbf{s}^R
\right] H_n$, the coordinate with maximum absolute value will
correspond to either the pair comprised of $\mathbf{c}$ and its
bitwise complement or the pair comprised of $\mathbf{c} +
c_1^m(10)$ and its bitwise complement. Again, at most two
locations will compete for the maximum absolute value.

Thus in $O(n \log n)$ operations, there will be at most $8$
candidates for the transmitted codeword. We may now again follow
the naive way and consider all the $2n$ strings of length $n$
obtained by inserting either 0 or 1 at each position in
$\mathbf{s}$ and compare each resulting string with each of these
$8$ candidate codewords. Using this approach, in $O(n)$ operations
the true codeword will follow.

\section{Summary and Concluding Remarks}\label{sectionconcRM}

In this Chapter we studied the performance of a Reed-Muller
RM($1$,$m$) code, as an instance of a substitution-error
correcting code, over channels in which, in addition to
substitution errors, a sampling error can cause synchronization
errors. Specifically, we studied the cases where the
synchronization error results in the deletion of a single bit and
where it results in the repetition of a single bit. The model we
worked with is aimed at handling the kinds of errors that can
occur in a variety of applications, such as magnetic recording and
wireless transmission, in the absence of adequate timing recovery.
Our approach to handling synchronization errors is to start with a
good substitution-error correcting code, to analyze which codeword
pairs cause the identification problem, and then find a linear
subcode of as high a rate as possible that would both provide
protection against substitution errors and be robust to the
synchronization errors. The rate loss incurred from using the
subcode and the increase in the complexity of the decoding
algorithm should of course be reasonably small for such an
approach to work.



Using the structural properties previously proved in Chapter
~\ref{reed-muller-struc}, we provided an analysis that is
combinatorially much tighter than might be needed for our immediate
concerns. These combinatorial results may also be of independent
interest. Specifically, we enumerated all pairs of codewords of the
RM($1$,$m$) codes that suffer from an identification problem over a
channel allowing for the deletion of a single bit. We introduced a
pruned linear subcode of the RM($1$,$m$) code, with the loss of one
information bit, which does not suffer from the identification
problem under the deletion of a single bit. Given a pair of
codewords in the pruned code the appropriate notion of distance
between them over a channel permitting synchronization errors is the
minimum Hamming distance between any pair of strings which are
derived respectively from each codeword after the application of
such synchronization error. We gave a combinatorially tight analysis
of the the minimum distance of the pruned code for this notion of
distance for both the case of the deletion of a single bit and the
case of the repetition of a single bit. Specifically, we explicitly
identified all pairs of codewords of the pruned code for which the
post-synchronization error Hamming distance equals the corresponding
post-synchronization minimum distance of the pruned code.

Finally, we provided a bounded distance decoding algorithm,
suitable for the use of the pruned code over a channel where in
addition to possibly one deletion error (respectively one
repetition error), substitution errors can occur as well. The
complexity of this algorithm is of the same order as that of the
usual fast Hadamard transform based decoding for the RM($1$,$m$)
code. What is more, the proposed algorithm can in fact be
essentially run on the same hardware platform as in the case
without synchronization errors.
